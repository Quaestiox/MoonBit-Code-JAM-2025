var wt=Object.defineProperty;var Pt=(b,t,e)=>t in b?wt(b,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):b[t]=e;var g=(b,t,e)=>Pt(b,typeof t!="symbol"?t+"":t,e);(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const s of document.querySelectorAll('link[rel="modulepreload"]'))i(s);new MutationObserver(s=>{for(const o of s)if(o.type==="childList")for(const r of o.addedNodes)r.tagName==="LINK"&&r.rel==="modulepreload"&&i(r)}).observe(document,{childList:!0,subtree:!0});function e(s){const o={};return s.integrity&&(o.integrity=s.integrity),s.referrerPolicy&&(o.referrerPolicy=s.referrerPolicy),s.crossOrigin==="use-credentials"?o.credentials="include":s.crossOrigin==="anonymous"?o.credentials="omit":o.credentials="same-origin",o}function i(s){if(s.ep)return;s.ep=!0;const o=e(s);fetch(s.href,o)}})();class q{constructor(t,e,i){this.objects=t,this.object=e,this.onUpdate=i}execute(){this.objects.push(this.object),this.onUpdate()}undo(){const t=this.objects.indexOf(this.object);t>-1&&this.objects.splice(t,1),this.onUpdate()}redo(){this.execute()}}class St{constructor(t,e,i){g(this,"index",-1);this.objects=t,this.object=e,this.onUpdate=i,this.index=t.indexOf(e)}execute(){this.index>-1&&this.objects.splice(this.index,1),this.onUpdate()}undo(){this.index>-1&&this.objects.splice(this.index,0,this.object),this.onUpdate()}redo(){this.execute()}}class Bt{constructor(t,e,i,s,o,r){g(this,"oldX");g(this,"oldY");g(this,"newX");g(this,"newY");this.body=t,this.onUpdate=r,this.oldX=e,this.oldY=i,this.newX=s,this.newY=o}execute(){this.body.position.x=this.newX,this.body.position.y=this.newY,this.onUpdate()}undo(){this.body.position.x=this.oldX,this.body.position.y=this.oldY,this.onUpdate()}redo(){this.execute()}}class T{constructor(t,e,i,s,o){g(this,"oldValue");g(this,"newValue");this.object=t,this.property=e,this.onUpdate=o,this.oldValue=i,this.newValue=s}execute(){this.object[this.property]=this.newValue,this.onUpdate()}undo(){this.object[this.property]=this.oldValue,this.onUpdate()}redo(){this.execute()}}class et{constructor(){g(this,"history",[]);g(this,"currentIndex",-1);g(this,"maxHistorySize",50)}canUndo(){return this.currentIndex>=0}canRedo(){return this.currentIndex<this.history.length-1}execute(t){t.execute(),this.history.splice(this.currentIndex+1),this.history.push(t),this.currentIndex++,this.history.length>this.maxHistorySize&&(this.history.shift(),this.currentIndex--)}undo(){this.canUndo()&&(this.history[this.currentIndex].undo(),this.currentIndex--)}redo(){this.canRedo()&&(this.currentIndex++,this.history[this.currentIndex].redo())}clear(){this.history=[],this.currentIndex=-1}getHistorySize(){return this.history.length}getCurrentIndex(){return this.currentIndex}}const z=1e3,Y=600,Mt=1,Ot=.3,Tt=.5,At=0,It=0,jt=1,Et=6,it=.5,st=.5,ot=.25,Dt=8,Lt=5,$t=8,R=8,X=R/2,nt=6,rt=30,_t="#ffffff",Vt="#3498db",Rt="#e74c3c",Ft=5,kt=7,Ct=6,Ht=4,Yt="#e0e0e0",Xt="#666",at="#ff0000",L="#3498db",F="#27ae60",Wt="#999",W="#e74c3c",K="#333",Z="#2c3e50",Q="#f39c12",Nt=1,Ut=2,k=2,Jt=2,tt=3,ct=1,Gt=3;let P=20,j=0,A=0;const V=1,lt="#00ff00",qt={static:"#95a5a6",dynamic:"#3498db",kinematic:"#9b59b6"};function dt(b){return`${b}${Date.now()}_${Math.random().toString(36).substr(2,9)}`}function S(b,t,e,i){const s=b-j,o=t-A;return{x:e/2+s*P,y:i/2-o*P}}function N(b,t,e,i){const s=(b-e/2)/P,o=(i/2-t)/P;return{x:s+j,y:o+A}}function $(b){return b*P}function C(b,t,e,i){const s=e-b,o=i-t;return Math.sqrt(s*s+o*o)}function H(b,t,e,i,s){const o=b-e,r=t-i,n=Math.cos(-s),c=Math.sin(-s);return{x:o*n-r*c,y:o*c+r*n}}function _(b,t,e,i,s){const o=Math.cos(s),r=Math.sin(s);return{x:e+b*o-t*r,y:i+b*r+t*o}}function zt(b,t,e,i,s,o,r){const n=H(b,t,e,i,r),c=s/2,a=o/2;return n.x>=-c&&n.x<=c&&n.y>=-a&&n.y<=a}function Kt(b,t,e,i,s){return C(b,t,e,i)<=s}function Zt(b,t,e,i,s,o){const r=H(b,t,i,s,o);let n=!1;for(let c=0,a=e.length-1;c<e.length;a=c++){const l=e[c].x,d=e[c].y,h=e[a].x,p=e[a].y;d>r.y!=p>r.y&&r.x<(h-l)*(r.y-d)/(p-d)+l&&(n=!n)}return n}function ht(b,t){const e=new Blob([b],{type:"application/json"}),i=URL.createObjectURL(e),s=document.createElement("a");s.href=i,s.download=t,document.body.appendChild(s),s.click(),document.body.removeChild(s),URL.revokeObjectURL(i)}class Qt{constructor(t){g(this,"canvas");g(this,"ctx");g(this,"objects",[]);g(this,"selectedObject",null);g(this,"currentTool","select");g(this,"drawingObject",null);g(this,"polygonVertices",[]);g(this,"jointBodyA",null);g(this,"jointAnchorA",null);g(this,"isDragging",!1);g(this,"dragStartPos",null);g(this,"mousePos",{x:0,y:0});g(this,"commandHistory");g(this,"moveStartPos",null);g(this,"draggingAnchor",null);g(this,"anchorStartPos",null);g(this,"isPanning",!1);g(this,"panStartOriginX",0);g(this,"panStartOriginY",0);g(this,"panStartMouseX",0);g(this,"panStartMouseY",0);g(this,"isEditingVertices",!1);g(this,"editingBody",null);g(this,"draggedVertexIndex",-1);g(this,"vertexDragStart",null);g(this,"isRotating",!1);g(this,"rotateStartAngle",0);g(this,"rotateStartMouseAngle",0);g(this,"isScaling",!1);g(this,"scaleHandle",null);g(this,"scaleStartBodyPos",{x:0,y:0});g(this,"scaleStartAngle",0);g(this,"scaleStartWidth",0);g(this,"scaleStartHeight",0);g(this,"scaleStartRadius",0);g(this,"scaleStartVertices",[]);g(this,"isPreviewMode",!1);g(this,"box2dWorld",null);g(this,"box2dBodies",new Map);g(this,"box2dJoints",new Map);g(this,"previewAnimationId",null);g(this,"previewPaused",!1);g(this,"previewOriginalState",[]);g(this,"previewPPM",20);g(this,"previewOriginOffsetX",0);g(this,"previewOriginOffsetY",0);this.canvas=document.getElementById(t),this.ctx=this.canvas.getContext("2d"),this.commandHistory=new et,this.setupEventListeners(),this.updateUndoRedoButtons(),this.render()}setupEventListeners(){document.querySelectorAll(".tool-btn").forEach(e=>{e.addEventListener("click",i=>{const s=i.currentTarget.dataset.tool;this.setTool(s)})}),this.canvas.addEventListener("mousedown",this.onMouseDown.bind(this)),this.canvas.addEventListener("mousemove",this.onMouseMove.bind(this)),this.canvas.addEventListener("mouseup",this.onMouseUp.bind(this)),this.canvas.addEventListener("dblclick",this.onDoubleClick.bind(this)),this.canvas.addEventListener("wheel",this.onMouseWheel.bind(this),{passive:!1}),this.canvas.addEventListener("contextmenu",e=>e.preventDefault()),document.getElementById("btn-new")?.addEventListener("click",()=>this.newMap()),document.getElementById("btn-save")?.addEventListener("click",()=>this.saveMap()),document.getElementById("btn-load")?.addEventListener("click",()=>this.loadMap()),document.getElementById("btn-export")?.addEventListener("click",()=>this.exportBox2D()),document.getElementById("btn-toggle-panel")?.addEventListener("click",()=>this.togglePanel()),document.getElementById("btn-preview")?.addEventListener("click",()=>this.togglePreview()),document.getElementById("btn-preview-play")?.addEventListener("click",()=>this.resumePreview()),document.getElementById("btn-preview-pause")?.addEventListener("click",()=>this.pausePreview()),document.getElementById("btn-preview-reset")?.addEventListener("click",()=>this.resetPreview()),document.getElementById("btn-preview-exit")?.addEventListener("click",()=>this.exitPreview()),document.getElementById("btn-undo")?.addEventListener("click",()=>this.undo()),document.getElementById("btn-redo")?.addEventListener("click",()=>this.redo()),document.getElementById("file-input")?.addEventListener("change",e=>{const i=e.target.files?.[0];i&&this.loadFromFile(i)}),document.addEventListener("keydown",e=>{if(this.isPreviewMode){e.key==="Escape"&&(e.preventDefault(),this.exitPreview());return}e.key==="Delete"&&this.selectedObject?this.deleteSelected():e.ctrlKey&&e.key==="z"?(e.preventDefault(),this.undo()):e.ctrlKey&&e.key==="y"?(e.preventDefault(),this.redo()):e.key===" "&&(e.preventDefault(),this.togglePreview())}),this.setupViewControls()}setupViewControls(){const t=document.getElementById("canvas-width-slider"),e=document.getElementById("canvas-width-value"),i=document.getElementById("canvas-height-slider"),s=document.getElementById("canvas-height-value"),o=document.getElementById("ppm-slider"),r=document.getElementById("ppm-value"),n=document.getElementById("origin-x-slider"),c=document.getElementById("origin-x-value"),a=document.getElementById("origin-y-slider"),l=document.getElementById("origin-y-value"),d=document.getElementById("btn-reset-view");t?.addEventListener("input",h=>{const p=parseInt(h.target.value);this.canvas.width=p,e&&(e.textContent=p.toString()),this.render(),this.updateStatus("画布宽度已调整为 "+p+"px")}),i?.addEventListener("input",h=>{const p=parseInt(h.target.value);this.canvas.height=p,s&&(s.textContent=p.toString()),this.render(),this.updateStatus("画布高度已调整为 "+p+"px")}),o?.addEventListener("input",h=>{const p=parseInt(h.target.value);P=p,r&&(r.textContent=p.toString()),this.render()}),n?.addEventListener("input",h=>{const p=parseFloat(h.target.value);j=p,c&&(c.textContent=p.toFixed(2)),this.render()}),a?.addEventListener("input",h=>{const p=parseFloat(h.target.value);A=p,l&&(l.textContent=p.toFixed(2)),this.render()}),d?.addEventListener("click",()=>{this.canvas.width=z,this.canvas.height=Y,t&&(t.value=String(z)),e&&(e.textContent=String(z)),i&&(i.value=String(Y)),s&&(s.textContent=String(Y)),P=20,j=0,A=Y/2/P,o&&(o.value="20"),r&&(r.textContent="20"),n&&(n.value="0"),c&&(c.textContent="0.00"),a&&(a.value=String(A)),l&&(l.textContent=A.toFixed(2)),this.render(),this.updateStatus("视图已重置")})}togglePanel(){const t=document.getElementById("property-panel");if(t){t.classList.toggle("collapsed");const e=t.classList.contains("collapsed");this.updateStatus(e?"属性面板已收起":"属性面板已展开")}}setTool(t){this.currentTool=t,this.drawingObject=null,this.polygonVertices=[],this.jointBodyA=null,this.jointAnchorA=null,document.querySelectorAll(".tool-btn").forEach(e=>{e.classList.remove("active")}),document.querySelector(`[data-tool="${t}"]`)?.classList.add("active"),this.updateStatus(`工具: ${t}`),this.render()}getMousePos(t){const e=this.canvas.getBoundingClientRect(),i=this.canvas.width/e.width,s=this.canvas.height/e.height,o=(t.clientX-e.left)*i,r=(t.clientY-e.top)*s;return N(o,r,this.canvas.width,this.canvas.height)}onMouseDown(t){if(this.isPreviewMode&&t.button!==1)return;if(t.button===1){t.preventDefault(),this.isPanning=!0,this.panStartOriginX=j,this.panStartOriginY=A,this.panStartMouseX=t.clientX,this.panStartMouseY=t.clientY,this.canvas.style.cursor="grabbing";return}if(t.button!==0)return;const e=this.getMousePos(t);switch(this.currentTool){case"select":this.handleSelectMouseDown(e);break;case"rect":case"circle":this.handleShapeMouseDown(e);break;case"polygon":this.handlePolygonMouseDown(e);break;case"revoluteJoint":this.handleJointMouseDown(e);break;case"delete":this.handleDeleteMouseDown(e);break}}onMouseMove(t){if(this.isPanning){const i=t.clientX-this.panStartMouseX,s=t.clientY-this.panStartMouseY;j=this.panStartOriginX-i/P,A=this.panStartOriginY+s/P,this.updateViewControlsUI(),this.render();return}if(this.isPreviewMode){const i=this.getMousePos(t);this.updateStatus("物理预览模式",`坐标: (${i.x.toFixed(2)}m, ${i.y.toFixed(2)}m)`,"按 ESC 或点击退出");return}const e=this.getMousePos(t);if(this.mousePos=e,this.isEditingVertices)this.updateStatus("顶点编辑模式 (拖动顶点修改 | 双击/点击空白处退出)",`坐标: (${e.x.toFixed(2)}m, ${e.y.toFixed(2)}m)`);else if(this.currentTool==="polygon"&&this.polygonVertices.length>0){const i=this.polygonVertices.length,s=8;let o="";i<3?o=`已有 ${i} 个顶点，至少需要 3 个`:i>=s?o=`已达到物理引擎限制 (${s}个)，请点击起始点或双击完成`:o=`已有 ${i} 个顶点（最多${s}个），双击或点击起始点完成`,this.updateStatus("多边形工具",`坐标: (${e.x.toFixed(2)}m, ${e.y.toFixed(2)}m)`,o)}else this.updateStatus(`工具: ${this.currentTool}`,`坐标: (${e.x.toFixed(2)}m, ${e.y.toFixed(2)}m)`);if(this.draggedVertexIndex>=0&&this.editingBody?.vertices){const i=this.editingBody,s=Math.cos(-i.angle),o=Math.sin(-i.angle),r=e.x-i.position.x,n=e.y-i.position.y,c=r*s-n*o,a=r*o+n*s;i.vertices[this.draggedVertexIndex].x=c,i.vertices[this.draggedVertexIndex].y=a,this.render();return}if(this.draggingAnchor){const{joint:i,isAnchorA:s}=this.draggingAnchor,o=this.objects.find(r=>r.id===(s?i.bodyAId:i.bodyBId));if(o){const r=H(e.x,e.y,o.position.x,o.position.y,o.angle);s?(i.anchorALocal.x=r.x,i.anchorALocal.y=r.y):(i.anchorBLocal.x=r.x,i.anchorBLocal.y=r.y)}this.render();return}if(this.isRotating&&this.selectedObject&&this.selectedObject.type==="body"){const i=this.selectedObject,s=e.x-i.position.x,o=e.y-i.position.y,n=Math.atan2(o,s)-this.rotateStartMouseAngle;i.angle=this.rotateStartAngle+n,this.render();return}if(this.isScaling&&this.selectedObject&&this.selectedObject.type==="body"){const i=this.selectedObject;this.handleScaling(i,e),this.render();return}if(this.currentTool==="select"&&this.isDragging&&this.selectedObject&&this.dragStartPos){const i=e.x-this.dragStartPos.x,s=e.y-this.dragStartPos.y;this.selectedObject.type==="body"&&(this.selectedObject.position.x+=i,this.selectedObject.position.y+=s),this.dragStartPos=e,this.render()}this.drawingObject&&(this.currentTool==="rect"||this.currentTool==="circle")&&(this.updateDrawingShape(e),this.render()),(this.currentTool!=="select"||this.polygonVertices.length>0)&&this.render()}onMouseUp(t){if(this.isPanning){this.isPanning=!1,this.canvas.style.cursor=this.isPreviewMode?"default":"crosshair";return}if(!this.isPreviewMode){if((this.currentTool==="rect"||this.currentTool==="circle")&&this.drawingObject&&this.finalizeDrawingShape(),this.draggingAnchor&&this.anchorStartPos){const{joint:e,isAnchorA:i}=this.draggingAnchor,s=i?e.anchorALocal:e.anchorBLocal,o=i?"anchorALocal":"anchorBLocal",r=this.anchorStartPos,n={x:s.x,y:s.y};if(r.x!==n.x||r.y!==n.y){const c=new T(e,o,r,n,()=>{this.render(),this.updatePropertyPanel()});this.commandHistory.execute(c),this.updateUndoRedoButtons()}this.draggingAnchor=null,this.anchorStartPos=null,this.updatePropertyPanel()}if(this.isRotating&&this.selectedObject&&this.selectedObject.type==="body"){const e=this.selectedObject,i=this.rotateStartAngle,s=e.angle;if(Math.abs(s-i)>.01){const o=new T(e,"angle",i,s,()=>{this.render(),this.updatePropertyPanel()});this.commandHistory.execute(o),this.updateUndoRedoButtons()}this.isRotating=!1,this.updatePropertyPanel()}if(this.isScaling&&this.selectedObject&&this.selectedObject.type==="body"){const e=this.selectedObject;let i=!1;if(e.shapeType==="box"){if(i=Math.abs((e.width||0)-this.scaleStartWidth)>.01||Math.abs((e.height||0)-this.scaleStartHeight)>.01,i){const s=this.scaleStartWidth,o=e.width,r=new T(e,"width",s,o,()=>{this.render(),this.updatePropertyPanel()});this.commandHistory.execute(r),this.updateUndoRedoButtons()}}else if(e.shapeType==="circle"){if(i=Math.abs((e.radius||0)-this.scaleStartRadius)>.01,i){const s=new T(e,"radius",this.scaleStartRadius,e.radius,()=>{this.render(),this.updatePropertyPanel()});this.commandHistory.execute(s),this.updateUndoRedoButtons()}}else if(e.shapeType==="polygon"&&e.vertices&&(i=e.vertices.some((s,o)=>Math.abs(s.x-this.scaleStartVertices[o].x)>.01||Math.abs(s.y-this.scaleStartVertices[o].y)>.01),i)){const s=new T(e,"vertices",this.scaleStartVertices,e.vertices,()=>{this.render(),this.updatePropertyPanel()});this.commandHistory.execute(s),this.updateUndoRedoButtons()}this.isScaling=!1,this.scaleHandle=null,this.updatePropertyPanel()}if(this.draggedVertexIndex>=0&&this.vertexDragStart&&this.editingBody?.vertices){const e=this.editingBody,i=JSON.parse(JSON.stringify(e.vertices));i[this.draggedVertexIndex].x=this.vertexDragStart.x,i[this.draggedVertexIndex].y=this.vertexDragStart.y;const s=JSON.parse(JSON.stringify(e.vertices));if(Math.abs(s[this.draggedVertexIndex].x-i[this.draggedVertexIndex].x)>.01||Math.abs(s[this.draggedVertexIndex].y-i[this.draggedVertexIndex].y)>.01){const r=new T(e,"vertices",i,s,()=>{this.render(),this.updatePropertyPanel()});this.commandHistory.execute(r),this.updateUndoRedoButtons()}this.draggedVertexIndex=-1,this.vertexDragStart=null,this.updatePropertyPanel()}if(this.isDragging&&this.moveStartPos&&this.selectedObject&&this.selectedObject.type==="body"){const e=this.selectedObject,i=this.moveStartPos.x,s=this.moveStartPos.y,o=e.position.x,r=e.position.y;if(i!==o||s!==r){const n=new Bt(e,i,s,o,r,()=>this.render());this.commandHistory.execute(n),this.updateUndoRedoButtons()}}this.isDragging=!1,this.dragStartPos=null,this.moveStartPos=null}}onDoubleClick(t){if(!this.isPreviewMode){if(this.currentTool==="polygon"&&this.polygonVertices.length>=3){this.polygonVertices.pop(),this.finalizePolygon();return}if(this.currentTool==="select"){const e=this.canvas.getBoundingClientRect(),i=this.canvas.width/e.width,s=this.canvas.height/e.height,o=(t.clientX-e.left)*i,r=(t.clientY-e.top)*s,n=N(o,r,this.canvas.width,this.canvas.height);if(this.isEditingVertices){this.exitVertexEditMode();return}const c=this.hitTest(n.x,n.y);if(c&&c.type==="body"){const a=c;a.shapeType==="polygon"&&a.vertices&&this.enterVertexEditMode(a)}}}}onMouseWheel(t){t.preventDefault();const e=this.canvas.getBoundingClientRect(),i=t.clientX-e.left,s=t.clientY-e.top,o=this.canvas.width/e.width,r=this.canvas.height/e.height,n=i*o,c=s*r,a=N(n,c,this.canvas.width,this.canvas.height),l=t.deltaY>0?-1:1,d=P;if(P=Math.max(5,Math.min(50,P+l)),P===d)return;const h=N(n,c,this.canvas.width,this.canvas.height);j+=a.x-h.x,A+=a.y-h.y,this.updateViewControlsUI(),this.isPreviewMode?this.rebuildBox2DWorldWithNewScale():this.render()}updateViewControlsUI(){const t=document.getElementById("ppm-slider"),e=document.getElementById("ppm-value");t&&(t.value=P.toString()),e&&(e.textContent=P.toString());const i=document.getElementById("origin-x-slider"),s=document.getElementById("origin-x-value");if(i){const n=Math.max(-20,Math.min(20,j));i.value=n.toString()}s&&(s.textContent=j.toFixed(2));const o=document.getElementById("origin-y-slider"),r=document.getElementById("origin-y-value");if(o){const n=Math.max(-20,Math.min(20,A));o.value=n.toString()}r&&(r.textContent=A.toFixed(2))}handleSelectMouseDown(t){if(this.selectedObject&&this.selectedObject.type==="body"&&!this.isEditingVertices){const s=this.selectedObject;if(this.hitTestRotateHandle(s,t.x,t.y)){this.isRotating=!0,this.rotateStartAngle=s.angle;const r=t.x-s.position.x,n=t.y-s.position.y;this.rotateStartMouseAngle=Math.atan2(n,r),console.log("开始旋转物体");return}const o=this.hitTestScaleHandle(s,t.x,t.y);if(o){this.isScaling=!0,this.scaleHandle=o,this.scaleStartBodyPos={x:s.position.x,y:s.position.y},this.scaleStartAngle=s.angle,s.shapeType==="box"?(this.scaleStartWidth=s.width||1,this.scaleStartHeight=s.height||1):s.shapeType==="circle"?this.scaleStartRadius=s.radius||.5:s.shapeType==="polygon"&&s.vertices&&(this.scaleStartVertices=s.vertices.map(r=>({x:r.x,y:r.y}))),console.log(`开始缩放物体，手柄: ${o}`);return}}if(this.isEditingVertices&&this.editingBody){const s=this.hitTestVertex(this.editingBody,t.x,t.y);if(s>=0){this.draggedVertexIndex=s;const o=this.editingBody.vertices[s];this.vertexDragStart={x:o.x,y:o.y},console.log(`开始拖动顶点 ${s}`);return}this.exitVertexEditMode()}const e=this.hitTestAnchor(t.x,t.y);if(e){this.draggingAnchor=e,this.selectedObject=e.joint;const s=e.isAnchorA?e.joint.anchorALocal:e.joint.anchorBLocal;this.anchorStartPos={x:s.x,y:s.y},this.updatePropertyPanel(),this.render();return}const i=this.hitTest(t.x,t.y);this.selectedObject=i,i&&i.type==="body"&&(this.isDragging=!0,this.dragStartPos=t,this.moveStartPos={x:i.position.x,y:i.position.y}),this.updatePropertyPanel(),this.render()}handleShapeMouseDown(t){this.currentTool==="rect"?this.drawingObject=this.createBody("box",t.x,t.y,1,1):this.drawingObject=this.createBody("circle",t.x,t.y,.5),this.dragStartPos=t}handlePolygonMouseDown(t){if(this.polygonVertices.length>=3){const i=this.polygonVertices[0];if(Math.sqrt(Math.pow(t.x-i.x,2)+Math.pow(t.y-i.y,2))<.5){this.finalizePolygon();return}}const e=8;if(this.polygonVertices.length>=e){this.updateStatus("多边形工具","",`⚠️ Box2D 物理引擎最多支持 ${e} 个顶点，请点击起始点或双击完成创建`);return}this.polygonVertices.push({x:t.x,y:t.y}),this.render()}handleJointMouseDown(t){const e=this.hitTest(t.x,t.y);if(!e||e.type!=="body"){this.updateStatus("关节工具","","请点击一个刚体作为第一个连接点");return}if(!this.jointBodyA)this.jointBodyA=e,this.jointAnchorA=t,this.updateStatus("关节工具","",`已选择物体 ${this.jointBodyA.id.substring(0,8)}..., 请选择第二个刚体`);else{const i=e;if(this.jointBodyA.id===i.id){this.updateStatus("关节工具","","❌ 不能连接同一个物体！请选择另一个刚体");return}this.createJoint(this.jointBodyA,i,this.jointAnchorA,t),this.jointBodyA=null,this.jointAnchorA=null,this.updateStatus("关节工具","","✓ 关节已创建！（默认允许碰撞，可在属性面板修改）")}}handleDeleteMouseDown(t){const e=this.hitTest(t.x,t.y);e&&(this.objects=this.objects.filter(i=>i.id!==e.id),this.selectedObject=null,this.updatePropertyPanel(),this.render())}updateDrawingShape(t){if(!this.drawingObject||!this.dragStartPos)return;const e=t.x-this.dragStartPos.x,i=t.y-this.dragStartPos.y;this.drawingObject.shapeType==="box"?(this.drawingObject.width=Math.max(it,Math.abs(e)),this.drawingObject.height=Math.max(st,Math.abs(i)),this.drawingObject.position.x=this.dragStartPos.x+e/2,this.drawingObject.position.y=this.dragStartPos.y+i/2):this.drawingObject.shapeType==="circle"&&(this.drawingObject.radius=Math.max(ot,Math.max(Math.abs(e),Math.abs(i))/2))}finalizeDrawingShape(){if(this.drawingObject){const t=this.drawingObject,e=new q(this.objects,t,()=>this.render());this.commandHistory.execute(e),this.drawingObject=null,this.dragStartPos=null,this.updateUndoRedoButtons(),this.render()}}finalizePolygon(){if(this.polygonVertices.length>=3){const t=this.polygonVertices.reduce((r,n)=>r+n.x,0)/this.polygonVertices.length,e=this.polygonVertices.reduce((r,n)=>r+n.y,0)/this.polygonVertices.length;let i=this.polygonVertices.map(r=>({x:r.x-t,y:r.y-e}));i=this.ensureCounterClockwise(i);const s=this.createBody("polygon",t,e);s.vertices=i;const o=new q(this.objects,s,()=>this.render());this.commandHistory.execute(o),this.polygonVertices=[],this.updateUndoRedoButtons(),this.render()}}ensureCounterClockwise(t){if(t.length<3)return t;let e=0;for(let i=0;i<t.length;i++){const s=(i+1)%t.length;e+=t[i].x*t[s].y,e-=t[s].x*t[i].y}return e<0?(console.log("多边形顶点是顺时针，反转为逆时针"),t.reverse()):t}createBody(t,e,i,s,o){return{id:dt("body_"),type:"body",shapeType:t,position:{x:e,y:i},angle:0,width:s,height:o,radius:t==="circle"?20:void 0,bodyType:"dynamic",density:1,friction:.3,restitution:.5,linearDamping:0,angularDamping:0,gravityScale:1,fixedRotation:!1}}createJoint(t,e,i,s){const o=H(i.x,i.y,t.position.x,t.position.y,t.angle),r=H(s.x,s.y,e.position.x,e.position.y,e.angle),n={id:dt("joint_"),type:"joint",jointType:"revolute",bodyAId:t.id,bodyBId:e.id,anchorALocal:o,anchorBLocal:r};n.enableLimit=!1,n.lowerAngle=-Math.PI/2,n.upperAngle=Math.PI/2,n.enableMotor=!1,n.motorSpeed=0,n.maxMotorTorque=1e3,n.collideConnected=!0;const c=new q(this.objects,n,()=>this.render());this.commandHistory.execute(c),this.updateUndoRedoButtons(),this.render()}hitTest(t,e){const i=10/P;for(let s=this.objects.length-1;s>=0;s--){const o=this.objects[s];if(o.type==="joint"){const r=o,n=this.objects.find(a=>a.id===r.bodyAId),c=this.objects.find(a=>a.id===r.bodyBId);if(n&&c){const a=_(r.anchorALocal.x,r.anchorALocal.y,n.position.x,n.position.y,n.angle),l=_(r.anchorBLocal.x,r.anchorBLocal.y,c.position.x,c.position.y,c.angle);if(C(t,e,a.x,a.y)<=i||C(t,e,l.x,l.y)<=i)return r}}}for(let s=this.objects.length-1;s>=0;s--){const o=this.objects[s];if(o.type==="body"){if(o.shapeType==="box"&&o.width&&o.height){if(zt(t,e,o.position.x,o.position.y,o.width,o.height,o.angle))return o}else if(o.shapeType==="circle"&&o.radius){if(Kt(t,e,o.position.x,o.position.y,o.radius))return o}else if(o.shapeType==="polygon"&&o.vertices&&o.vertices.length>=3&&Zt(t,e,o.vertices,o.position.x,o.position.y,o.angle))return o}}return null}hitTestRotateHandle(t,e,i){let s=0,o=0,r=0;if(t.shapeType==="box"&&t.width&&t.height){const h=t.width/2,p=t.height/2,u=Math.cos(t.angle),y=Math.sin(t.angle),v=[{x:-h,y:-p},{x:h,y:-p},{x:h,y:p},{x:-h,y:p}].map(B=>({x:t.position.x+B.x*u-B.y*y,y:t.position.y+B.x*y+B.y*u}));s=Math.min(...v.map(B=>B.x)),o=Math.max(...v.map(B=>B.x)),r=Math.max(...v.map(B=>B.y))}else if(t.shapeType==="circle"&&t.radius){const h=t.radius;s=t.position.x-h,o=t.position.x+h,r=t.position.y+h}else if(t.shapeType==="polygon"&&t.vertices){const h=Math.cos(t.angle),p=Math.sin(t.angle),u=t.vertices.map(y=>({x:t.position.x+y.x*h-y.y*p,y:t.position.y+y.x*p+y.y*h}));s=Math.min(...u.map(y=>y.x)),o=Math.max(...u.map(y=>y.x)),r=Math.max(...u.map(y=>y.y))}const n=(s+o)/2,a=r+rt/P,l=(nt+5)/P;return Math.sqrt(Math.pow(e-n,2)+Math.pow(i-a,2))<=l}hitTestScaleHandle(t,e,i){const s=this.canvas.width,o=this.canvas.height;let r=0,n=0,c=0,a=0;if(t.shapeType==="box"&&t.width&&t.height){const f=t.width/2,w=t.height/2,O=Math.cos(t.angle),m=Math.sin(t.angle),D=[{x:-f,y:-w},{x:f,y:-w},{x:f,y:w},{x:-f,y:w}].map(I=>({x:t.position.x+I.x*O-I.y*m,y:t.position.y+I.x*m+I.y*O}));r=Math.min(...D.map(I=>I.x)),n=Math.max(...D.map(I=>I.x)),c=Math.min(...D.map(I=>I.y)),a=Math.max(...D.map(I=>I.y))}else if(t.shapeType==="circle"&&t.radius){const f=t.radius;r=t.position.x-f,n=t.position.x+f,c=t.position.y-f,a=t.position.y+f}else if(t.shapeType==="polygon"&&t.vertices){const f=Math.cos(t.angle),w=Math.sin(t.angle),O=t.vertices.map(m=>({x:t.position.x+m.x*f-m.y*w,y:t.position.y+m.x*w+m.y*f}));r=Math.min(...O.map(m=>m.x)),n=Math.max(...O.map(m=>m.x)),c=Math.min(...O.map(m=>m.y)),a=Math.max(...O.map(m=>m.y))}const l=S(r,a,s,o),d=S(n,a,s,o),h=S(r,c,s,o),p=S(n,c,s,o),u=(l.x+d.x)/2,y=(l.y+h.y)/2,x=S(e,i,s,o),v=[{x:l.x,y:l.y,type:"tl"},{x:u,y:l.y,type:"top"},{x:d.x,y:d.y,type:"tr"},{x:d.x,y,type:"right"},{x:p.x,y:p.y,type:"br"},{x:u,y:p.y,type:"bottom"},{x:h.x,y:h.y,type:"bl"},{x:h.x,y,type:"left"}],B=R+5;for(const f of v)if(Math.sqrt(Math.pow(x.x-f.x,2)+Math.pow(x.y-f.y,2))<=B)return f.type;return null}hitTestAnchor(t,e){const i=10/P;for(let s=this.objects.length-1;s>=0;s--){const o=this.objects[s];if(o.type==="joint"){const r=o,n=this.objects.find(a=>a.id===r.bodyAId),c=this.objects.find(a=>a.id===r.bodyBId);if(n&&c){const a=_(r.anchorALocal.x,r.anchorALocal.y,n.position.x,n.position.y,n.angle),l=_(r.anchorBLocal.x,r.anchorBLocal.y,c.position.x,c.position.y,c.angle);if(C(t,e,a.x,a.y)<=i)return{joint:r,isAnchorA:!0};if(C(t,e,l.x,l.y)<=i)return{joint:r,isAnchorA:!1}}}}return null}enterVertexEditMode(t){this.isEditingVertices=!0,this.editingBody=t,this.selectedObject=t,console.log(`进入顶点编辑模式: ${t.id}`),this.updateStatus("顶点编辑模式","拖动顶点修改位置","双击或点击空白处退出"),this.render()}exitVertexEditMode(){this.isEditingVertices=!1,this.editingBody=null,this.draggedVertexIndex=-1,this.vertexDragStart=null,console.log("退出顶点编辑模式"),this.updateStatus("退出顶点编辑模式"),this.render()}hitTestVertex(t,e,i){if(!t.vertices)return-1;const s=.3;for(let o=0;o<t.vertices.length;o++){const r=t.vertices[o],n=Math.cos(t.angle),c=Math.sin(t.angle),a=t.position.x+r.x*n-r.y*c,l=t.position.y+r.x*c+r.y*n;if(Math.sqrt((e-a)**2+(i-l)**2)<=s)return o}return-1}handleScaling(t,e){this.scaleHandle&&(t.shapeType==="box"?this.scaleBox(t,e):t.shapeType==="circle"?this.scaleCircle(t,e):t.shapeType==="polygon"&&this.scalePolygon(t,e))}scaleBox(t,e){if(!t.width||!t.height||!this.scaleHandle)return;const i=this.scaleHandle,s=Math.cos(this.scaleStartAngle),o=Math.sin(this.scaleStartAngle),r=this.scaleStartWidth/2,n=this.scaleStartHeight/2;let c=0,a=0,l=0,d=0;switch(i){case"tl":c=r,a=-n,l=-1,d=1;break;case"tr":c=-r,a=-n,l=1,d=1;break;case"br":c=-r,a=n,l=1,d=-1;break;case"bl":c=r,a=n,l=-1,d=-1;break;case"top":c=0,a=-n,l=0,d=1;break;case"bottom":c=0,a=n,l=0,d=-1;break;case"left":c=r,a=0,l=-1,d=0;break;case"right":c=-r,a=0,l=1,d=0;break}const h=this.scaleStartBodyPos.x+c*s-a*o,p=this.scaleStartBodyPos.y+c*o+a*s,u=e.x-h,y=e.y-p,x=u*s+y*o,v=-u*o+y*s;let B=this.scaleStartWidth,f=this.scaleStartHeight;if(l!==0){const D=x*l;B=Math.max(it,D*2)}if(d!==0){const D=v*d;f=Math.max(st,D*2)}t.width=B,t.height=f;const w=B/2,O=f/2;let m=0,E=0;switch(i){case"tl":m=w,E=-O;break;case"tr":m=-w,E=-O;break;case"br":m=-w,E=O;break;case"bl":m=w,E=O;break;case"top":m=0,E=-O;break;case"bottom":m=0,E=O;break;case"left":m=w,E=0;break;case"right":m=-w,E=0;break}t.position.x=h-(m*s-E*o),t.position.y=p-(m*o+E*s)}scaleCircle(t,e){if(!t.radius||!this.scaleHandle)return;const i=e.x-this.scaleStartBodyPos.x,s=e.y-this.scaleStartBodyPos.y,o=Math.sqrt(i*i+s*s),r=Math.max(ot,o);t.radius=r}scalePolygon(t,e){if(!t.vertices||this.scaleStartVertices.length===0||!this.scaleHandle)return;const i=this.scaleHandle,s=Math.cos(this.scaleStartAngle),o=Math.sin(this.scaleStartAngle),r=Math.min(...this.scaleStartVertices.map(M=>M.x)),n=Math.max(...this.scaleStartVertices.map(M=>M.x)),c=Math.min(...this.scaleStartVertices.map(M=>M.y)),a=Math.max(...this.scaleStartVertices.map(M=>M.y)),l=(r+n)/2,d=(c+a)/2,h=n-r,p=a-c;let u=0,y=0,x=0,v=0;switch(i){case"tl":u=n,y=c,x=-1,v=1;break;case"tr":u=r,y=c,x=1,v=1;break;case"br":u=r,y=a,x=1,v=-1;break;case"bl":u=n,y=a,x=-1,v=-1;break;case"top":u=l,y=c,x=0,v=1;break;case"bottom":u=l,y=a,x=0,v=-1;break;case"left":u=n,y=d,x=-1,v=0;break;case"right":u=r,y=d,x=1,v=0;break}const B=this.scaleStartBodyPos.x+u*s-y*o,f=this.scaleStartBodyPos.y+u*o+y*s,w=e.x-B,O=e.y-f,m=w*s+O*o,E=-w*o+O*s;let D=1,I=1;if(x!==0&&h>0){const M=m*x;D=Math.max(.1,M*2)/h}if(v!==0&&p>0){const M=E*v;I=Math.max(.1,M*2)/p}t.vertices=this.scaleStartVertices.map(M=>{const G=M.x-u,vt=M.y-y,mt=G*D,bt=vt*I;return{x:u+mt,y:y+bt}});const pt=Math.min(...t.vertices.map(M=>M.x)),ut=Math.max(...t.vertices.map(M=>M.x)),yt=Math.min(...t.vertices.map(M=>M.y)),gt=Math.max(...t.vertices.map(M=>M.y)),xt=(pt+ut)/2,ft=(yt+gt)/2,U=xt,J=ft;t.vertices=t.vertices.map(M=>({x:M.x-U,y:M.y-J})),t.position.x=this.scaleStartBodyPos.x+U*s-J*o,t.position.y=this.scaleStartBodyPos.y+U*o+J*s}deleteSelected(){if(this.selectedObject){const t=this.selectedObject,e=new St(this.objects,t,()=>{this.selectedObject=null,this.updatePropertyPanel(),this.render()});this.commandHistory.execute(e),this.updateUndoRedoButtons()}}render(){const t=this.ctx,e=this.canvas.width,i=this.canvas.height;t.clearRect(0,0,e,i),t.strokeStyle=Yt,t.lineWidth=Nt;const s=j-e/2/P,o=j+e/2/P,r=A-i/2/P,n=A+i/2/P;for(let a=Math.floor(s/V)*V;a<=o;a+=V){const l=S(a,0,e,i);t.beginPath(),t.moveTo(l.x,0),t.lineTo(l.x,i),t.stroke()}for(let a=Math.floor(r/V)*V;a<=n;a+=V){const l=S(0,a,e,i);t.beginPath(),t.moveTo(0,l.y),t.lineTo(e,l.y),t.stroke()}t.fillStyle=Xt,t.font="10px monospace";for(let a=Math.ceil(s);a<=Math.floor(o);a++)if(a%5===0){const l=S(a,r,e,i);t.fillText(`${a}m`,l.x+2,i-5)}for(let a=Math.ceil(r);a<=Math.floor(n);a++)if(a%5===0){const l=S(s,a,e,i);t.fillText(`${a}m`,5,l.y-2)}const c=S(0,0,e,i);if(t.strokeStyle=at,t.lineWidth=Ut,t.beginPath(),t.moveTo(c.x-10,c.y),t.lineTo(c.x+10,c.y),t.moveTo(c.x,c.y-10),t.lineTo(c.x,c.y+10),t.stroke(),t.fillStyle=at,t.font="11px monospace",t.fillText("(0,0)",c.x+12,c.y-5),this.objects.forEach(a=>{a.type==="body"?this.renderBody(a):this.renderJoint(a)}),this.drawingObject&&this.renderBody(this.drawingObject),this.polygonVertices.length>0){t.strokeStyle=L,t.fillStyle=L,t.lineWidth=k,t.beginPath();const a=S(this.polygonVertices[0].x,this.polygonVertices[0].y,e,i);t.moveTo(a.x,a.y);for(let l=1;l<this.polygonVertices.length;l++){const d=S(this.polygonVertices[l].x,this.polygonVertices[l].y,e,i);t.lineTo(d.x,d.y)}if(t.stroke(),this.polygonVertices.forEach((l,d)=>{const h=S(l.x,l.y,e,i);t.beginPath(),d===0&&this.polygonVertices.length>=3?(t.fillStyle=L,t.strokeStyle=F,t.lineWidth=tt,t.arc(h.x,h.y,$t,0,Math.PI*2),t.fill(),t.stroke(),t.fillStyle=F,t.font="bold 11px monospace",t.fillText("点击闭合",h.x+12,h.y-8)):(t.fillStyle=L,t.arc(h.x,h.y,Lt,0,Math.PI*2),t.fill())}),this.polygonVertices.length>0){t.setLineDash([5,5]),t.strokeStyle=L,t.lineWidth=ct,t.beginPath();const l=this.polygonVertices[this.polygonVertices.length-1],d=S(l.x,l.y,e,i),h=S(this.mousePos.x,this.mousePos.y,e,i);if(t.moveTo(d.x,d.y),t.lineTo(h.x,h.y),t.stroke(),t.setLineDash([]),this.polygonVertices.length>=3){const p=this.polygonVertices[0];Math.sqrt(Math.pow(this.mousePos.x-p.x,2)+Math.pow(this.mousePos.y-p.y,2))<.5&&(t.setLineDash([5,5]),t.strokeStyle=F,t.lineWidth=Jt,t.beginPath(),t.moveTo(d.x,d.y),t.lineTo(a.x,a.y),t.stroke(),t.setLineDash([]))}}if(this.polygonVertices.length>0){const l=Dt,d=this.polygonVertices.length>=l?`顶点: ${this.polygonVertices.length}/${l} (已达物理引擎限制，双击或点击起始点完成)`:`顶点: ${this.polygonVertices.length}/${l} (至少3个，双击或点击起始点完成)`;t.fillStyle=this.polygonVertices.length>=l?W:Z,t.font="bold 12px monospace",t.fillText(d,10,i-10)}}if(this.currentTool!=="select"&&!this.isDragging){const a=S(this.mousePos.x,this.mousePos.y,e,i);t.strokeStyle=Wt,t.lineWidth=ct,t.setLineDash([3,3]),t.beginPath(),t.moveTo(a.x,0),t.lineTo(a.x,i),t.stroke(),t.beginPath(),t.moveTo(0,a.y),t.lineTo(e,a.y),t.stroke(),t.setLineDash([]),t.fillStyle=W,t.beginPath(),t.arc(a.x,a.y,Ht,0,Math.PI*2),t.fill(),t.fillStyle=K,t.font="11px monospace",t.fillText(`(${this.mousePos.x.toFixed(2)}m, ${this.mousePos.y.toFixed(2)}m)`,a.x+10,a.y-10)}if(this.currentTool==="revoluteJoint"&&this.jointBodyA&&this.jointAnchorA){const a=this.canvas.width,l=this.canvas.height;t.save(),t.strokeStyle=Q,t.lineWidth=Gt,t.setLineDash([5,5]);const d=S(this.jointBodyA.position.x,this.jointBodyA.position.y,a,l);if(this.jointBodyA.shapeType==="box"&&this.jointBodyA.width&&this.jointBodyA.height){const u=this.jointBodyA.width*P,y=this.jointBodyA.height*P;t.strokeRect(d.x-u/2-5,d.y-y/2-5,u+10,y+10)}else if(this.jointBodyA.shapeType==="circle"&&this.jointBodyA.radius){const u=this.jointBodyA.radius*P;t.beginPath(),t.arc(d.x,d.y,u+5,0,Math.PI*2),t.stroke()}t.setLineDash([]);const h=S(this.jointAnchorA.x,this.jointAnchorA.y,a,l);t.fillStyle=Q,t.beginPath(),t.arc(h.x,h.y,Et,0,Math.PI*2),t.fill();const p=S(this.mousePos.x,this.mousePos.y,a,l);t.strokeStyle=Q,t.lineWidth=k,t.setLineDash([5,5]),t.beginPath(),t.moveTo(h.x,h.y),t.lineTo(p.x,p.y),t.stroke(),t.restore()}this.selectedObject&&this.selectedObject.type==="body"&&!this.isEditingVertices&&(this.renderRotateHandle(this.selectedObject),this.renderScaleHandles(this.selectedObject))}renderRotateHandle(t){const e=this.ctx,i=this.canvas.width,s=this.canvas.height;let o=0,r=0,n=0,c=0;if(t.shapeType==="box"&&t.width&&t.height){const u=t.width/2,y=t.height/2,x=Math.cos(t.angle),v=Math.sin(t.angle),f=[{x:-u,y:-y},{x:u,y:-y},{x:u,y},{x:-u,y}].map(w=>({x:t.position.x+w.x*x-w.y*v,y:t.position.y+w.x*v+w.y*x}));o=Math.min(...f.map(w=>w.x)),r=Math.max(...f.map(w=>w.x)),n=Math.min(...f.map(w=>w.y)),c=Math.max(...f.map(w=>w.y))}else if(t.shapeType==="circle"&&t.radius){const u=t.radius;o=t.position.x-u,r=t.position.x+u,n=t.position.y-u,c=t.position.y+u}else if(t.shapeType==="polygon"&&t.vertices){const u=Math.cos(t.angle),y=Math.sin(t.angle),x=t.vertices.map(v=>({x:t.position.x+v.x*u-v.y*y,y:t.position.y+v.x*y+v.y*u}));o=Math.min(...x.map(v=>v.x)),r=Math.max(...x.map(v=>v.x)),n=Math.min(...x.map(v=>v.y)),c=Math.max(...x.map(v=>v.y))}const a=S(o,c,i,s),l=S(r,n,i,s);e.save(),e.strokeStyle=L,e.lineWidth=1,e.setLineDash([5,5]),e.strokeRect(a.x,a.y,l.x-a.x,l.y-a.y),e.setLineDash([]);const d=(a.x+l.x)/2,h=a.y,p=h-rt;e.strokeStyle=L,e.lineWidth=1,e.beginPath(),e.moveTo(d,h),e.lineTo(d,p),e.stroke(),e.fillStyle=Rt,e.strokeStyle="#fff",e.lineWidth=2,e.beginPath(),e.arc(d,p,nt,0,Math.PI*2),e.fill(),e.stroke(),e.strokeStyle="#fff",e.lineWidth=1.5,e.beginPath(),e.arc(d,p,3,.2,Math.PI*1.8),e.stroke(),e.beginPath(),e.moveTo(d-2.5,p-2),e.lineTo(d-1,p-3.5),e.lineTo(d-2.5,p-2.5),e.fill(),e.restore()}renderScaleHandles(t){const e=this.ctx,i=this.canvas.width,s=this.canvas.height;let o=0,r=0,n=0,c=0;if(t.shapeType==="box"&&t.width&&t.height){const x=t.width/2,v=t.height/2,B=Math.cos(t.angle),f=Math.sin(t.angle),O=[{x:-x,y:-v},{x,y:-v},{x,y:v},{x:-x,y:v}].map(m=>({x:t.position.x+m.x*B-m.y*f,y:t.position.y+m.x*f+m.y*B}));o=Math.min(...O.map(m=>m.x)),r=Math.max(...O.map(m=>m.x)),n=Math.min(...O.map(m=>m.y)),c=Math.max(...O.map(m=>m.y))}else if(t.shapeType==="circle"&&t.radius){const x=t.radius;o=t.position.x-x,r=t.position.x+x,n=t.position.y-x,c=t.position.y+x}else if(t.shapeType==="polygon"&&t.vertices){const x=Math.cos(t.angle),v=Math.sin(t.angle),B=t.vertices.map(f=>({x:t.position.x+f.x*x-f.y*v,y:t.position.y+f.x*v+f.y*x}));o=Math.min(...B.map(f=>f.x)),r=Math.max(...B.map(f=>f.x)),n=Math.min(...B.map(f=>f.y)),c=Math.max(...B.map(f=>f.y))}const a=S(o,c,i,s),l=S(r,c,i,s),d=S(o,n,i,s),h=S(r,n,i,s),p=(a.x+l.x)/2,u=(a.y+d.y)/2,y=[{x:a.x,y:a.y,type:"tl"},{x:p,y:a.y,type:"top"},{x:l.x,y:l.y,type:"tr"},{x:l.x,y:u,type:"right"},{x:h.x,y:h.y,type:"br"},{x:p,y:h.y,type:"bottom"},{x:d.x,y:d.y,type:"bl"},{x:d.x,y:u,type:"left"}];e.save(),y.forEach(x=>{e.fillStyle=_t,e.strokeStyle=Vt,e.lineWidth=2,e.fillRect(x.x-X,x.y-X,R,R),e.strokeRect(x.x-X,x.y-X,R,R)}),e.restore()}renderBody(t){const e=this.ctx,i=this.canvas.width,s=this.canvas.height,o=this.selectedObject===t,r=S(t.position.x,t.position.y,i,s);if(e.save(),e.translate(r.x,r.y),e.rotate(-t.angle),e.fillStyle=qt[t.bodyType],e.strokeStyle=o?lt:Z,e.lineWidth=o?3:2,t.shapeType==="box"&&t.width&&t.height){const n=$(t.width),c=$(t.height);e.fillRect(-n/2,-c/2,n,c),e.strokeRect(-n/2,-c/2,n,c),e.strokeStyle=o?"#fff":"#34495e",e.lineWidth=2,e.beginPath(),e.moveTo(0,0),e.lineTo(n/2,0),e.stroke()}else if(t.shapeType==="circle"&&t.radius){const n=$(t.radius);e.beginPath(),e.arc(0,0,n,0,Math.PI*2),e.fill(),e.stroke(),e.strokeStyle=o?"#fff":"#34495e",e.lineWidth=2,e.beginPath(),e.moveTo(0,0),e.lineTo(n,0),e.stroke()}else if(t.shapeType==="polygon"&&t.vertices&&t.vertices.length>0){e.beginPath();const n=t.vertices[0],c={x:$(n.x),y:-$(n.y)};e.moveTo(c.x,c.y);for(let a=1;a<t.vertices.length;a++){const l=t.vertices[a],d={x:$(l.x),y:-$(l.y)};e.lineTo(d.x,d.y)}e.closePath(),e.fill(),e.stroke()}if(e.fillStyle=o?"#fff":Z,e.beginPath(),e.arc(0,0,3,0,Math.PI*2),e.fill(),e.restore(),this.isEditingVertices&&this.editingBody===t&&t.vertices)for(let n=0;n<t.vertices.length;n++){const c=t.vertices[n],a=Math.cos(t.angle),l=Math.sin(t.angle),d=t.position.x+c.x*a-c.y*l,h=t.position.y+c.x*l+c.y*a,p=S(d,h,i,s);e.save(),e.fillStyle=this.draggedVertexIndex===n?W:L,e.strokeStyle="#fff",e.lineWidth=k,e.beginPath(),e.arc(p.x,p.y,Ct,0,Math.PI*2),e.fill(),e.stroke(),e.fillStyle="#fff",e.font="bold 10px monospace",e.textAlign="center",e.textBaseline="middle",e.fillText(n.toString(),p.x,p.y),e.restore()}o&&(e.fillStyle=K,e.font="10px monospace",e.fillText(t.id.substring(0,12)+"...",r.x+10,r.y-10))}renderJoint(t){const e=this.ctx,i=this.canvas.width,s=this.canvas.height,o=this.selectedObject===t,r=this.objects.find(y=>y.id===t.bodyAId),n=this.objects.find(y=>y.id===t.bodyBId);if(!r||!n)return;const c=_(t.anchorALocal.x,t.anchorALocal.y,r.position.x,r.position.y,r.angle),a=_(t.anchorBLocal.x,t.anchorBLocal.y,n.position.x,n.position.y,n.angle),l=S(c.x,c.y,i,s),d=S(a.x,a.y,i,s);e.strokeStyle=o?lt:"#e67e22",e.lineWidth=o?3:2,e.beginPath(),e.moveTo(l.x,l.y),e.lineTo(d.x,d.y),e.stroke();const h=o?kt:Ft;e.fillStyle=W;const p=this.draggingAnchor&&this.draggingAnchor.joint===t&&this.draggingAnchor.isAnchorA,u=this.draggingAnchor&&this.draggingAnchor.joint===t&&!this.draggingAnchor.isAnchorA;if(e.beginPath(),e.arc(l.x,l.y,p?10:h,0,Math.PI*2),e.fill(),(o||p)&&(e.strokeStyle=p?F:"#fff",e.lineWidth=p?tt:k,e.stroke()),e.fillStyle="#9b59b6",e.beginPath(),e.arc(d.x,d.y,u?10:h,0,Math.PI*2),e.fill(),(o||u)&&(e.strokeStyle=u?F:"#fff",e.lineWidth=u?tt:k,e.stroke()),o){e.fillStyle=K,e.font="10px monospace";const y=(l.x+d.x)/2,x=(l.y+d.y)/2;e.fillText("Revolute Joint",y+5,x-5)}}getPlatformBehaviorType(t){const e=Math.floor(t*1e3),i=Math.floor(e%10);return i>=0&&i<=4?i:0}setPlatformBehaviorType(t,e){const s=Math.floor(t*100)/100+e/1e3;return Math.min(Math.max(s,0),1)}updatePropertyPanel(){const t=document.getElementById("property-content");if(t){if(!this.selectedObject){t.innerHTML='<p class="placeholder">请选择一个对象以编辑其属性</p>';return}this.selectedObject.type==="body"?(t.innerHTML=this.generateBodyProperties(this.selectedObject),this.bindBodyPropertyEvents()):(t.innerHTML=this.generateJointProperties(this.selectedObject),this.bindJointPropertyEvents())}}generateBodyProperties(t){let e="";return t.shapeType==="box"&&t.width!==void 0&&t.height!==void 0?e=`
        <div class="property-group">
          <div class="property-group-title">矩形尺寸 (单位：米)</div>
          <div class="property-field">
            <label>宽度 (Width)</label>
            <input type="number" id="prop-width" class="body-prop" value="${t.width.toFixed(2)}" step="0.1" min="0.1">
          </div>
          <div class="property-field">
            <label>高度 (Height)</label>
            <input type="number" id="prop-height" class="body-prop" value="${t.height.toFixed(2)}" step="0.1" min="0.1">
          </div>
        </div>
      `:t.shapeType==="circle"&&t.radius!==void 0?e=`
        <div class="property-group">
          <div class="property-group-title">圆形尺寸 (单位：米)</div>
          <div class="property-field">
            <label>半径 (Radius)</label>
            <input type="number" id="prop-radius" class="body-prop" value="${t.radius.toFixed(2)}" step="0.1" min="0.1">
          </div>
        </div>
      `:t.shapeType==="polygon"&&t.vertices&&t.vertices.length>0&&(e=`
        <div class="property-group">
          <div class="property-group-title">多边形顶点 (单位：米)</div>
          ${t.vertices.map((s,o)=>`
        <div class="vertex-field">
          <label>顶点 ${o+1}</label>
          <div class="input-group">
            <input type="number" id="prop-vertex-${o}-x" class="body-prop vertex-input" 
                   value="${s.x.toFixed(2)}" step="0.1" placeholder="X">
            <input type="number" id="prop-vertex-${o}-y" class="body-prop vertex-input" 
                   value="${s.y.toFixed(2)}" step="0.1" placeholder="Y">
          </div>
        </div>
      `).join("")}
          <div class="hint">提示：顶点坐标相对于物体中心</div>
        </div>
      `),`
      <div class="object-info">
        <div class="object-info-row">
          <span class="object-info-label">ID:</span>
          <span class="object-info-value">${t.id}</span>
        </div>
        <div class="object-info-row">
          <span class="object-info-label">类型:</span>
          <span class="object-info-value">刚体 (${t.shapeType})</span>
        </div>
      </div>

      <div class="property-group">
        <div class="property-group-title">位置坐标 (单位：米)</div>
        <div class="property-field">
          <label>X 坐标</label>
          <input type="number" id="prop-position-x" class="body-prop" value="${t.position.x.toFixed(2)}" step="0.1">
        </div>
        <div class="property-field">
          <label>Y 坐标</label>
          <input type="number" id="prop-position-y" class="body-prop" value="${t.position.y.toFixed(2)}" step="0.1">
        </div>
        <div class="property-field">
          <label>旋转角度 (度)</label>
          <input type="number" id="prop-angle" class="body-prop" value="${(t.angle*180/Math.PI).toFixed(2)}" step="1">
        </div>
      </div>

      ${e}

      <div class="property-group">
        <div class="property-group-title">刚体类型</div>
        <div class="property-field">
          <select id="prop-bodyType" class="body-prop">
            <option value="static" ${t.bodyType==="static"?"selected":""}>Static (静态)</option>
            <option value="dynamic" ${t.bodyType==="dynamic"?"selected":""}>Dynamic (动态)</option>
            <option value="kinematic" ${t.bodyType==="kinematic"?"selected":""}>Kinematic (运动学)</option>
          </select>
        </div>
      </div>

      <div class="property-group">
        <div class="property-group-title">物理属性</div>
        <div class="property-field">
          <label>密度 (Density)</label>
          <input type="number" id="prop-density" class="body-prop" value="${t.density}" step="0.1" min="0">
        </div>
        <div class="property-field">
          <label>摩擦力 (Friction 0.00-0.99)</label>
          <input type="number" id="prop-friction" class="body-prop" value="${(Math.floor(t.friction*100)/100).toFixed(2)}" step="0.01" min="0" max="0.99">
          <div class="hint">仅前两位小数可编辑，第三位由下方平台行为决定</div>
        </div>
        <div class="property-field">
          <label>弹性 (Restitution)</label>
          <input type="number" id="prop-restitution" class="body-prop" value="${t.restitution}" step="0.1" min="0" max="1">
        </div>
      </div>

      <div class="property-group">
        <div class="property-group-title">平台行为 (物理预览时生效)</div>
        <div class="property-field">
          <label>行为类型</label>
          <select id="prop-platformBehavior" class="body-prop">
            <option value="0" ${this.getPlatformBehaviorType(t.friction)===0?"selected":""}>无特殊行为</option>
            <option value="1" ${this.getPlatformBehaviorType(t.friction)===1?"selected":""}>完全静态</option>
            <option value="2" ${this.getPlatformBehaviorType(t.friction)===2?"selected":""}>左右平移</option>
            <option value="3" ${this.getPlatformBehaviorType(t.friction)===3?"selected":""}>绕点旋转</option>
            <option value="4" ${this.getPlatformBehaviorType(t.friction)===4?"selected":""}>定期消失</option>
          </select>
          <div class="hint">通过设置摩擦力第三位小数实现 (0.XX${this.getPlatformBehaviorType(t.friction)})</div>
        </div>
      </div>

      <div class="property-group">
        <div class="property-group-title">阻尼</div>
        <div class="property-field">
          <label>线性阻尼</label>
          <input type="number" id="prop-linearDamping" class="body-prop" value="${t.linearDamping}" step="0.1" min="0">
        </div>
        <div class="property-field">
          <label>角阻尼</label>
          <input type="number" id="prop-angularDamping" class="body-prop" value="${t.angularDamping}" step="0.1" min="0">
        </div>
      </div>

      <div class="property-group">
        <div class="property-group-title">其他</div>
        <div class="property-field">
          <label>重力缩放</label>
          <input type="number" id="prop-gravityScale" class="body-prop" value="${t.gravityScale}" step="0.1">
        </div>
        <div class="property-field property-field-inline">
          <input type="checkbox" id="prop-fixedRotation" class="body-prop" ${t.fixedRotation?"checked":""}>
          <label>固定旋转</label>
        </div>
      </div>

      <div class="btn-group">
        <button id="btn-delete-obj" class="btn">删除对象</button>
      </div>
    `}generateJointProperties(t){const e=this.objects.find(s=>s.id===t.bodyAId),i=this.objects.find(s=>s.id===t.bodyBId);return`
      <div class="object-info">
        <div class="object-info-row">
          <span class="object-info-label">ID:</span>
          <span class="object-info-value">${t.id}</span>
        </div>
        <div class="object-info-row">
          <span class="object-info-label">类型:</span>
          <span class="object-info-value">旋转关节</span>
        </div>
        <div class="object-info-row">
          <span class="object-info-label">Body A:</span>
          <span class="object-info-value">${e?e.id.substring(0,12)+"...":"N/A"}</span>
        </div>
        <div class="object-info-row">
          <span class="object-info-label">Body B:</span>
          <span class="object-info-value">${i?i.id.substring(0,12)+"...":"N/A"}</span>
        </div>
      </div>

      <div class="property-group">
        <div class="property-group-title">锚点位置（局部坐标，单位：米）</div>
        <div class="property-field">
          <label>锚点 A - X (m)</label>
          <input type="number" id="prop-anchorALocalX" class="joint-prop" value="${t.anchorALocal.x.toFixed(2)}" step="0.1">
        </div>
        <div class="property-field">
          <label>锚点 A - Y (m)</label>
          <input type="number" id="prop-anchorALocalY" class="joint-prop" value="${t.anchorALocal.y.toFixed(2)}" step="0.1">
        </div>
        <div class="property-field">
          <label>锚点 B - X (m)</label>
          <input type="number" id="prop-anchorBLocalX" class="joint-prop" value="${t.anchorBLocal.x.toFixed(2)}" step="0.1">
        </div>
        <div class="property-field">
          <label>锚点 B - Y (m)</label>
          <input type="number" id="prop-anchorBLocalY" class="joint-prop" value="${t.anchorBLocal.y.toFixed(2)}" step="0.1">
        </div>
      </div>

      <div class="property-group">
        <div class="property-group-title">旋转关节属性</div>
        <div class="property-field property-field-inline">
          <input type="checkbox" id="prop-enableLimit" class="joint-prop" ${t.enableLimit?"checked":""}>
          <label>启用角度限制</label>
        </div>
        <div class="property-field">
          <label>下限角度 (度)</label>
          <input type="number" id="prop-lowerAngle" class="joint-prop" value="${Math.round((t.lowerAngle||0)*180/Math.PI)}" step="5">
        </div>
        <div class="property-field">
          <label>上限角度 (度)</label>
          <input type="number" id="prop-upperAngle" class="joint-prop" value="${Math.round((t.upperAngle||0)*180/Math.PI)}" step="5">
        </div>
      </div>

      <div class="property-group">
        <div class="property-group-title">马达控制</div>
        <div class="property-field property-field-inline">
          <input type="checkbox" id="prop-enableMotor" class="joint-prop" ${t.enableMotor?"checked":""}>
          <label>启用马达</label>
        </div>
        <div class="property-field">
          <label>马达速度 (rad/s)</label>
          <input type="number" id="prop-motorSpeed" class="joint-prop" value="${(t.motorSpeed||0).toFixed(2)}" step="0.1">
          <div class="hint">正值：逆时针旋转 | 负值：顺时针旋转</div>
        </div>
        <div class="property-field">
          <label>最大扭矩</label>
          <input type="number" id="prop-maxMotorTorque" class="joint-prop" value="${t.maxMotorTorque||1e3}" step="100" min="0">
          <div class="hint">扭矩越大，马达力量越强</div>
        </div>
      </div>

      <div class="property-group">
        <div class="property-group-title">碰撞设置</div>
        <div class="property-field property-field-inline">
          <input type="checkbox" id="prop-collideConnected" class="joint-prop" ${t.collideConnected?"checked":""}>
          <label>允许连接物体碰撞</label>
        </div>
        <div class="hint">勾选：连接的物体会发生碰撞（如人体关节）<br>不勾选：连接的物体穿透彼此（适合特殊效果）</div>
      </div>

      <div class="btn-group">
        <button id="btn-delete-obj" class="btn">删除对象</button>
      </div>
    `}bindBodyPropertyEvents(){const t=(n,c,a=!1)=>{const l=document.getElementById(n);!l||!this.selectedObject||this.selectedObject.type!=="body"||l.addEventListener(a?"change":"input",()=>{if(this.selectedObject&&this.selectedObject.type==="body"){const d=this.selectedObject,h=d[c],p=a?l.checked:n==="prop-bodyType"?l.value:parseFloat(l.value);if(h!==p){const u=new T(d,c,h,p,()=>{this.render(),this.updatePropertyPanel()});this.commandHistory.execute(u),this.updateUndoRedoButtons()}}})},e=document.getElementById("prop-position-x");e&&this.selectedObject&&this.selectedObject.type==="body"&&e.addEventListener("input",()=>{if(this.selectedObject&&this.selectedObject.type==="body"){const n=this.selectedObject,c=n.position.x,a=parseFloat(e.value);if(c!==a){const l=new T(n,"position.x",c,a,()=>{n.position.x=a,this.render(),this.updatePropertyPanel()});this.commandHistory.execute(l),this.updateUndoRedoButtons()}}});const i=document.getElementById("prop-position-y");i&&this.selectedObject&&this.selectedObject.type==="body"&&i.addEventListener("input",()=>{if(this.selectedObject&&this.selectedObject.type==="body"){const n=this.selectedObject,c=n.position.y,a=parseFloat(i.value);if(c!==a){const l=new T(n,"position.y",c,a,()=>{n.position.y=a,this.render(),this.updatePropertyPanel()});this.commandHistory.execute(l),this.updateUndoRedoButtons()}}});const s=document.getElementById("prop-angle");if(s&&this.selectedObject&&this.selectedObject.type==="body"&&s.addEventListener("input",()=>{if(this.selectedObject&&this.selectedObject.type==="body"){const n=this.selectedObject,c=n.angle,a=parseFloat(s.value)*Math.PI/180;if(c!==a){const l=new T(n,"angle",c,a,()=>{this.render(),this.updatePropertyPanel()});this.commandHistory.execute(l),this.updateUndoRedoButtons()}}}),t("prop-width","width"),t("prop-height","height"),t("prop-radius","radius"),this.selectedObject&&this.selectedObject.type==="body"){const n=this.selectedObject;n.shapeType==="polygon"&&n.vertices&&n.vertices.forEach((c,a)=>{const l=document.getElementById(`prop-vertex-${a}-x`);l&&l.addEventListener("input",()=>{const h=parseFloat(l.value),p=JSON.parse(JSON.stringify(n.vertices)),u=JSON.parse(JSON.stringify(n.vertices));u[a].x=h;const y=new T(n,"vertices",p,u,()=>{this.render(),this.updatePropertyPanel()});this.commandHistory.execute(y),this.updateUndoRedoButtons()});const d=document.getElementById(`prop-vertex-${a}-y`);d&&d.addEventListener("input",()=>{const h=parseFloat(d.value),p=JSON.parse(JSON.stringify(n.vertices)),u=JSON.parse(JSON.stringify(n.vertices));u[a].y=h;const y=new T(n,"vertices",p,u,()=>{this.render(),this.updatePropertyPanel()});this.commandHistory.execute(y),this.updateUndoRedoButtons()})})}t("prop-bodyType","bodyType"),t("prop-density","density");const o=document.getElementById("prop-friction");o&&this.selectedObject&&this.selectedObject.type==="body"&&o.addEventListener("input",()=>{if(this.selectedObject&&this.selectedObject.type==="body"){const n=this.selectedObject,c=n.friction;let a=parseFloat(o.value);const l=this.getPlatformBehaviorType(c);if(a=this.setPlatformBehaviorType(a,l),c!==a){const d=new T(n,"friction",c,a,()=>{this.render(),this.updatePropertyPanel()});this.commandHistory.execute(d),this.updateUndoRedoButtons()}}});const r=document.getElementById("prop-platformBehavior");r&&this.selectedObject&&this.selectedObject.type==="body"&&r.addEventListener("change",()=>{if(this.selectedObject&&this.selectedObject.type==="body"){const n=this.selectedObject,c=n.friction,a=parseInt(r.value),l=this.setPlatformBehaviorType(c,a);if(c!==l){const d=new T(n,"friction",c,l,()=>{this.render(),this.updatePropertyPanel()});this.commandHistory.execute(d),this.updateUndoRedoButtons()}}}),t("prop-restitution","restitution"),t("prop-linearDamping","linearDamping"),t("prop-angularDamping","angularDamping"),t("prop-gravityScale","gravityScale"),t("prop-fixedRotation","fixedRotation",!0),document.getElementById("btn-delete-obj")?.addEventListener("click",()=>this.deleteSelected())}bindJointPropertyEvents(){const t=(i,s,o=!1,r=!1)=>{const n=document.getElementById(i);!n||!this.selectedObject||this.selectedObject.type!=="joint"||n.addEventListener(o?"change":"input",()=>{if(this.selectedObject&&this.selectedObject.type==="joint"){const c=this.selectedObject,a=c[s];let l=o?n.checked:parseFloat(n.value);if(r&&(l=l*Math.PI/180),a!==l){const d=new T(c,s,a,l,()=>{this.render(),this.updatePropertyPanel()});this.commandHistory.execute(d),this.updateUndoRedoButtons()}}})},e=(i,s,o)=>{const r=document.getElementById(i);!r||!this.selectedObject||this.selectedObject.type!=="joint"||r.addEventListener("input",()=>{if(this.selectedObject&&this.selectedObject.type==="joint"){const n=this.selectedObject,c=s?n.anchorALocal:n.anchorBLocal,a=s?"anchorALocal":"anchorBLocal",l={x:c.x,y:c.y},d={x:c.x,y:c.y};if(o?d.x=parseFloat(r.value):d.y=parseFloat(r.value),l.x!==d.x||l.y!==d.y){const h=new T(n,a,l,d,()=>{this.render(),this.updatePropertyPanel()});this.commandHistory.execute(h),this.updateUndoRedoButtons()}}})};e("prop-anchorALocalX",!0,!0),e("prop-anchorALocalY",!0,!1),e("prop-anchorBLocalX",!1,!0),e("prop-anchorBLocalY",!1,!1),t("prop-enableLimit","enableLimit",!0),t("prop-lowerAngle","lowerAngle",!1,!0),t("prop-upperAngle","upperAngle",!1,!0),t("prop-enableMotor","enableMotor",!0),t("prop-motorSpeed","motorSpeed",!1),t("prop-maxMotorTorque","maxMotorTorque",!1),t("prop-collideConnected","collideConnected",!0),document.getElementById("btn-delete-obj")?.addEventListener("click",()=>this.deleteSelected())}updateUndoRedoButtons(){const t=document.getElementById("btn-undo"),e=document.getElementById("btn-redo");t&&(t.disabled=!this.commandHistory.canUndo()),e&&(e.disabled=!this.commandHistory.canRedo())}undo(){this.commandHistory.undo(),this.updateUndoRedoButtons(),this.updateStatus("撤销操作","","已撤销")}redo(){this.commandHistory.redo(),this.updateUndoRedoButtons(),this.updateStatus("重做操作","","已重做")}updateStatus(...t){const e=document.getElementById("status-tool"),i=document.getElementById("status-objects"),s=document.getElementById("status-coords"),o=document.getElementById("status-message");t[0]&&e&&(e.textContent=t[0]),i&&(i.textContent=`对象: ${this.objects.length}`),t[1]&&s&&(s.textContent=t[1]),t[2]&&o&&(o.textContent=t[2])}newMap(){confirm("确定要新建地图吗？当前未保存的内容将丢失。")&&(this.objects=[],this.selectedObject=null,this.updatePropertyPanel(),this.render())}saveMap(){if(this.objects.length===0){alert("没有可保存的对象");return}const t=JSON.stringify(this.objects,null,2);ht(t,"map.json"),alert("地图保存成功！")}loadMap(){document.getElementById("file-input")?.click()}async loadFromFile(t){try{const e=await t.text(),i=JSON.parse(e);if(i.world_settings&&i.bodies&&i.joints){alert(`检测到 Box2D 导出格式，但目前不支持从导出文件导入。
请使用"保存地图"生成的 map.json 文件。`);return}if(!Array.isArray(i))throw new Error("文件格式错误：数据必须是数组格式");for(const s of i)if(!s.id||!s.type)throw new Error("文件格式错误：对象缺少必要字段（id 或 type）");this.objects=i.map(s=>s.type==="body"?{...s,linearDamping:s.linearDamping??At,angularDamping:s.angularDamping??It,gravityScale:s.gravityScale??jt,density:s.density??Mt,friction:s.friction??Ot,restitution:s.restitution??Tt,fixedRotation:s.fixedRotation??!1}:s),this.selectedObject=null,this.commandHistory=new et,this.updateUndoRedoButtons(),this.updatePropertyPanel(),this.render(),alert("文件加载成功！")}catch(e){console.error("加载文件错误:",e),alert("加载文件失败: "+(e instanceof Error?e.message:String(e)))}}exportBox2D(){const t={world_settings:{gravity:[0,-9.8],allow_sleeping:!0,auto_clear_forces:!0},bodies:this.objects.filter(i=>i.type==="body").map(i=>this.bodyToBox2D(i)),joints:this.objects.filter(i=>i.type==="joint").map(i=>this.jointToBox2D(i))},e=JSON.stringify(t,null,2);ht(e,"box2d_export.json")}bodyToBox2D(t){const e=[];return t.shapeType==="box"&&t.width&&t.height?e.push({shape:{type:"box",params:{width:t.width,height:t.height}},fixture_def:{density:t.density,friction:t.friction,restitution:t.restitution,is_sensor:!1,filter_category_bits:1,filter_mask_bits:65535,filter_group_index:0}}):t.shapeType==="circle"&&t.radius?e.push({shape:{type:"circle",params:{radius:t.radius}},fixture_def:{density:t.density,friction:t.friction,restitution:t.restitution,is_sensor:!1,filter_category_bits:1,filter_mask_bits:65535,filter_group_index:0}}):t.shapeType==="polygon"&&t.vertices&&e.push({shape:{type:"polygon",params:{vertices:t.vertices.map(i=>[i.x,i.y])}},fixture_def:{density:t.density,friction:t.friction,restitution:t.restitution,is_sensor:!1,filter_category_bits:1,filter_mask_bits:65535,filter_group_index:0}}),{id:t.id,body_def:{type:t.bodyType,position:[t.position.x,t.position.y],angle:t.angle,linear_velocity:[0,0],angular_velocity:0,linear_damping:t.linearDamping,angular_damping:t.angularDamping,allow_sleep:!0,awake:!0,fixed_rotation:t.fixedRotation,bullet:!1,gravity_scale:t.gravityScale},fixtures:e,visual_properties:{},user_data:{}}}jointToBox2D(t){const e=this.objects.find(o=>o.id===t.bodyAId),i=this.objects.find(o=>o.id===t.bodyBId);return!e||!i?null:{...{id:t.id,joint_type:"revolute",body_a:t.bodyAId,body_b:t.bodyBId,visual_properties:{},user_data:{}},joint_def:{local_anchor_a:[t.anchorALocal.x,t.anchorALocal.y],local_anchor_b:[t.anchorBLocal.x,t.anchorBLocal.y],reference_angle:i.angle-e.angle,enable_limit:t.enableLimit||!1,lower_angle:t.lowerAngle||-Math.PI/2,upper_angle:t.upperAngle||Math.PI/2,enable_motor:!1,motor_speed:0,max_motor_torque:0,collide_connected:!1}}}disableToolbar(t){document.querySelectorAll(".tool-btn").forEach(i=>{i.disabled=t,t?i.classList.add("disabled"):i.classList.remove("disabled")}),["btn-new","btn-save","btn-load","btn-export","btn-undo","btn-redo"].forEach(i=>{const s=document.getElementById(i);s&&(s.disabled=t)})}togglePreview(){this.isPreviewMode?this.exitPreview():this.startPreview()}startPreview(){if(typeof window.b2World>"u"){alert(`Box2D 物理引擎未加载！

请确认：
1. public/box2d-js/lib/box2d.js 文件存在
2. 刷新页面重新加载
3. 查看控制台是否有加载错误`),console.error("Box2D 加载检查失败 - b2World 未定义"),console.log("可用的全局对象:",Object.keys(window).filter(t=>t.includes("b2")));return}if(this.objects.length===0){alert("场景中没有物体！请先创建一些物体。");return}console.log("开始物理预览..."),console.log("Box2D 版本: Flash 移植版"),this.isPreviewMode=!0,this.previewPaused=!1,this.previewOriginalState=[];for(const t of this.objects)if(t.type==="body"){const e=t;this.previewOriginalState.push({id:e.id,position:{x:e.position.x,y:e.position.y},angle:e.angle})}this.canvas.style.cursor="default",document.getElementById("preview-controls").style.display="flex",document.getElementById("property-panel").style.display="none",this.disableToolbar(!0),document.getElementById("btn-preview-play").style.display="none",document.getElementById("btn-preview-pause").style.display="inline-block",this.previewPPM=P,this.previewOriginOffsetX=j,this.previewOriginOffsetY=A,console.log(`保存坐标系快照: PPM=${this.previewPPM}, OriginX=${this.previewOriginOffsetX.toFixed(2)}, OriginY=${this.previewOriginOffsetY.toFixed(2)}`),this.initBox2DWorld(),this.startPreviewAnimation(),this.updateStatus("物理预览模式",`物体数: ${this.objects.length}`,"按 ESC 或点击退出")}initBox2DWorld(){console.log("=== 初始化 Box2D 世界 ==="),console.log(`场景对象总数: ${this.objects.length}`),this.box2dBodies.clear(),this.box2dJoints.clear(),console.log("已清空旧的 Box2D 映射");const t=window.b2AABB,e=window.b2World,i=window.b2Vec2,s=new t;s.minVertex.Set(-1e3,-1e3),s.maxVertex.Set(1e3,1e3);const o=-9.8*this.previewPPM,r=new i(0,o),n=!0;console.log(`重力设置: ${o.toFixed(1)} Box2D单位/s² (= -9.8 m/s² 向下, Y轴向上, PPM=${this.previewPPM})`),this.box2dWorld=new e(s,r,n),console.log("Box2D 世界已创建");const c=this.objects.filter(u=>u.type==="body"),a=this.objects.filter(u=>u.type==="joint");console.log(`准备创建: ${c.length} 个物体, ${a.length} 个关节`);let l=0,d=0;for(const u of this.objects)if(u.type==="body"){const y=u,x=this.createBox2DBody(y);x?(this.box2dBodies.set(y.id,x),l++):d++}console.log(`物体创建完成: ${l} 成功, ${d} 失败`),console.log(`当前 box2dBodies Map 大小: ${this.box2dBodies.size}`),console.log("box2dBodies 的 keys:",Array.from(this.box2dBodies.keys()));let h=0,p=0;for(const u of this.objects)if(u.type==="joint"){const y=u,x=this.createBox2DJoint(y);x?(this.box2dJoints.set(y.id,x),h++):p++}console.log(`关节创建完成: ${h} 成功, ${p} 失败`),console.log("=== Box2D 世界初始化完成 ==="),console.log(`最终结果: ${this.box2dBodies.size} 个物体, ${this.box2dJoints.size} 个关节`)}createBox2DBody(t){console.log(`创建 Box2D Body: id=${t.id}, type=${t.bodyType}, shape=${t.shapeType}`);const e=window.b2BodyDef,i=window.b2BoxDef,s=window.b2CircleDef,o=window.b2PolyDef,r=new e;let n=null;if(t.shapeType==="box"&&t.width&&t.height){n=new i;const d=t.width*this.previewPPM/2,h=t.height*this.previewPPM/2;n.extents.Set(d,h),console.log(`  - 矩形: 半宽=${d.toFixed(2)}px, 半高=${h.toFixed(2)}px [使用保存的 PPM=${this.previewPPM}]`)}else if(t.shapeType==="circle"&&t.radius)n=new s,n.radius=t.radius*this.previewPPM,console.log(`  - 圆形: 半径=${n.radius.toFixed(2)}px [使用保存的 PPM=${this.previewPPM}]`);else if(t.shapeType==="polygon"&&t.vertices&&t.vertices.length>=3){if(t.vertices.length>8)return console.error(`❌ 多边形顶点数超出限制: ${t.vertices.length} > 8`),console.error("   Box2D 旧版最多支持 8 个顶点的多边形"),null;n=new o,n.vertexCount=t.vertices.length,console.log(`  - 准备创建多边形: ${t.vertices.length} 个顶点`);for(let h=0;h<t.vertices.length;h++){const p=t.vertices[h],u=p.x*this.previewPPM,y=p.y*this.previewPPM;n.vertices[h].Set(u,y),console.log(`    顶点[${h}]: 局部(${p.x.toFixed(2)}, ${p.y.toFixed(2)}) -> Box2D(${u.toFixed(2)}, ${y.toFixed(2)})`)}console.log(`  - 多边形顶点已设置 [使用保存的 PPM=${this.previewPPM}, Y向上]`)}if(!n)return console.error(`❌ 无法创建形状: ${t.shapeType}, width=${t.width}, height=${t.height}, radius=${t.radius}`),null;n.density=t.bodyType==="static"?0:t.density,n.friction=t.friction,n.restitution=t.restitution,console.log(`  - 物理属性: density=${n.density}, friction=${n.friction}, restitution=${n.restitution}`),r.AddShape(n);const c=(t.position.x-this.previewOriginOffsetX)*this.previewPPM+this.canvas.width/2,a=(t.position.y-this.previewOriginOffsetY)*this.previewPPM+this.canvas.height/2;r.position.Set(c,a),console.log(`  - 位置: 世界(${t.position.x.toFixed(2)}, ${t.position.y.toFixed(2)}) -> Box2D(${c.toFixed(0)}, ${a.toFixed(0)}) [Y向上]`),r.rotation=t.angle,console.log(`  - 角度: ${(t.angle*180/Math.PI).toFixed(1)}° -> Box2D ${(r.rotation*180/Math.PI).toFixed(1)}°`);const l=this.box2dWorld.CreateBody(r);if(l){console.log(`✅ Body ${t.id} 创建成功`);const d=l.GetShapeList();d?console.log(`  - 物体有形状定义: type=${d.m_type}`):console.warn("  - ⚠️ 警告：物体没有形状定义！"),console.log(`  - 物体类型: ${t.bodyType} (static的质量应该为无穷大)`)}else console.error(`❌ Body ${t.id} 创建失败！CreateBody 返回 null`),console.error(`  - 详细信息: type=${t.bodyType}, shape=${t.shapeType}`),console.error("  - bodyDef:",r),console.error("  - shapeDef:",n);return l}createBox2DJoint(t){console.log(`创建 Box2D Joint: id=${t.id}, type=${t.jointType}, bodyA=${t.bodyAId}, bodyB=${t.bodyBId}`);const e=window.b2RevoluteJointDef,i=this.box2dBodies.get(t.bodyAId),s=this.box2dBodies.get(t.bodyBId);if(!i)return console.error(`❌ 关节 ${t.id} 的 bodyA (${t.bodyAId}) 未找到！`),console.log("  - 可用的 bodies:",Array.from(this.box2dBodies.keys())),null;if(!s)return console.error(`❌ 关节 ${t.id} 的 bodyB (${t.bodyBId}) 未找到！`),console.log("  - 可用的 bodies:",Array.from(this.box2dBodies.keys())),null;if(console.log("  - bodyA 和 bodyB 都已找到"),t.jointType==="revolute"){const o=this.objects.find(d=>d.id===t.bodyAId),r=this.objects.find(d=>d.id===t.bodyBId);if(!o||!r)return console.error(`❌ 关节 ${t.id} 对应的 Body 对象未找到！bodyAObj=${!!o}, bodyBObj=${!!r}`),null;console.log(`  - Body 对象: bodyA pos=(${o.position.x.toFixed(2)}, ${o.position.y.toFixed(2)}), bodyB pos=(${r.position.x.toFixed(2)}, ${r.position.y.toFixed(2)})`);const n=new e;n.body1=i,n.body2=s;const c=_(t.anchorALocal.x,t.anchorALocal.y,o.position.x,o.position.y,o.angle),a=(c.x-this.previewOriginOffsetX)*this.previewPPM+this.canvas.width/2,l=(c.y-this.previewOriginOffsetY)*this.previewPPM+this.canvas.height/2;n.anchorPoint.Set(a,l),console.log(`  - 锚点: 局部(${t.anchorALocal.x.toFixed(2)}, ${t.anchorALocal.y.toFixed(2)}) -> 世界(${c.x.toFixed(2)}, ${c.y.toFixed(2)}) -> Box2D(${a.toFixed(0)}, ${l.toFixed(0)}) [Y向上]`),t.enableLimit&&(n.enableLimit=!0,n.lowerAngle=t.lowerAngle||-Math.PI/2,n.upperAngle=t.upperAngle||Math.PI/2,console.log(`  - 角度限制: ${(n.lowerAngle*180/Math.PI).toFixed(0)}° 到 ${(n.upperAngle*180/Math.PI).toFixed(0)}°`)),t.enableMotor&&(n.enableMotor=!0,n.motorSpeed=t.motorSpeed||0,n.motorTorque=t.maxMotorTorque||1e3,console.log(`  - 马达: 速度=${n.motorSpeed.toFixed(2)} rad/s, 扭矩=${n.motorTorque}`)),n.collideConnected=t.collideConnected||!1,console.log(`  - 碰撞连接: ${n.collideConnected}`);try{const d=this.box2dWorld.CreateJoint(n);return d?(console.log(`✅ Joint ${t.id} 创建成功`),d):(console.error(`❌ Joint ${t.id} 创建失败！CreateJoint 返回 null`),null)}catch(d){return console.error(`❌ Joint ${t.id} 创建异常:`,d),null}}return console.warn(`⚠️ 不支持的关节类型: ${t.jointType}`),null}startPreviewAnimation(){const t=()=>{this.isPreviewMode&&(this.previewPaused||(this.box2dWorld.Step(.016666666666666666,10),this.syncBox2DToObjects()),this.render(),this.previewAnimationId=requestAnimationFrame(t))};t()}syncBox2DToObjects(){for(const[t,e]of this.box2dBodies.entries()){const i=this.objects.find(s=>s.id===t);if(i){const s=e.m_position,o=e.m_rotation,r=s.x,n=s.y,c=(r-this.canvas.width/2)/this.previewPPM+this.previewOriginOffsetX,a=(n-this.canvas.height/2)/this.previewPPM+this.previewOriginOffsetY;i.position.x=c,i.position.y=a,i.angle=o}}}pausePreview(){this.previewPaused=!0,document.getElementById("btn-preview-play").style.display="inline-block",document.getElementById("btn-preview-pause").style.display="none"}resumePreview(){this.previewPaused=!1,document.getElementById("btn-preview-play").style.display="none",document.getElementById("btn-preview-pause").style.display="inline-block"}rebuildBox2DWorldWithNewScale(){console.log("=== 缩放变化，重建 Box2D 世界 ==="),console.log(`新的 PPM: ${P}, 新的 ORIGIN_OFFSET: (${j.toFixed(2)}, ${A.toFixed(2)})`);const t=this.previewPaused;this.previewPaused=!0;const e=[];for(const[i,s]of this.box2dBodies.entries()){const o=this.objects.find(r=>r.id===i);if(o){const r={id:o.id,position:{x:o.position.x,y:o.position.y},angle:o.angle};o.bodyType==="dynamic"&&s.m_linearVelocity&&(r.linearVelocity={x:s.m_linearVelocity.x,y:s.m_linearVelocity.y},r.angularVelocity=s.m_angularVelocity||0),e.push(r)}}console.log(`已保存 ${e.length} 个物体的当前状态`),this.box2dWorld&&(this.box2dWorld=null),this.previewPPM=P,this.previewOriginOffsetX=j,this.previewOriginOffsetY=A,console.log(`更新坐标系快照: PPM=${this.previewPPM}, OriginX=${this.previewOriginOffsetX.toFixed(2)}, OriginY=${this.previewOriginOffsetY.toFixed(2)}`),this.initBox2DWorld();for(const i of e){const s=this.box2dBodies.get(i.id);s&&i.linearVelocity&&(s.m_linearVelocity.Set(i.linearVelocity.x,i.linearVelocity.y),s.m_angularVelocity=i.angularVelocity||0,console.log(`恢复物体 ${i.id} 的速度: (${i.linearVelocity.x.toFixed(2)}, ${i.linearVelocity.y.toFixed(2)}), 角速度: ${i.angularVelocity}`))}this.previewPaused=t,this.render(),console.log("=== Box2D 世界重建完成 ===")}resetPreview(){console.log("=== 重置物理预览 ==="),this.previewAnimationId&&(cancelAnimationFrame(this.previewAnimationId),this.previewAnimationId=null,console.log("动画循环已停止")),this.box2dWorld&&(console.log("销毁旧的 Box2D 世界"),this.box2dWorld=null),console.log("恢复物体到原始状态...");let t=0;for(const e of this.previewOriginalState){const i=this.objects.find(s=>s.id===e.id);i&&(i.position.x=e.position.x,i.position.y=e.position.y,i.angle=e.angle,t++)}console.log(`已恢复 ${t} 个物体的状态`),this.initBox2DWorld(),this.previewPaused=!1,document.getElementById("btn-preview-play").style.display="none",document.getElementById("btn-preview-pause").style.display="inline-block",this.startPreviewAnimation(),console.log("=== 重置完成 ==="),this.updateStatus("物理预览已重置")}exitPreview(){console.log("退出物理预览"),this.isPreviewMode=!1,this.previewAnimationId&&(cancelAnimationFrame(this.previewAnimationId),this.previewAnimationId=null),this.box2dWorld&&(this.box2dWorld=null),this.box2dBodies.clear(),this.box2dJoints.clear();for(const t of this.previewOriginalState){const e=this.objects.find(i=>i.id===t.id);e&&(e.position.x=t.position.x,e.position.y=t.position.y,e.angle=t.angle)}this.previewOriginalState=[],document.getElementById("preview-controls").style.display="none",document.getElementById("property-panel").style.display="flex",this.canvas.style.cursor="crosshair",this.disableToolbar(!1),document.getElementById("btn-preview-play").style.display="none",document.getElementById("btn-preview-pause").style.display="none",this.render(),this.updateStatus("已退出预览模式")}}window.addEventListener("DOMContentLoaded",()=>{new Qt("design-canvas")});
//# sourceMappingURL=main-gZTWKwJW.js.map
