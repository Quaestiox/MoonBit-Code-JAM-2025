{"version":3,"file":"main-gZTWKwJW.js","sources":["../../src/core/commands.ts","../../src/core/constants.ts","../../src/main.ts"],"sourcesContent":["/**\r\n * 撤销/重做系统 - 命令模式实现\r\n */\r\n\r\n// 使用any类型避免循环依赖，在main.ts中会有正确的类型\r\ntype MapObject = any;\r\ntype Body = any;\r\n\r\n// 命令接口\r\nexport interface Command {\r\n  execute(): void;\r\n  undo(): void;\r\n  redo(): void;\r\n}\r\n\r\n// 添加对象命令\r\nexport class AddObjectCommand implements Command {\r\n  constructor(\r\n    private objects: MapObject[],\r\n    private object: MapObject,\r\n    private onUpdate: () => void\r\n  ) {}\r\n\r\n  execute(): void {\r\n    this.objects.push(this.object);\r\n    this.onUpdate();\r\n  }\r\n\r\n  undo(): void {\r\n    const index = this.objects.indexOf(this.object);\r\n    if (index > -1) {\r\n      this.objects.splice(index, 1);\r\n    }\r\n    this.onUpdate();\r\n  }\r\n\r\n  redo(): void {\r\n    this.execute();\r\n  }\r\n}\r\n\r\n// 删除对象命令\r\nexport class DeleteObjectCommand implements Command {\r\n  private index: number = -1;\r\n\r\n  constructor(\r\n    private objects: MapObject[],\r\n    private object: MapObject,\r\n    private onUpdate: () => void\r\n  ) {\r\n    this.index = objects.indexOf(object);\r\n  }\r\n\r\n  execute(): void {\r\n    if (this.index > -1) {\r\n      this.objects.splice(this.index, 1);\r\n    }\r\n    this.onUpdate();\r\n  }\r\n\r\n  undo(): void {\r\n    if (this.index > -1) {\r\n      this.objects.splice(this.index, 0, this.object);\r\n    }\r\n    this.onUpdate();\r\n  }\r\n\r\n  redo(): void {\r\n    this.execute();\r\n  }\r\n}\r\n\r\n// 移动对象命令\r\nexport class MoveObjectCommand implements Command {\r\n  private oldX: number;\r\n  private oldY: number;\r\n  private newX: number;\r\n  private newY: number;\r\n\r\n  constructor(\r\n    private body: Body,\r\n    oldX: number,\r\n    oldY: number,\r\n    newX: number,\r\n    newY: number,\r\n    private onUpdate: () => void\r\n  ) {\r\n    this.oldX = oldX;\r\n    this.oldY = oldY;\r\n    this.newX = newX;\r\n    this.newY = newY;\r\n  }\r\n\r\n  execute(): void {\r\n    this.body.position.x = this.newX;\r\n    this.body.position.y = this.newY;\r\n    this.onUpdate();\r\n  }\r\n\r\n  undo(): void {\r\n    this.body.position.x = this.oldX;\r\n    this.body.position.y = this.oldY;\r\n    this.onUpdate();\r\n  }\r\n\r\n  redo(): void {\r\n    this.execute();\r\n  }\r\n}\r\n\r\n// 修改属性命令\r\nexport class ModifyPropertyCommand implements Command {\r\n  private oldValue: any;\r\n  private newValue: any;\r\n\r\n  constructor(\r\n    private object: any,\r\n    private property: string,\r\n    oldValue: any,\r\n    newValue: any,\r\n    private onUpdate: () => void\r\n  ) {\r\n    this.oldValue = oldValue;\r\n    this.newValue = newValue;\r\n  }\r\n\r\n  execute(): void {\r\n    this.object[this.property] = this.newValue;\r\n    this.onUpdate();\r\n  }\r\n\r\n  undo(): void {\r\n    this.object[this.property] = this.oldValue;\r\n    this.onUpdate();\r\n  }\r\n\r\n  redo(): void {\r\n    this.execute();\r\n  }\r\n}\r\n\r\n// 批量命令（用于组合多个操作）\r\nexport class BatchCommand implements Command {\r\n  constructor(\r\n    private commands: Command[]\r\n  ) {}\r\n\r\n  execute(): void {\r\n    this.commands.forEach(cmd => cmd.execute());\r\n  }\r\n\r\n  undo(): void {\r\n    // 反向执行撤销\r\n    for (let i = this.commands.length - 1; i >= 0; i--) {\r\n      this.commands[i].undo();\r\n    }\r\n  }\r\n\r\n  redo(): void {\r\n    this.execute();\r\n  }\r\n}\r\n\r\n// 历史管理器\r\nexport class CommandHistory {\r\n  private history: Command[] = [];\r\n  private currentIndex: number = -1;\r\n  private maxHistorySize: number = 50;\r\n\r\n  canUndo(): boolean {\r\n    return this.currentIndex >= 0;\r\n  }\r\n\r\n  canRedo(): boolean {\r\n    return this.currentIndex < this.history.length - 1;\r\n  }\r\n\r\n  execute(command: Command): void {\r\n    command.execute();\r\n    \r\n    // 清除当前位置之后的历史\r\n    this.history.splice(this.currentIndex + 1);\r\n    \r\n    // 添加新命令\r\n    this.history.push(command);\r\n    this.currentIndex++;\r\n    \r\n    // 限制历史大小\r\n    if (this.history.length > this.maxHistorySize) {\r\n      this.history.shift();\r\n      this.currentIndex--;\r\n    }\r\n  }\r\n\r\n  undo(): void {\r\n    if (this.canUndo()) {\r\n      this.history[this.currentIndex].undo();\r\n      this.currentIndex--;\r\n    }\r\n  }\r\n\r\n  redo(): void {\r\n    if (this.canRedo()) {\r\n      this.currentIndex++;\r\n      this.history[this.currentIndex].redo();\r\n    }\r\n  }\r\n\r\n  clear(): void {\r\n    this.history = [];\r\n    this.currentIndex = -1;\r\n  }\r\n\r\n  getHistorySize(): number {\r\n    return this.history.length;\r\n  }\r\n\r\n  getCurrentIndex(): number {\r\n    return this.currentIndex;\r\n  }\r\n}\r\n","/**\r\n * 常量定义\r\n */\r\n\r\n// ==================== 画布和视图设置 ====================\r\n// 单位转换：20像素 = 1米\r\nexport const PIXEL_TO_METER = 20;\r\nexport const METER_TO_PIXEL = 1 / PIXEL_TO_METER;\r\n\r\n// 画布默认尺寸\r\nexport const DEFAULT_CANVAS_WIDTH = 1000;\r\nexport const DEFAULT_CANVAS_HEIGHT = 600;\r\n\r\n// 视图控制范围\r\nexport const MIN_CANVAS_WIDTH = 400;\r\nexport const MAX_CANVAS_WIDTH = 2000;\r\nexport const MIN_CANVAS_HEIGHT = 300;\r\nexport const MAX_CANVAS_HEIGHT = 1500;\r\nexport const MIN_PPM = 5;\r\nexport const MAX_PPM = 100;\r\n\r\n// 默认世界设置\r\nexport const DEFAULT_WORLD_GRAVITY: [number, number] = [0, -10];\r\nexport const DEFAULT_WORLD_ALLOW_SLEEPING = true;\r\nexport const DEFAULT_WORLD_AUTO_CLEAR_FORCES = true;\r\n\r\n// 默认刚体属性\r\nexport const DEFAULT_BODY_DENSITY = 1.0;\r\nexport const DEFAULT_BODY_FRICTION = 0.3;\r\nexport const DEFAULT_BODY_RESTITUTION = 0.5;\r\nexport const DEFAULT_BODY_LINEAR_DAMPING = 0.0;\r\nexport const DEFAULT_BODY_ANGULAR_DAMPING = 0.0;\r\nexport const DEFAULT_BODY_GRAVITY_SCALE = 1.0;\r\n\r\n// 默认关节属性\r\nexport const DEFAULT_DISTANCE_JOINT_FREQUENCY = 4.0;\r\nexport const DEFAULT_DISTANCE_JOINT_DAMPING = 0.5;\r\nexport const DEFAULT_REVOLUTE_JOINT_MOTOR_SPEED = 0.0;\r\nexport const DEFAULT_REVOLUTE_JOINT_MAX_TORQUE = 0.0;\r\n\r\n// 渲染配置\r\nexport const GRID_SIZE = 20;\r\nexport const GRID_COLOR = '#e0e0e0';\r\nexport const SELECTION_COLOR = '#00ff00';\r\nexport const SELECTION_LINE_WIDTH = 2;\r\nexport const JOINT_ANCHOR_RADIUS = 6;\r\nexport const JOINT_LINE_WIDTH = 2;\r\n\r\n// ==================== 形状尺寸限制 ====================\r\n// 最小尺寸限制（米）\r\nexport const MIN_SHAPE_WIDTH = 0.5;\r\nexport const MIN_SHAPE_HEIGHT = 0.5;\r\nexport const MIN_SHAPE_RADIUS = 0.25;\r\nexport const MIN_SCALE_SIZE = 0.1; // 变换控制缩放时的最小尺寸\r\n\r\n// 像素单位的最小尺寸（向后兼容）\r\nexport const MIN_BODY_SIZE = 10;\r\nexport const MIN_CIRCLE_RADIUS = 5;\r\nexport const MIN_POLYGON_VERTICES = 3;\r\nexport const MAX_POLYGON_VERTICES = 8; // Box2D 多边形最大顶点数\r\n\r\n// ==================== 交互控制尺寸 ====================\r\n// 顶点和手柄\r\nexport const VERTEX_RADIUS_NORMAL = 5;          // 普通顶点半径（像素）\r\nexport const VERTEX_RADIUS_HOVER = 8;           // 悬停顶点半径（像素）\r\nexport const VERTEX_SNAP_DISTANCE = 10;         // 顶点捕捉距离（像素）\r\n\r\n// 变换控制手柄\r\nexport const TRANSFORM_HANDLE_SIZE = 8;                 // 缩放手柄大小（像素）\r\nexport const TRANSFORM_HANDLE_HALF_SIZE = TRANSFORM_HANDLE_SIZE / 2; // 缩放手柄半尺寸\r\nexport const TRANSFORM_ROTATE_HANDLE_RADIUS = 6;        // 旋转手柄半径（像素）\r\nexport const TRANSFORM_ROTATE_HANDLE_OFFSET = 30;       // 旋转手柄距包围框偏移（像素）\r\nexport const TRANSFORM_BBOX_LINE_DASH = [5, 5];         // 包围框虚线样式\r\nexport const TRANSFORM_HANDLE_COLOR = '#ffffff';        // 缩放手柄颜色（白色）\r\nexport const TRANSFORM_HANDLE_STROKE_COLOR = '#3498db'; // 缩放手柄边框颜色（蓝色）\r\nexport const TRANSFORM_ROTATE_HANDLE_COLOR = '#e74c3c'; // 旋转手柄颜色（红色）\r\n\r\n// 关节锚点\r\nexport const ANCHOR_RADIUS_NORMAL = 5;          // 普通锚点半径（像素）\r\nexport const ANCHOR_RADIUS_SELECTED = 7;        // 选中锚点半径（像素）\r\nexport const VERTEX_CONTROL_RADIUS = 6;         // 顶点编辑控制点半径（像素）\r\n\r\n// 删除工具\r\nexport const DELETE_HOVER_RADIUS = 4;           // 删除悬停圆圈半径（像素）\r\n\r\n// ==================== 渲染颜色 ====================\r\n// 基础颜色\r\nexport const COLOR_GRID = '#e0e0e0';\r\nexport const COLOR_GRID_TEXT = '#666';\r\nexport const COLOR_ORIGIN = '#ff0000';\r\n\r\n// 选中和高亮\r\nexport const COLOR_SELECTED = '#3498db';        // 蓝色\r\nexport const COLOR_HIGHLIGHT = '#27ae60';       // 绿色\r\nexport const COLOR_VERTEX_EDITING = '#27ae60';\r\n\r\n// 绘制状态\r\nexport const COLOR_DRAWING = '#999';\r\nexport const COLOR_DELETE_HOVER = '#e74c3c';    // 红色\r\n\r\n// 文字\r\nexport const COLOR_TEXT = '#333';\r\nexport const COLOR_TEXT_DARK = '#2c3e50';\r\n\r\n// 关节\r\nexport const COLOR_JOINT = '#f39c12';           // 橙色\r\n\r\n// ==================== 渲染线宽 ====================\r\nexport const LINE_WIDTH_GRID = 1;\r\nexport const LINE_WIDTH_ORIGIN = 2;\r\nexport const LINE_WIDTH_SELECTED = 2;\r\nexport const LINE_WIDTH_VERTEX_HIGHLIGHT = 2;\r\nexport const LINE_WIDTH_VERTEX_EDITING = 3;\r\nexport const LINE_WIDTH_DRAWING = 1;\r\nexport const LINE_WIDTH_JOINT = 3;\r\n\r\n// 刚体类型颜色\r\nexport const BODY_TYPE_COLORS = {\r\n  static: '#95a5a6',\r\n  dynamic: '#3498db',\r\n  kinematic: '#9b59b6',\r\n} as const;\r\n\r\n// 刚体类型描边颜色\r\nexport const BODY_TYPE_STROKE_COLORS = {\r\n  static: '#7f8c8d',\r\n  dynamic: '#2c3e50',\r\n  kinematic: '#8e44ad',\r\n} as const;\r\n\r\n// 关节类型颜色\r\nexport const JOINT_TYPE_COLORS = {\r\n  distance: '#e67e22',\r\n  revolute: '#e74c3c',\r\n} as const;\r\n\r\n// 工具类型\r\nexport enum Tool {\r\n  SELECT = 'select',\r\n  RECT = 'rect',\r\n  CIRCLE = 'circle',\r\n  POLYGON = 'polygon',\r\n  DISTANCE_JOINT = 'distanceJoint',\r\n  REVOLUTE_JOINT = 'revoluteJoint',\r\n  DELETE = 'delete',\r\n}\r\n\r\n// 刚体类型\r\nexport enum BodyType {\r\n  STATIC = 'static',\r\n  DYNAMIC = 'dynamic',\r\n  KINEMATIC = 'kinematic',\r\n}\r\n\r\n// 形状类型\r\nexport enum ShapeType {\r\n  BOX = 'box',\r\n  CIRCLE = 'circle',\r\n  POLYGON = 'polygon',\r\n}\r\n\r\n// 关节类型\r\nexport enum JointType {\r\n  DISTANCE = 'distance',\r\n  REVOLUTE = 'revolute',\r\n}\r\n\r\n// 交互状态\r\nexport enum InteractionState {\r\n  IDLE = 'idle',\r\n  DRAWING = 'drawing',\r\n  DRAGGING = 'dragging',\r\n  SELECTING_JOINT_BODY_A = 'selectingJointBodyA',\r\n  SELECTING_JOINT_BODY_B = 'selectingJointBodyB',\r\n}\r\n\r\n// 碰撞过滤默认值\r\nexport const DEFAULT_FILTER_CATEGORY_BITS = 1;\r\nexport const DEFAULT_FILTER_MASK_BITS = 65535;\r\nexport const DEFAULT_FILTER_GROUP_INDEX = 0;\r\n\r\n// ID前缀\r\nexport const BODY_ID_PREFIX = 'body_';\r\nexport const JOINT_ID_PREFIX = 'joint_';\r\n\r\n// 文件名\r\nexport const DEFAULT_MAP_FILENAME = 'map.json';\r\nexport const DEFAULT_BOX2D_FILENAME = 'box2d_export.json';\r\n","/**\r\n * Box2D 地图设计器 - 完整实现\r\n * 这是一个简化但功能完整的单文件实现\r\n */\r\n\r\nimport './app.css';\r\nimport { \r\n  CommandHistory, \r\n  AddObjectCommand, \r\n  DeleteObjectCommand, \r\n  MoveObjectCommand,\r\n  ModifyPropertyCommand \r\n} from '@core/commands';\r\nimport {\r\n  // 画布和视图\r\n  DEFAULT_CANVAS_WIDTH,\r\n  DEFAULT_CANVAS_HEIGHT,\r\n  \r\n  // 形状尺寸\r\n  MIN_SHAPE_WIDTH,\r\n  MIN_SHAPE_HEIGHT,\r\n  MIN_SHAPE_RADIUS,\r\n  MAX_POLYGON_VERTICES,\r\n  \r\n  // 默认刚体属性\r\n  DEFAULT_BODY_DENSITY,\r\n  DEFAULT_BODY_FRICTION,\r\n  DEFAULT_BODY_RESTITUTION,\r\n  DEFAULT_BODY_LINEAR_DAMPING,\r\n  DEFAULT_BODY_ANGULAR_DAMPING,\r\n  DEFAULT_BODY_GRAVITY_SCALE,\r\n  \r\n  // 交互尺寸\r\n  VERTEX_RADIUS_NORMAL,\r\n  VERTEX_RADIUS_HOVER,\r\n  ANCHOR_RADIUS_NORMAL,\r\n  ANCHOR_RADIUS_SELECTED,\r\n  VERTEX_CONTROL_RADIUS,\r\n  DELETE_HOVER_RADIUS,\r\n  JOINT_ANCHOR_RADIUS,\r\n  TRANSFORM_HANDLE_SIZE,\r\n  TRANSFORM_HANDLE_HALF_SIZE,\r\n  TRANSFORM_ROTATE_HANDLE_RADIUS,\r\n  TRANSFORM_ROTATE_HANDLE_OFFSET,\r\n  TRANSFORM_HANDLE_COLOR,\r\n  TRANSFORM_HANDLE_STROKE_COLOR,\r\n  TRANSFORM_ROTATE_HANDLE_COLOR,\r\n  \r\n  // 渲染颜色\r\n  COLOR_GRID,\r\n  COLOR_GRID_TEXT,\r\n  COLOR_ORIGIN,\r\n  COLOR_SELECTED,\r\n  COLOR_HIGHLIGHT,\r\n  COLOR_DRAWING,\r\n  COLOR_DELETE_HOVER,\r\n  COLOR_TEXT,\r\n  COLOR_TEXT_DARK,\r\n  COLOR_JOINT,\r\n  \r\n  // 渲染线宽\r\n  LINE_WIDTH_GRID,\r\n  LINE_WIDTH_ORIGIN,\r\n  LINE_WIDTH_SELECTED,\r\n  LINE_WIDTH_VERTEX_HIGHLIGHT,\r\n  LINE_WIDTH_VERTEX_EDITING,\r\n  LINE_WIDTH_DRAWING,\r\n  LINE_WIDTH_JOINT,\r\n} from '@core/constants';\r\n\r\n// ==================== 类型定义 ====================\r\n\r\ntype BodyType = 'static' | 'dynamic' | 'kinematic';\r\ntype ShapeType = 'box' | 'circle' | 'polygon';\r\ntype JointType = 'revolute'; // 'distance' 已屏蔽\r\ntype Tool = 'select' | 'rect' | 'circle' | 'polygon' | 'revoluteJoint' | 'delete'; // 移除 'distanceJoint'\r\n\r\ninterface Vector2 {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\ninterface Body {\r\n  id: string;\r\n  type: 'body';\r\n  shapeType: ShapeType;\r\n  position: Vector2;\r\n  angle: number;\r\n  width?: number;\r\n  height?: number;\r\n  radius?: number;\r\n  vertices?: Vector2[];\r\n  bodyType: BodyType;\r\n  density: number;\r\n  friction: number;\r\n  restitution: number;\r\n  linearDamping: number;\r\n  angularDamping: number;\r\n  gravityScale: number;\r\n  fixedRotation: boolean;\r\n}\r\n\r\ninterface Joint {\r\n  id: string;\r\n  type: 'joint';\r\n  jointType: JointType;\r\n  bodyAId: string;\r\n  bodyBId: string;\r\n  anchorALocal: Vector2;  // Body A 的局部坐标\r\n  anchorBLocal: Vector2;  // Body B 的局部坐标\r\n  length?: number;\r\n  frequencyHz?: number;\r\n  dampingRatio?: number;\r\n  enableLimit?: boolean;\r\n  lowerAngle?: number;\r\n  upperAngle?: number;\r\n  enableMotor?: boolean;\r\n  motorSpeed?: number;\r\n  maxMotorTorque?: number;\r\n  collideConnected?: boolean;\r\n}\r\n\r\ntype MapObject = Body | Joint;\r\n\r\n// ==================== 常量 ====================\r\n\r\n// PPM: Pixels Per Meter - 每米多少像素（可配置）\r\nlet PPM = 20; // 默认 20 像素 = 1 米\r\n\r\n// 视图原点偏移（Box2D 坐标，单位：米）\r\nlet ORIGIN_OFFSET_X = 0;\r\nlet ORIGIN_OFFSET_Y = 0;\r\n\r\nconst GRID_SIZE = 1; // 网格大小 1 米\r\nconst SELECTION_COLOR = '#00ff00';\r\nconst BODY_COLORS = {\r\n  static: '#95a5a6',\r\n  dynamic: '#3498db',\r\n  kinematic: '#9b59b6'\r\n};\r\n\r\n// ==================== 工具函数 ====================\r\n\r\nfunction generateId(prefix: string): string {\r\n  return `${prefix}${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n}\r\n\r\n// Box2D 坐标 <-> Canvas 像素坐标转换\r\n// Box2D: Y向上，原点在Canvas中心底部（可偏移），单位：米\r\n// Canvas: Y向下，原点在左上角，单位：像素\r\n\r\nfunction box2DToCanvas(box2dX: number, box2dY: number, canvasWidth: number, canvasHeight: number): Vector2 {\r\n  // 应用原点偏移\r\n  const offsetX = box2dX - ORIGIN_OFFSET_X;\r\n  const offsetY = box2dY - ORIGIN_OFFSET_Y;\r\n  \r\n  // Box2D 坐标转 Canvas 坐标（Y 向上统一，不翻转）\r\n  return {\r\n    x: canvasWidth / 2 + offsetX * PPM,        // X: 中心偏移\r\n    y: canvasHeight / 2 - offsetY * PPM        // Y: 中心偏移（Canvas 向下为正，所以用减法）\r\n  };\r\n}\r\n\r\nfunction canvasToBox2D(canvasX: number, canvasY: number, canvasWidth: number, canvasHeight: number): Vector2 {\r\n  // Canvas 坐标转 Box2D 坐标（Y 向上统一，不翻转）\r\n  const box2dX = (canvasX - canvasWidth / 2) / PPM;\r\n  const box2dY = (canvasHeight / 2 - canvasY) / PPM;  // Canvas 向下为正，所以用减法\r\n  \r\n  // 应用原点偏移\r\n  return {\r\n    x: box2dX + ORIGIN_OFFSET_X,\r\n    y: box2dY + ORIGIN_OFFSET_Y\r\n  };\r\n}\r\n\r\nfunction box2DToCanvasScale(box2dValue: number): number {\r\n  // Box2D 标量（长度）转 Canvas 像素\r\n  return box2dValue * PPM;\r\n}\r\n\r\n// function canvasToBox2DScale(pixelValue: number): number {\r\n//   // Canvas 像素转 Box2D 标量（长度）\r\n//   return pixelValue / PPM;\r\n// }\r\n\r\nfunction distance(x1: number, y1: number, x2: number, y2: number): number {\r\n  const dx = x2 - x1;\r\n  const dy = y2 - y1;\r\n  return Math.sqrt(dx * dx + dy * dy);\r\n}\r\n\r\nfunction worldToLocal(worldX: number, worldY: number, bodyX: number, bodyY: number, bodyAngle: number): Vector2 {\r\n  const dx = worldX - bodyX;\r\n  const dy = worldY - bodyY;\r\n  const cos = Math.cos(-bodyAngle);\r\n  const sin = Math.sin(-bodyAngle);\r\n  return {\r\n    x: dx * cos - dy * sin,\r\n    y: dx * sin + dy * cos\r\n  };\r\n}\r\n\r\nfunction localToWorld(localX: number, localY: number, bodyX: number, bodyY: number, bodyAngle: number): Vector2 {\r\n  const cos = Math.cos(bodyAngle);\r\n  const sin = Math.sin(bodyAngle);\r\n  return {\r\n    x: bodyX + localX * cos - localY * sin,\r\n    y: bodyY + localX * sin + localY * cos\r\n  };\r\n}\r\n\r\nfunction pointInRotatedRect(px: number, py: number, rectX: number, rectY: number, width: number, height: number, angle: number): boolean {\r\n  const local = worldToLocal(px, py, rectX, rectY, angle);\r\n  const halfW = width / 2;\r\n  const halfH = height / 2;\r\n  return local.x >= -halfW && local.x <= halfW && local.y >= -halfH && local.y <= halfH;\r\n}\r\n\r\nfunction pointInCircle(px: number, py: number, cx: number, cy: number, radius: number): boolean {\r\n  return distance(px, py, cx, cy) <= radius;\r\n}\r\n\r\nfunction pointInPolygon(px: number, py: number, vertices: Vector2[], centerX: number, centerY: number, angle: number): boolean {\r\n  // 将点转换到多边形的本地坐标系\r\n  const local = worldToLocal(px, py, centerX, centerY, angle);\r\n  \r\n  // 使用射线法（Ray Casting）判断点是否在多边形内\r\n  let inside = false;\r\n  for (let i = 0, j = vertices.length - 1; i < vertices.length; j = i++) {\r\n    const xi = vertices[i].x;\r\n    const yi = vertices[i].y;\r\n    const xj = vertices[j].x;\r\n    const yj = vertices[j].y;\r\n    \r\n    const intersect = ((yi > local.y) !== (yj > local.y)) &&\r\n      (local.x < (xj - xi) * (local.y - yi) / (yj - yi) + xi);\r\n    if (intersect) inside = !inside;\r\n  }\r\n  return inside;\r\n}\r\n\r\nfunction downloadFile(content: string, filename: string): void {\r\n  const blob = new Blob([content], { type: 'application/json' });\r\n  const url = URL.createObjectURL(blob);\r\n  const link = document.createElement('a');\r\n  link.href = url;\r\n  link.download = filename;\r\n  document.body.appendChild(link);\r\n  link.click();\r\n  document.body.removeChild(link);\r\n  URL.revokeObjectURL(url);\r\n}\r\n\r\n// ==================== 主应用类 ====================\r\n\r\nclass MapDesigner {\r\n  private canvas: HTMLCanvasElement;\r\n  private ctx: CanvasRenderingContext2D;\r\n  private objects: MapObject[] = [];\r\n  private selectedObject: MapObject | null = null;\r\n  private currentTool: Tool = 'select';\r\n  \r\n  private drawingObject: Body | null = null;\r\n  private polygonVertices: Vector2[] = [];\r\n  private jointBodyA: Body | null = null;\r\n  private jointAnchorA: Vector2 | null = null;\r\n  \r\n  private isDragging = false;\r\n  private dragStartPos: Vector2 | null = null;\r\n  private mousePos: Vector2 = { x: 0, y: 0 }; // 当前鼠标位置\r\n  \r\n  // 撤销/重做系统\r\n  private commandHistory: CommandHistory;\r\n  private moveStartPos: Vector2 | null = null; // 用于记录移动开始位置\r\n  \r\n  // 关节锚点拖动\r\n  private draggingAnchor: { joint: Joint; isAnchorA: boolean } | null = null;\r\n  private anchorStartPos: Vector2 | null = null;\r\n  \r\n  // 画布平移（中键拖动）\r\n  private isPanning = false;\r\n  private panStartOriginX = 0;\r\n  private panStartOriginY = 0;\r\n  private panStartMouseX = 0;\r\n  private panStartMouseY = 0;\r\n  \r\n  // 顶点编辑模式\r\n  private isEditingVertices = false;\r\n  private editingBody: Body | null = null;\r\n  private draggedVertexIndex: number = -1;\r\n  private vertexDragStart: Vector2 | null = null;\r\n  \r\n  // 旋转变换控制\r\n  private isRotating = false;\r\n  private rotateStartAngle = 0;        // 物体初始角度\r\n  private rotateStartMouseAngle = 0;   // 鼠标初始角度（相对于物体中心）\r\n  \r\n  // 缩放变换控制\r\n  private isScaling = false;\r\n  private scaleHandle: 'tl' | 'tr' | 'br' | 'bl' | 'top' | 'right' | 'bottom' | 'left' | null = null;\r\n  private scaleStartBodyPos: Vector2 = { x: 0, y: 0 };\r\n  private scaleStartAngle = 0;  // 缩放开始时的物体角度\r\n  private scaleStartWidth = 0;\r\n  private scaleStartHeight = 0;\r\n  private scaleStartRadius = 0;\r\n  private scaleStartVertices: Vector2[] = [];\r\n  \r\n  // 物理预览模式\r\n  private isPreviewMode = false;\r\n  private box2dWorld: any = null;\r\n  private box2dBodies: Map<string, any> = new Map();\r\n  private box2dJoints: Map<string, any> = new Map();\r\n  private previewAnimationId: number | null = null;\r\n  private previewPaused = false;\r\n  private previewOriginalState: Array<{id: string, position: Vector2, angle: number}> = [];\r\n  \r\n  // 预览模式的坐标系快照（用于 Box2D 同步）\r\n  private previewPPM = 20;\r\n  private previewOriginOffsetX = 0;\r\n  private previewOriginOffsetY = 0;\r\n\r\n  constructor(canvasId: string) {\r\n    this.canvas = document.getElementById(canvasId) as HTMLCanvasElement;\r\n    this.ctx = this.canvas.getContext('2d')!;\r\n    this.commandHistory = new CommandHistory();\r\n    \r\n    this.setupEventListeners();\r\n    this.updateUndoRedoButtons();\r\n    this.render();\r\n  }\r\n\r\n  private setupEventListeners(): void {\r\n    // 工具栏按钮\r\n    document.querySelectorAll('.tool-btn').forEach(btn => {\r\n      btn.addEventListener('click', (e) => {\r\n        const tool = (e.currentTarget as HTMLElement).dataset.tool as Tool;\r\n        this.setTool(tool);\r\n      });\r\n    });\r\n\r\n    // 画布事件\r\n    this.canvas.addEventListener('mousedown', this.onMouseDown.bind(this));\r\n    this.canvas.addEventListener('mousemove', this.onMouseMove.bind(this));\r\n    this.canvas.addEventListener('mouseup', this.onMouseUp.bind(this));\r\n    this.canvas.addEventListener('dblclick', this.onDoubleClick.bind(this));\r\n    \r\n    // 画布滚轮缩放\r\n    this.canvas.addEventListener('wheel', this.onMouseWheel.bind(this), { passive: false });\r\n    \r\n    // 阻止右键菜单，以便使用中键\r\n    this.canvas.addEventListener('contextmenu', (e) => e.preventDefault());\r\n\r\n    // 文件操作\r\n    document.getElementById('btn-new')?.addEventListener('click', () => this.newMap());\r\n    document.getElementById('btn-save')?.addEventListener('click', () => this.saveMap());\r\n    document.getElementById('btn-load')?.addEventListener('click', () => this.loadMap());\r\n    document.getElementById('btn-export')?.addEventListener('click', () => this.exportBox2D());\r\n    \r\n    // 属性面板收起/展开\r\n    document.getElementById('btn-toggle-panel')?.addEventListener('click', () => this.togglePanel());\r\n    \r\n    // 物理预览\r\n    document.getElementById('btn-preview')?.addEventListener('click', () => this.togglePreview());\r\n    document.getElementById('btn-preview-play')?.addEventListener('click', () => this.resumePreview());\r\n    document.getElementById('btn-preview-pause')?.addEventListener('click', () => this.pausePreview());\r\n    document.getElementById('btn-preview-reset')?.addEventListener('click', () => this.resetPreview());\r\n    document.getElementById('btn-preview-exit')?.addEventListener('click', () => this.exitPreview());\r\n    \r\n    // 撤销/重做按钮\r\n    document.getElementById('btn-undo')?.addEventListener('click', () => this.undo());\r\n    document.getElementById('btn-redo')?.addEventListener('click', () => this.redo());\r\n    \r\n    const fileInput = document.getElementById('file-input') as HTMLInputElement;\r\n    fileInput?.addEventListener('change', (e) => {\r\n      const file = (e.target as HTMLInputElement).files?.[0];\r\n      if (file) this.loadFromFile(file);\r\n    });\r\n\r\n    // 键盘快捷键\r\n    document.addEventListener('keydown', (e) => {\r\n      // 预览模式下只允许 ESC 键退出\r\n      if (this.isPreviewMode) {\r\n        if (e.key === 'Escape') {\r\n          e.preventDefault();\r\n          this.exitPreview();\r\n        }\r\n        return; // 其他按键在预览模式下无效\r\n      }\r\n      \r\n      // 普通模式下的快捷键\r\n      if (e.key === 'Delete' && this.selectedObject) {\r\n        this.deleteSelected();\r\n      } else if (e.ctrlKey && e.key === 'z') {\r\n        e.preventDefault();\r\n        this.undo();\r\n      } else if (e.ctrlKey && e.key === 'y') {\r\n        e.preventDefault();\r\n        this.redo();\r\n      } else if (e.key === ' ') {\r\n        e.preventDefault();\r\n        this.togglePreview();\r\n      }\r\n    });\r\n\r\n    // 视图设置控件\r\n    this.setupViewControls();\r\n  }\r\n\r\n  private setupViewControls(): void {\r\n    const canvasWidthSlider = document.getElementById('canvas-width-slider') as HTMLInputElement;\r\n    const canvasWidthValue = document.getElementById('canvas-width-value') as HTMLSpanElement;\r\n    const canvasHeightSlider = document.getElementById('canvas-height-slider') as HTMLInputElement;\r\n    const canvasHeightValue = document.getElementById('canvas-height-value') as HTMLSpanElement;\r\n    const ppmSlider = document.getElementById('ppm-slider') as HTMLInputElement;\r\n    const ppmValue = document.getElementById('ppm-value') as HTMLSpanElement;\r\n    const originXSlider = document.getElementById('origin-x-slider') as HTMLInputElement;\r\n    const originXValue = document.getElementById('origin-x-value') as HTMLSpanElement;\r\n    const originYSlider = document.getElementById('origin-y-slider') as HTMLInputElement;\r\n    const originYValue = document.getElementById('origin-y-value') as HTMLSpanElement;\r\n    const resetBtn = document.getElementById('btn-reset-view') as HTMLButtonElement;\r\n\r\n    // 画布宽度调整\r\n    canvasWidthSlider?.addEventListener('input', (e) => {\r\n      const value = parseInt((e.target as HTMLInputElement).value);\r\n      this.canvas.width = value;\r\n      if (canvasWidthValue) canvasWidthValue.textContent = value.toString();\r\n      this.render();\r\n      this.updateStatus('画布宽度已调整为 ' + value + 'px');\r\n    });\r\n\r\n    // 画布高度调整\r\n    canvasHeightSlider?.addEventListener('input', (e) => {\r\n      const value = parseInt((e.target as HTMLInputElement).value);\r\n      this.canvas.height = value;\r\n      if (canvasHeightValue) canvasHeightValue.textContent = value.toString();\r\n      this.render();\r\n      this.updateStatus('画布高度已调整为 ' + value + 'px');\r\n    });\r\n\r\n    // PPM 缩放控制\r\n    ppmSlider?.addEventListener('input', (e) => {\r\n      const value = parseInt((e.target as HTMLInputElement).value);\r\n      PPM = value;\r\n      if (ppmValue) ppmValue.textContent = value.toString();\r\n      this.render();\r\n    });\r\n\r\n    // 原点 X 偏移\r\n    originXSlider?.addEventListener('input', (e) => {\r\n      const value = parseFloat((e.target as HTMLInputElement).value);\r\n      ORIGIN_OFFSET_X = value;\r\n      if (originXValue) originXValue.textContent = value.toFixed(2);\r\n      this.render();\r\n    });\r\n\r\n    // 原点 Y 偏移\r\n    originYSlider?.addEventListener('input', (e) => {\r\n      const value = parseFloat((e.target as HTMLInputElement).value);\r\n      ORIGIN_OFFSET_Y = value;\r\n      if (originYValue) originYValue.textContent = value.toFixed(2);\r\n      this.render();\r\n    });\r\n\r\n    // 重置视图\r\n    resetBtn?.addEventListener('click', () => {\r\n      // 重置画布大小\r\n      this.canvas.width = DEFAULT_CANVAS_WIDTH;\r\n      this.canvas.height = DEFAULT_CANVAS_HEIGHT;\r\n      if (canvasWidthSlider) canvasWidthSlider.value = String(DEFAULT_CANVAS_WIDTH);\r\n      if (canvasWidthValue) canvasWidthValue.textContent = String(DEFAULT_CANVAS_WIDTH);\r\n      if (canvasHeightSlider) canvasHeightSlider.value = String(DEFAULT_CANVAS_HEIGHT);\r\n      if (canvasHeightValue) canvasHeightValue.textContent = String(DEFAULT_CANVAS_HEIGHT);\r\n      \r\n      // 重置缩放和原点\r\n      PPM = 20;\r\n      ORIGIN_OFFSET_X = 0;\r\n      ORIGIN_OFFSET_Y = (DEFAULT_CANVAS_HEIGHT / 2) / PPM;\r\n      \r\n      if (ppmSlider) ppmSlider.value = '20';\r\n      if (ppmValue) ppmValue.textContent = '20';\r\n      if (originXSlider) originXSlider.value = '0';\r\n      if (originXValue) originXValue.textContent = '0.00';\r\n      if (originYSlider) originYSlider.value = String(ORIGIN_OFFSET_Y);\r\n      if (originYValue) originYValue.textContent = ORIGIN_OFFSET_Y.toFixed(2);\r\n      \r\n      this.render();\r\n      this.updateStatus('视图已重置');\r\n    });\r\n  }\r\n\r\n  private togglePanel(): void {\r\n    const panel = document.getElementById('property-panel');\r\n    if (panel) {\r\n      panel.classList.toggle('collapsed');\r\n      const isCollapsed = panel.classList.contains('collapsed');\r\n      this.updateStatus(isCollapsed ? '属性面板已收起' : '属性面板已展开');\r\n    }\r\n  }\r\n\r\n  private setTool(tool: Tool): void {\r\n    this.currentTool = tool;\r\n    \r\n    // 重置状态\r\n    this.drawingObject = null;\r\n    this.polygonVertices = [];\r\n    this.jointBodyA = null;\r\n    this.jointAnchorA = null;\r\n    \r\n    // 更新UI\r\n    document.querySelectorAll('.tool-btn').forEach(btn => {\r\n      btn.classList.remove('active');\r\n    });\r\n    document.querySelector(`[data-tool=\"${tool}\"]`)?.classList.add('active');\r\n    \r\n    this.updateStatus(`工具: ${tool}`);\r\n    this.render();\r\n  }\r\n\r\n  private getMousePos(e: MouseEvent): Vector2 {\r\n    const rect = this.canvas.getBoundingClientRect();\r\n    // 考虑Canvas的缩放比例\r\n    const scaleX = this.canvas.width / rect.width;\r\n    const scaleY = this.canvas.height / rect.height;\r\n    \r\n    const canvasX = (e.clientX - rect.left) * scaleX;\r\n    const canvasY = (e.clientY - rect.top) * scaleY;\r\n    \r\n    // 转换为 Box2D 坐标（Y向上，原点在Canvas中心底部，单位：米）\r\n    return canvasToBox2D(canvasX, canvasY, this.canvas.width, this.canvas.height);\r\n  }\r\n\r\n  private onMouseDown(e: MouseEvent): void {\r\n    // 预览模式下禁用所有鼠标操作（除了中键平移）\r\n    if (this.isPreviewMode && e.button !== 1) {\r\n      return;\r\n    }\r\n    \r\n    // 中键拖动画布\r\n    if (e.button === 1) {\r\n      e.preventDefault();\r\n      this.isPanning = true;\r\n      this.panStartOriginX = ORIGIN_OFFSET_X;\r\n      this.panStartOriginY = ORIGIN_OFFSET_Y;\r\n      this.panStartMouseX = e.clientX;\r\n      this.panStartMouseY = e.clientY;\r\n      this.canvas.style.cursor = 'grabbing';\r\n      return;\r\n    }\r\n    \r\n    // 只有左键才执行工具操作\r\n    if (e.button !== 0) return;\r\n    \r\n    const pos = this.getMousePos(e);\r\n\r\n    switch (this.currentTool) {\r\n      case 'select':\r\n        this.handleSelectMouseDown(pos);\r\n        break;\r\n      case 'rect':\r\n      case 'circle':\r\n        this.handleShapeMouseDown(pos);\r\n        break;\r\n      case 'polygon':\r\n        this.handlePolygonMouseDown(pos);\r\n        break;\r\n      case 'revoluteJoint':\r\n        this.handleJointMouseDown(pos);\r\n        break;\r\n      case 'delete':\r\n        this.handleDeleteMouseDown(pos);\r\n        break;\r\n    }\r\n  }\r\n\r\n  private onMouseMove(e: MouseEvent): void {\r\n    // 画布平移（中键拖动）\r\n    if (this.isPanning) {\r\n      const deltaX = e.clientX - this.panStartMouseX;\r\n      const deltaY = e.clientY - this.panStartMouseY;\r\n      \r\n      // 转换为 Box2D 单位（米）并更新原点偏移\r\n      // 向右拖动 = 画布向右 = 原点向左（减小）\r\n      // 向下拖动 = 画布向下 = 原点向上（增大，因为 Box2D Y 向上）\r\n      ORIGIN_OFFSET_X = this.panStartOriginX - deltaX / PPM;\r\n      ORIGIN_OFFSET_Y = this.panStartOriginY + deltaY / PPM;\r\n      \r\n      // 更新滑块显示\r\n      this.updateViewControlsUI();\r\n      this.render();\r\n      return;\r\n    }\r\n    \r\n    // 预览模式下只更新状态栏坐标\r\n    if (this.isPreviewMode) {\r\n      const pos = this.getMousePos(e);\r\n      this.updateStatus('物理预览模式', `坐标: (${pos.x.toFixed(2)}m, ${pos.y.toFixed(2)}m)`, '按 ESC 或点击退出');\r\n      return;\r\n    }\r\n    \r\n    const pos = this.getMousePos(e);\r\n    this.mousePos = pos; // 保存当前鼠标位置（Box2D坐标）\r\n    \r\n    // 更新状态栏\r\n    if (this.isEditingVertices) {\r\n      this.updateStatus(\r\n        `顶点编辑模式 (拖动顶点修改 | 双击/点击空白处退出)`,\r\n        `坐标: (${pos.x.toFixed(2)}m, ${pos.y.toFixed(2)}m)`\r\n      );\r\n    } else if (this.currentTool === 'polygon' && this.polygonVertices.length > 0) {\r\n      // 多边形创建模式的特殊提示\r\n      const vertexCount = this.polygonVertices.length;\r\n      const maxVertices = 8; // Box2D 物理引擎限制\r\n      let hint = '';\r\n      if (vertexCount < 3) {\r\n        hint = `已有 ${vertexCount} 个顶点，至少需要 3 个`;\r\n      } else if (vertexCount >= maxVertices) {\r\n        hint = `已达到物理引擎限制 (${maxVertices}个)，请点击起始点或双击完成`;\r\n      } else {\r\n        hint = `已有 ${vertexCount} 个顶点（最多${maxVertices}个），双击或点击起始点完成`;\r\n      }\r\n      this.updateStatus(`多边形工具`, `坐标: (${pos.x.toFixed(2)}m, ${pos.y.toFixed(2)}m)`, hint);\r\n    } else {\r\n      this.updateStatus(`工具: ${this.currentTool}`, `坐标: (${pos.x.toFixed(2)}m, ${pos.y.toFixed(2)}m)`);\r\n    }\r\n\r\n    // 顶点拖动\r\n    if (this.draggedVertexIndex >= 0 && this.editingBody?.vertices) {\r\n      const body = this.editingBody;\r\n      \r\n      // 将世界坐标转换为物体局部坐标\r\n      const cos = Math.cos(-body.angle); // 注意这里是逆旋转\r\n      const sin = Math.sin(-body.angle);\r\n      const dx = pos.x - body.position.x;\r\n      const dy = pos.y - body.position.y;\r\n      const localX = dx * cos - dy * sin;\r\n      const localY = dx * sin + dy * cos;\r\n      \r\n      // 更新顶点位置\r\n      body.vertices![this.draggedVertexIndex].x = localX;\r\n      body.vertices![this.draggedVertexIndex].y = localY;\r\n      \r\n      this.render();\r\n      return;\r\n    }\r\n\r\n    // 拖动锚点\r\n    if (this.draggingAnchor) {\r\n      const { joint, isAnchorA } = this.draggingAnchor;\r\n      const body = this.objects.find(o => o.id === (isAnchorA ? joint.bodyAId : joint.bodyBId)) as Body;\r\n      \r\n      if (body) {\r\n        // 将世界坐标转换为该 body 的局部坐标\r\n        const localPos = worldToLocal(pos.x, pos.y, body.position.x, body.position.y, body.angle);\r\n        \r\n        // 更新锚点位置\r\n        if (isAnchorA) {\r\n          joint.anchorALocal.x = localPos.x;\r\n          joint.anchorALocal.y = localPos.y;\r\n        } else {\r\n          joint.anchorBLocal.x = localPos.x;\r\n          joint.anchorBLocal.y = localPos.y;\r\n        }\r\n        \r\n        // 距离关节已屏蔽，不需要更新长度\r\n      }\r\n      \r\n      this.render();\r\n      return;\r\n    }\r\n\r\n    // 旋转物体\r\n    if (this.isRotating && this.selectedObject && this.selectedObject.type === 'body') {\r\n      const body = this.selectedObject as Body;\r\n      \r\n      // 计算当前鼠标相对于物体中心的角度\r\n      const dx = pos.x - body.position.x;\r\n      const dy = pos.y - body.position.y;\r\n      const currentMouseAngle = Math.atan2(dy, dx);\r\n      \r\n      // 计算角度差\r\n      const angleDelta = currentMouseAngle - this.rotateStartMouseAngle;\r\n      \r\n      // 更新物体角度\r\n      body.angle = this.rotateStartAngle + angleDelta;\r\n      \r\n      this.render();\r\n      return;\r\n    }\r\n\r\n    // 处理缩放\r\n    if (this.isScaling && this.selectedObject && this.selectedObject.type === 'body') {\r\n      const body = this.selectedObject as Body;\r\n      this.handleScaling(body, pos);\r\n      this.render();\r\n      return;\r\n    }\r\n\r\n    if (this.currentTool === 'select' && this.isDragging && this.selectedObject && this.dragStartPos) {\r\n      const dx = pos.x - this.dragStartPos.x;\r\n      const dy = pos.y - this.dragStartPos.y;\r\n      \r\n      if (this.selectedObject.type === 'body') {\r\n        this.selectedObject.position.x += dx;\r\n        this.selectedObject.position.y += dy;\r\n      }\r\n      \r\n      this.dragStartPos = pos;\r\n      this.render();\r\n    }\r\n\r\n    if (this.drawingObject && (this.currentTool === 'rect' || this.currentTool === 'circle')) {\r\n      this.updateDrawingShape(pos);\r\n      this.render();\r\n    }\r\n    \r\n    // 如果在绘制模式下，实时渲染鼠标位置\r\n    if (this.currentTool !== 'select' || this.polygonVertices.length > 0) {\r\n      this.render();\r\n    }\r\n  }\r\n\r\n  private onMouseUp(_e: MouseEvent): void {\r\n    // 结束画布平移\r\n    if (this.isPanning) {\r\n      this.isPanning = false;\r\n      this.canvas.style.cursor = this.isPreviewMode ? 'default' : 'crosshair';\r\n      return;\r\n    }\r\n    \r\n    // 预览模式下禁用所有编辑操作\r\n    if (this.isPreviewMode) {\r\n      return;\r\n    }\r\n    \r\n    if (this.currentTool === 'rect' || this.currentTool === 'circle') {\r\n      if (this.drawingObject) {\r\n        this.finalizeDrawingShape();\r\n      }\r\n    }\r\n\r\n    // 处理锚点拖动结束\r\n    if (this.draggingAnchor && this.anchorStartPos) {\r\n      const { joint, isAnchorA } = this.draggingAnchor;\r\n      const anchor = isAnchorA ? joint.anchorALocal : joint.anchorBLocal;\r\n      const prop = isAnchorA ? 'anchorALocal' : 'anchorBLocal';\r\n      const oldValue = this.anchorStartPos;\r\n      const newValue = { x: anchor.x, y: anchor.y };\r\n      \r\n      // 只有真正移动了才记录命令\r\n      if (oldValue.x !== newValue.x || oldValue.y !== newValue.y) {\r\n        const cmd = new ModifyPropertyCommand(\r\n          joint,\r\n          prop,\r\n          oldValue,\r\n          newValue,\r\n          () => {\r\n            this.render();\r\n            this.updatePropertyPanel();\r\n          }\r\n        );\r\n        this.commandHistory.execute(cmd);\r\n        this.updateUndoRedoButtons();\r\n      }\r\n      \r\n      this.draggingAnchor = null;\r\n      this.anchorStartPos = null;\r\n      this.updatePropertyPanel(); // 更新属性面板显示新位置\r\n    }\r\n    \r\n    // 处理旋转结束\r\n    if (this.isRotating && this.selectedObject && this.selectedObject.type === 'body') {\r\n      const body = this.selectedObject as Body;\r\n      const oldAngle = this.rotateStartAngle;\r\n      const newAngle = body.angle;\r\n      \r\n      // 只有真正旋转了才记录命令（误差容忍0.01弧度，约0.57度）\r\n      if (Math.abs(newAngle - oldAngle) > 0.01) {\r\n        const cmd = new ModifyPropertyCommand(\r\n          body,\r\n          'angle',\r\n          oldAngle,\r\n          newAngle,\r\n          () => {\r\n            this.render();\r\n            this.updatePropertyPanel();\r\n          }\r\n        );\r\n        this.commandHistory.execute(cmd);\r\n        this.updateUndoRedoButtons();\r\n      }\r\n      \r\n      this.isRotating = false;\r\n      this.updatePropertyPanel();\r\n    }\r\n    \r\n    // 处理缩放结束\r\n    if (this.isScaling && this.selectedObject && this.selectedObject.type === 'body') {\r\n      const body = this.selectedObject as Body;\r\n      \r\n      // 记录缩放操作到历史\r\n      let changed = false;\r\n      \r\n      if (body.shapeType === 'box') {\r\n        changed = Math.abs((body.width || 0) - this.scaleStartWidth) > 0.01 ||\r\n                  Math.abs((body.height || 0) - this.scaleStartHeight) > 0.01;\r\n        \r\n        if (changed) {\r\n          // 创建复合命令记录宽度、高度和位置的变化\r\n          const oldWidth = this.scaleStartWidth;\r\n          const newWidth = body.width;\r\n          \r\n          const cmd = new ModifyPropertyCommand(\r\n            body,\r\n            'width',\r\n            oldWidth,\r\n            newWidth,\r\n            () => {\r\n              this.render();\r\n              this.updatePropertyPanel();\r\n            }\r\n          );\r\n          this.commandHistory.execute(cmd);\r\n          this.updateUndoRedoButtons();\r\n        }\r\n      } else if (body.shapeType === 'circle') {\r\n        changed = Math.abs((body.radius || 0) - this.scaleStartRadius) > 0.01;\r\n        \r\n        if (changed) {\r\n          const cmd = new ModifyPropertyCommand(\r\n            body,\r\n            'radius',\r\n            this.scaleStartRadius,\r\n            body.radius,\r\n            () => {\r\n              this.render();\r\n              this.updatePropertyPanel();\r\n            }\r\n          );\r\n          this.commandHistory.execute(cmd);\r\n          this.updateUndoRedoButtons();\r\n        }\r\n      } else if (body.shapeType === 'polygon' && body.vertices) {\r\n        // 检查顶点是否有变化\r\n        changed = body.vertices.some((v, i) => \r\n          Math.abs(v.x - this.scaleStartVertices[i].x) > 0.01 ||\r\n          Math.abs(v.y - this.scaleStartVertices[i].y) > 0.01\r\n        );\r\n        \r\n        if (changed) {\r\n          const cmd = new ModifyPropertyCommand(\r\n            body,\r\n            'vertices',\r\n            this.scaleStartVertices,\r\n            body.vertices,\r\n            () => {\r\n              this.render();\r\n              this.updatePropertyPanel();\r\n            }\r\n          );\r\n          this.commandHistory.execute(cmd);\r\n          this.updateUndoRedoButtons();\r\n        }\r\n      }\r\n      \r\n      this.isScaling = false;\r\n      this.scaleHandle = null;\r\n      this.updatePropertyPanel();\r\n    }\r\n    \r\n    // 处理顶点拖动结束\r\n    if (this.draggedVertexIndex >= 0 && this.vertexDragStart && this.editingBody?.vertices) {\r\n      const body = this.editingBody;\r\n      \r\n      // 创建旧顶点数组（拖动前的位置）\r\n      const oldVertices = JSON.parse(JSON.stringify(body.vertices));\r\n      oldVertices[this.draggedVertexIndex].x = this.vertexDragStart.x;\r\n      oldVertices[this.draggedVertexIndex].y = this.vertexDragStart.y;\r\n      \r\n      // 新顶点数组就是当前的 body.vertices（已经在 onMouseMove 中更新了）\r\n      const newVertices = JSON.parse(JSON.stringify(body.vertices));\r\n      \r\n      // 只有真正移动了才记录命令\r\n      const moved = Math.abs(newVertices[this.draggedVertexIndex].x - oldVertices[this.draggedVertexIndex].x) > 0.01 ||\r\n                    Math.abs(newVertices[this.draggedVertexIndex].y - oldVertices[this.draggedVertexIndex].y) > 0.01;\r\n      \r\n      if (moved) {\r\n        const cmd = new ModifyPropertyCommand(\r\n          body,\r\n          'vertices',\r\n          oldVertices,\r\n          newVertices,\r\n          () => {\r\n            this.render();\r\n            this.updatePropertyPanel();\r\n          }\r\n        );\r\n        this.commandHistory.execute(cmd);\r\n        this.updateUndoRedoButtons();\r\n      }\r\n      \r\n      this.draggedVertexIndex = -1;\r\n      this.vertexDragStart = null;\r\n      this.updatePropertyPanel();\r\n    }\r\n\r\n    // 处理移动命令\r\n    if (this.isDragging && this.moveStartPos && this.selectedObject && this.selectedObject.type === 'body') {\r\n      const body = this.selectedObject as Body;\r\n      const oldX = this.moveStartPos.x;\r\n      const oldY = this.moveStartPos.y;\r\n      const newX = body.position.x;\r\n      const newY = body.position.y;\r\n      \r\n      // 只有真正移动了才记录命令\r\n      if (oldX !== newX || oldY !== newY) {\r\n        const cmd = new MoveObjectCommand(\r\n          body,\r\n          oldX,\r\n          oldY,\r\n          newX,\r\n          newY,\r\n          () => this.render()\r\n        );\r\n        this.commandHistory.execute(cmd);\r\n        this.updateUndoRedoButtons();\r\n      }\r\n    }\r\n\r\n    this.isDragging = false;\r\n    this.dragStartPos = null;\r\n    this.moveStartPos = null;\r\n  }\r\n\r\n  private onDoubleClick(e: MouseEvent): void {\r\n    // 预览模式下禁用双击操作\r\n    if (this.isPreviewMode) {\r\n      return;\r\n    }\r\n    \r\n    // 多边形绘制工具：双击完成多边形\r\n    if (this.currentTool === 'polygon' && this.polygonVertices.length >= 3) {\r\n      // 移除最后一个重复添加的点（双击的第二次点击添加的）\r\n      this.polygonVertices.pop();\r\n      this.finalizePolygon();\r\n      return;\r\n    }\r\n    \r\n    // 选择工具：双击多边形进入顶点编辑模式\r\n    if (this.currentTool === 'select') {\r\n      const rect = this.canvas.getBoundingClientRect();\r\n      const scaleX = this.canvas.width / rect.width;\r\n      const scaleY = this.canvas.height / rect.height;\r\n      const canvasX = (e.clientX - rect.left) * scaleX;\r\n      const canvasY = (e.clientY - rect.top) * scaleY;\r\n      const worldPos = canvasToBox2D(canvasX, canvasY, this.canvas.width, this.canvas.height);\r\n      \r\n      // 如果已经在编辑模式，退出编辑模式\r\n      if (this.isEditingVertices) {\r\n        this.exitVertexEditMode();\r\n        return;\r\n      }\r\n      \r\n      // 查找点击的物体\r\n      const obj = this.hitTest(worldPos.x, worldPos.y);\r\n      \r\n      // 如果点击的是多边形，进入顶点编辑模式\r\n      if (obj && obj.type === 'body') {\r\n        const body = obj as Body;\r\n        if (body.shapeType === 'polygon' && body.vertices) {\r\n          this.enterVertexEditMode(body);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private onMouseWheel(e: WheelEvent): void {\r\n    e.preventDefault();\r\n    \r\n    // 获取鼠标在画布上的位置（用于缩放中心）\r\n    const rect = this.canvas.getBoundingClientRect();\r\n    const mouseX = e.clientX - rect.left;\r\n    const mouseY = e.clientY - rect.top;\r\n    \r\n    // 计算鼠标位置的 Box2D 坐标（缩放前）\r\n    const scaleX = this.canvas.width / rect.width;\r\n    const scaleY = this.canvas.height / rect.height;\r\n    const canvasX = mouseX * scaleX;\r\n    const canvasY = mouseY * scaleY;\r\n    const worldPosBefore = canvasToBox2D(canvasX, canvasY, this.canvas.width, this.canvas.height);\r\n    \r\n    // 调整 PPM（缩放）\r\n    const delta = e.deltaY > 0 ? -1 : 1; // 向上滚动放大，向下滚动缩小\r\n    const oldPPM = PPM;\r\n    PPM = Math.max(5, Math.min(50, PPM + delta));\r\n    \r\n    // 如果 PPM 没有改变（达到边界），直接返回\r\n    if (PPM === oldPPM) return;\r\n    \r\n    // 计算鼠标位置的 Box2D 坐标（缩放后）\r\n    const worldPosAfter = canvasToBox2D(canvasX, canvasY, this.canvas.width, this.canvas.height);\r\n    \r\n    // 调整原点偏移，使鼠标位置的世界坐标保持不变\r\n    ORIGIN_OFFSET_X += (worldPosBefore.x - worldPosAfter.x);\r\n    ORIGIN_OFFSET_Y += (worldPosBefore.y - worldPosAfter.y);\r\n    \r\n    // 更新滑块显示\r\n    this.updateViewControlsUI();\r\n    \r\n    // 如果在预览模式，需要重建 Box2D 世界以适应新的缩放\r\n    if (this.isPreviewMode) {\r\n      this.rebuildBox2DWorldWithNewScale();\r\n    } else {\r\n      this.render();\r\n    }\r\n  }\r\n\r\n  private updateViewControlsUI(): void {\r\n    // 更新 PPM 显示\r\n    const ppmSlider = document.getElementById('ppm-slider') as HTMLInputElement;\r\n    const ppmValue = document.getElementById('ppm-value') as HTMLSpanElement;\r\n    if (ppmSlider) ppmSlider.value = PPM.toString();\r\n    if (ppmValue) ppmValue.textContent = PPM.toString();\r\n    \r\n    // 更新原点 X 显示\r\n    const originXSlider = document.getElementById('origin-x-slider') as HTMLInputElement;\r\n    const originXValue = document.getElementById('origin-x-value') as HTMLSpanElement;\r\n    if (originXSlider) {\r\n      // 如果超出滑块范围，设置为边界值\r\n      const clampedX = Math.max(-20, Math.min(20, ORIGIN_OFFSET_X));\r\n      originXSlider.value = clampedX.toString();\r\n    }\r\n    if (originXValue) originXValue.textContent = ORIGIN_OFFSET_X.toFixed(2);\r\n    \r\n    // 更新原点 Y 显示\r\n    const originYSlider = document.getElementById('origin-y-slider') as HTMLInputElement;\r\n    const originYValue = document.getElementById('origin-y-value') as HTMLSpanElement;\r\n    if (originYSlider) {\r\n      // 如果超出滑块范围，设置为边界值\r\n      const clampedY = Math.max(-20, Math.min(20, ORIGIN_OFFSET_Y));\r\n      originYSlider.value = clampedY.toString();\r\n    }\r\n    if (originYValue) originYValue.textContent = ORIGIN_OFFSET_Y.toFixed(2);\r\n  }\r\n\r\n  private handleSelectMouseDown(pos: Vector2): void {\r\n    // 检测是否点击了旋转手柄或缩放手柄\r\n    if (this.selectedObject && this.selectedObject.type === 'body' && !this.isEditingVertices) {\r\n      const body = this.selectedObject as Body;\r\n      \r\n      // 优先检测旋转手柄\r\n      if (this.hitTestRotateHandle(body, pos.x, pos.y)) {\r\n        // 开始旋转\r\n        this.isRotating = true;\r\n        this.rotateStartAngle = body.angle;\r\n        \r\n        // 计算鼠标相对于物体中心的初始角度\r\n        const dx = pos.x - body.position.x;\r\n        const dy = pos.y - body.position.y;\r\n        this.rotateStartMouseAngle = Math.atan2(dy, dx);\r\n        \r\n        console.log('开始旋转物体');\r\n        return;\r\n      }\r\n      \r\n      // 然后检测缩放手柄\r\n      const scaleHandle = this.hitTestScaleHandle(body, pos.x, pos.y);\r\n      if (scaleHandle) {\r\n        // 开始缩放\r\n        this.isScaling = true;\r\n        this.scaleHandle = scaleHandle;\r\n        this.scaleStartBodyPos = { x: body.position.x, y: body.position.y };\r\n        this.scaleStartAngle = body.angle;  // 记录初始角度\r\n        \r\n        // 记录初始尺寸\r\n        if (body.shapeType === 'box') {\r\n          this.scaleStartWidth = body.width || 1;\r\n          this.scaleStartHeight = body.height || 1;\r\n        } else if (body.shapeType === 'circle') {\r\n          this.scaleStartRadius = body.radius || 0.5;\r\n        } else if (body.shapeType === 'polygon' && body.vertices) {\r\n          // 深拷贝顶点\r\n          this.scaleStartVertices = body.vertices.map(v => ({ x: v.x, y: v.y }));\r\n        }\r\n        \r\n        console.log(`开始缩放物体，手柄: ${scaleHandle}`);\r\n        return;\r\n      }\r\n    }\r\n    \r\n    // 顶点编辑模式：尝试选中顶点\r\n    if (this.isEditingVertices && this.editingBody) {\r\n      const vertexIndex = this.hitTestVertex(this.editingBody, pos.x, pos.y);\r\n      if (vertexIndex >= 0) {\r\n        this.draggedVertexIndex = vertexIndex;\r\n        const vertex = this.editingBody.vertices![vertexIndex];\r\n        this.vertexDragStart = { x: vertex.x, y: vertex.y };\r\n        console.log(`开始拖动顶点 ${vertexIndex}`);\r\n        return;\r\n      }\r\n      // 如果没有点击顶点，退出编辑模式\r\n      this.exitVertexEditMode();\r\n    }\r\n    \r\n    // 首先检测是否点击了关节的锚点\r\n    const anchorHit = this.hitTestAnchor(pos.x, pos.y);\r\n    if (anchorHit) {\r\n      // 开始拖动锚点\r\n      this.draggingAnchor = anchorHit;\r\n      this.selectedObject = anchorHit.joint;\r\n      const anchor = anchorHit.isAnchorA ? anchorHit.joint.anchorALocal : anchorHit.joint.anchorBLocal;\r\n      this.anchorStartPos = { x: anchor.x, y: anchor.y };\r\n      this.updatePropertyPanel();\r\n      this.render();\r\n      return;\r\n    }\r\n    \r\n    // 否则检测普通对象\r\n    const obj = this.hitTest(pos.x, pos.y);\r\n    this.selectedObject = obj;\r\n    \r\n    if (obj && obj.type === 'body') {\r\n      this.isDragging = true;\r\n      this.dragStartPos = pos;\r\n      // 记录移动开始位置\r\n      this.moveStartPos = { x: obj.position.x, y: obj.position.y };\r\n    }\r\n    \r\n    this.updatePropertyPanel();\r\n    this.render();\r\n  }\r\n  private handleShapeMouseDown(pos: Vector2): void {\r\n    if (this.currentTool === 'rect') {\r\n      // 创建 1m x 1m 的矩形（Box2D 单位）\r\n      this.drawingObject = this.createBody('box', pos.x, pos.y, 1, 1);\r\n    } else {\r\n      // 创建 0.5m 半径的圆形（Box2D 单位）\r\n      this.drawingObject = this.createBody('circle', pos.x, pos.y, 0.5);\r\n    }\r\n    this.dragStartPos = pos;\r\n  }\r\n\r\n  private handlePolygonMouseDown(pos: Vector2): void {\r\n    // 检查是否点击了起始点（闭合多边形）\r\n    if (this.polygonVertices.length >= 3) {\r\n      const firstVertex = this.polygonVertices[0];\r\n      const distance = Math.sqrt(\r\n        Math.pow(pos.x - firstVertex.x, 2) + \r\n        Math.pow(pos.y - firstVertex.y, 2)\r\n      );\r\n      \r\n      // 如果距离起始点小于 0.5m，则闭合多边形\r\n      if (distance < 0.5) {\r\n        this.finalizePolygon();\r\n        return;\r\n      }\r\n    }\r\n    \r\n    // 检查 Box2D 物理引擎的顶点数限制\r\n    const maxVertices = 8;\r\n    if (this.polygonVertices.length >= maxVertices) {\r\n      this.updateStatus('多边形工具', '', `⚠️ Box2D 物理引擎最多支持 ${maxVertices} 个顶点，请点击起始点或双击完成创建`);\r\n      return;\r\n    }\r\n    \r\n    this.polygonVertices.push({ x: pos.x, y: pos.y });\r\n    this.render();\r\n  }\r\n\r\n  private handleJointMouseDown(pos: Vector2): void {\r\n    const body = this.hitTest(pos.x, pos.y);\r\n    \r\n    if (!body || body.type !== 'body') {\r\n      this.updateStatus('关节工具', '', '请点击一个刚体作为第一个连接点');\r\n      return;\r\n    }\r\n\r\n    if (!this.jointBodyA) {\r\n      // 选择第一个物体\r\n      this.jointBodyA = body as Body;\r\n      this.jointAnchorA = pos;\r\n      this.updateStatus('关节工具', '', `已选择物体 ${this.jointBodyA.id.substring(0, 8)}..., 请选择第二个刚体`);\r\n    } else {\r\n      const bodyB = body as Body;\r\n      \r\n      // 检查是否选择了同一个物体\r\n      if (this.jointBodyA.id === bodyB.id) {\r\n        this.updateStatus('关节工具', '', '❌ 不能连接同一个物体！请选择另一个刚体');\r\n        return;\r\n      }\r\n      \r\n      // 创建关节\r\n      this.createJoint(this.jointBodyA, bodyB, this.jointAnchorA!, pos);\r\n      this.jointBodyA = null;\r\n      this.jointAnchorA = null;\r\n      this.updateStatus('关节工具', '', '✓ 关节已创建！（默认允许碰撞，可在属性面板修改）');\r\n    }\r\n  }\r\n\r\n  private handleDeleteMouseDown(pos: Vector2): void {\r\n    const obj = this.hitTest(pos.x, pos.y);\r\n    if (obj) {\r\n      this.objects = this.objects.filter(o => o.id !== obj.id);\r\n      this.selectedObject = null;\r\n      this.updatePropertyPanel();\r\n      this.render();\r\n    }\r\n  }\r\n\r\n  private updateDrawingShape(pos: Vector2): void {\r\n    if (!this.drawingObject || !this.dragStartPos) return;\r\n\r\n    const dx = pos.x - this.dragStartPos.x;\r\n    const dy = pos.y - this.dragStartPos.y;\r\n\r\n    if (this.drawingObject.shapeType === 'box') {\r\n      // Box2D 坐标，最小尺寸使用常量\r\n      this.drawingObject.width = Math.max(MIN_SHAPE_WIDTH, Math.abs(dx));\r\n      this.drawingObject.height = Math.max(MIN_SHAPE_HEIGHT, Math.abs(dy));\r\n      // 位置是起始点和结束点的中点\r\n      this.drawingObject.position.x = this.dragStartPos.x + dx / 2;\r\n      this.drawingObject.position.y = this.dragStartPos.y + dy / 2;\r\n    } else if (this.drawingObject.shapeType === 'circle') {\r\n      // Box2D 坐标，最小半径使用常量\r\n      this.drawingObject.radius = Math.max(MIN_SHAPE_RADIUS, Math.max(Math.abs(dx), Math.abs(dy)) / 2);\r\n    }\r\n  }\r\n\r\n  private finalizeDrawingShape(): void {\r\n    if (this.drawingObject) {\r\n      const newObject = this.drawingObject;\r\n      const cmd = new AddObjectCommand(\r\n        this.objects,\r\n        newObject,\r\n        () => this.render()\r\n      );\r\n      this.commandHistory.execute(cmd);\r\n      \r\n      this.drawingObject = null;\r\n      this.dragStartPos = null;\r\n      this.updateUndoRedoButtons();\r\n      this.render();\r\n    }\r\n  }\r\n\r\n  private finalizePolygon(): void {\r\n    if (this.polygonVertices.length >= 3) {\r\n      const centerX = this.polygonVertices.reduce((sum, v) => sum + v.x, 0) / this.polygonVertices.length;\r\n      const centerY = this.polygonVertices.reduce((sum, v) => sum + v.y, 0) / this.polygonVertices.length;\r\n      \r\n      let localVertices = this.polygonVertices.map(v => ({\r\n        x: v.x - centerX,\r\n        y: v.y - centerY\r\n      }));\r\n      \r\n      // 确保顶点是逆时针顺序（Box2D 要求）\r\n      localVertices = this.ensureCounterClockwise(localVertices);\r\n\r\n      const body = this.createBody('polygon', centerX, centerY);\r\n      body.vertices = localVertices;\r\n      \r\n      const cmd = new AddObjectCommand(\r\n        this.objects,\r\n        body,\r\n        () => this.render()\r\n      );\r\n      this.commandHistory.execute(cmd);\r\n      \r\n      this.polygonVertices = [];\r\n      this.updateUndoRedoButtons();\r\n      this.render();\r\n    }\r\n  }\r\n  \r\n  // 确保多边形顶点是逆时针顺序（Box2D 要求）\r\n  private ensureCounterClockwise(vertices: Vector2[]): Vector2[] {\r\n    if (vertices.length < 3) return vertices;\r\n    \r\n    // 计算多边形的有向面积（使用叉积）\r\n    let area = 0;\r\n    for (let i = 0; i < vertices.length; i++) {\r\n      const j = (i + 1) % vertices.length;\r\n      area += vertices[i].x * vertices[j].y;\r\n      area -= vertices[j].x * vertices[i].y;\r\n    }\r\n    \r\n    // 如果面积为负，说明是顺时针，需要反转\r\n    // 注意：在我们的坐标系中（Y向上），正面积表示逆时针\r\n    if (area < 0) {\r\n      console.log('多边形顶点是顺时针，反转为逆时针');\r\n      return vertices.reverse();\r\n    }\r\n    \r\n    return vertices;\r\n  }\r\n\r\n  private createBody(shapeType: ShapeType, x: number, y: number, width?: number, height?: number): Body {\r\n    return {\r\n      id: generateId('body_'),\r\n      type: 'body',\r\n      shapeType,\r\n      position: { x, y },\r\n      angle: 0,\r\n      width,\r\n      height,\r\n      radius: shapeType === 'circle' ? 20 : undefined,\r\n      bodyType: 'dynamic',\r\n      density: 1.0,\r\n      friction: 0.3,\r\n      restitution: 0.5,\r\n      linearDamping: 0,\r\n      angularDamping: 0,\r\n      gravityScale: 1,\r\n      fixedRotation: false\r\n    };\r\n  }\r\n\r\n  private createJoint(bodyA: Body, bodyB: Body, anchorA: Vector2, anchorB: Vector2): void {\r\n    // 将世界坐标转换为局部坐标\r\n    const anchorALocal = worldToLocal(anchorA.x, anchorA.y, bodyA.position.x, bodyA.position.y, bodyA.angle);\r\n    const anchorBLocal = worldToLocal(anchorB.x, anchorB.y, bodyB.position.x, bodyB.position.y, bodyB.angle);\r\n    \r\n    const joint: Joint = {\r\n      id: generateId('joint_'),\r\n      type: 'joint',\r\n      jointType: 'revolute', // 只支持旋转关节\r\n      bodyAId: bodyA.id,\r\n      bodyBId: bodyB.id,\r\n      anchorALocal,\r\n      anchorBLocal\r\n    };\r\n\r\n    // 初始化旋转关节属性\r\n    joint.enableLimit = false;\r\n    joint.lowerAngle = -Math.PI / 2;\r\n    joint.upperAngle = Math.PI / 2;\r\n    joint.enableMotor = false;\r\n    joint.motorSpeed = 0;\r\n    joint.maxMotorTorque = 1000;\r\n    joint.collideConnected = true;  // 默认允许碰撞（更符合现实物理）\r\n\r\n    const cmd = new AddObjectCommand(\r\n      this.objects,\r\n      joint,\r\n      () => this.render()\r\n    );\r\n    this.commandHistory.execute(cmd);\r\n    \r\n    this.updateUndoRedoButtons();\r\n    this.render();\r\n  }\r\n\r\n  private hitTest(x: number, y: number): MapObject | null {\r\n    // 将像素阈值转换为 Box2D 单位（米）\r\n    const hitRadius = 10 / PPM; // 10 像素的点击范围\r\n    \r\n    // 优先检测关节的锚点（更小更精确）\r\n    for (let i = this.objects.length - 1; i >= 0; i--) {\r\n      const obj = this.objects[i];\r\n      \r\n      if (obj.type === 'joint') {\r\n        const joint = obj as Joint;\r\n        const bodyA = this.objects.find(o => o.id === joint.bodyAId) as Body;\r\n        const bodyB = this.objects.find(o => o.id === joint.bodyBId) as Body;\r\n        \r\n        if (bodyA && bodyB) {\r\n          const anchorAWorld = localToWorld(\r\n            joint.anchorALocal.x, joint.anchorALocal.y,\r\n            bodyA.position.x, bodyA.position.y, bodyA.angle\r\n          );\r\n          const anchorBWorld = localToWorld(\r\n            joint.anchorBLocal.x, joint.anchorBLocal.y,\r\n            bodyB.position.x, bodyB.position.y, bodyB.angle\r\n          );\r\n          \r\n          // 检测是否点击了锚点\r\n          if (distance(x, y, anchorAWorld.x, anchorAWorld.y) <= hitRadius ||\r\n              distance(x, y, anchorBWorld.x, anchorBWorld.y) <= hitRadius) {\r\n            return joint;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    // 然后检测刚体\r\n    for (let i = this.objects.length - 1; i >= 0; i--) {\r\n      const obj = this.objects[i];\r\n      \r\n      if (obj.type === 'body') {\r\n        if (obj.shapeType === 'box' && obj.width && obj.height) {\r\n          if (pointInRotatedRect(x, y, obj.position.x, obj.position.y, obj.width, obj.height, obj.angle)) {\r\n            return obj;\r\n          }\r\n        } else if (obj.shapeType === 'circle' && obj.radius) {\r\n          if (pointInCircle(x, y, obj.position.x, obj.position.y, obj.radius)) {\r\n            return obj;\r\n          }\r\n        } else if (obj.shapeType === 'polygon' && obj.vertices && obj.vertices.length >= 3) {\r\n          if (pointInPolygon(x, y, obj.vertices, obj.position.x, obj.position.y, obj.angle)) {\r\n            return obj;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  // 检测是否点击了旋转手柄\r\n  private hitTestRotateHandle(body: Body, x: number, y: number): boolean {\r\n    // 计算包围框\r\n    let minX = 0, maxX = 0, maxY = 0;\r\n    \r\n    if (body.shapeType === 'box' && body.width && body.height) {\r\n      const halfW = body.width / 2;\r\n      const halfH = body.height / 2;\r\n      const cos = Math.cos(body.angle);\r\n      const sin = Math.sin(body.angle);\r\n      \r\n      const corners = [\r\n        { x: -halfW, y: -halfH },\r\n        { x: halfW, y: -halfH },\r\n        { x: halfW, y: halfH },\r\n        { x: -halfW, y: halfH }\r\n      ];\r\n      \r\n      const worldCorners = corners.map(c => ({\r\n        x: body.position.x + c.x * cos - c.y * sin,\r\n        y: body.position.y + c.x * sin + c.y * cos\r\n      }));\r\n      \r\n      minX = Math.min(...worldCorners.map(c => c.x));\r\n      maxX = Math.max(...worldCorners.map(c => c.x));\r\n      maxY = Math.max(...worldCorners.map(c => c.y));\r\n    } else if (body.shapeType === 'circle' && body.radius) {\r\n      const r = body.radius;\r\n      minX = body.position.x - r;\r\n      maxX = body.position.x + r;\r\n      maxY = body.position.y + r;\r\n    } else if (body.shapeType === 'polygon' && body.vertices) {\r\n      const cos = Math.cos(body.angle);\r\n      const sin = Math.sin(body.angle);\r\n      \r\n      const worldVertices = body.vertices.map(v => ({\r\n        x: body.position.x + v.x * cos - v.y * sin,\r\n        y: body.position.y + v.x * sin + v.y * cos\r\n      }));\r\n      \r\n      minX = Math.min(...worldVertices.map(v => v.x));\r\n      maxX = Math.max(...worldVertices.map(v => v.x));\r\n      maxY = Math.max(...worldVertices.map(v => v.y));\r\n    }\r\n    \r\n    // 计算旋转手柄位置（Box2D坐标）\r\n    const boxCenterX = (minX + maxX) / 2;\r\n    const boxTop = maxY;  // Y向上，顶部是最大值\r\n    const handleY = boxTop + TRANSFORM_ROTATE_HANDLE_OFFSET / PPM;  // 转换像素到米\r\n    \r\n    // 检测点击（Box2D坐标）\r\n    const handleRadius = (TRANSFORM_ROTATE_HANDLE_RADIUS + 5) / PPM;  // +5像素容差\r\n    const dist = Math.sqrt(\r\n      Math.pow(x - boxCenterX, 2) + \r\n      Math.pow(y - handleY, 2)\r\n    );\r\n    \r\n    return dist <= handleRadius;\r\n  }\r\n\r\n  // 检测是否点击了缩放手柄，返回手柄类型\r\n  private hitTestScaleHandle(body: Body, x: number, y: number): 'tl' | 'tr' | 'br' | 'bl' | 'top' | 'right' | 'bottom' | 'left' | null {\r\n    const width = this.canvas.width;\r\n    const height = this.canvas.height;\r\n    \r\n    // 计算包围框（世界坐标）\r\n    let minX = 0, maxX = 0, minY = 0, maxY = 0;\r\n    \r\n    if (body.shapeType === 'box' && body.width && body.height) {\r\n      const halfW = body.width / 2;\r\n      const halfH = body.height / 2;\r\n      const cos = Math.cos(body.angle);\r\n      const sin = Math.sin(body.angle);\r\n      \r\n      const corners = [\r\n        { x: -halfW, y: -halfH },\r\n        { x: halfW, y: -halfH },\r\n        { x: halfW, y: halfH },\r\n        { x: -halfW, y: halfH }\r\n      ];\r\n      \r\n      const worldCorners = corners.map(c => ({\r\n        x: body.position.x + c.x * cos - c.y * sin,\r\n        y: body.position.y + c.x * sin + c.y * cos\r\n      }));\r\n      \r\n      minX = Math.min(...worldCorners.map(c => c.x));\r\n      maxX = Math.max(...worldCorners.map(c => c.x));\r\n      minY = Math.min(...worldCorners.map(c => c.y));\r\n      maxY = Math.max(...worldCorners.map(c => c.y));\r\n    } else if (body.shapeType === 'circle' && body.radius) {\r\n      const r = body.radius;\r\n      minX = body.position.x - r;\r\n      maxX = body.position.x + r;\r\n      minY = body.position.y - r;\r\n      maxY = body.position.y + r;\r\n    } else if (body.shapeType === 'polygon' && body.vertices) {\r\n      const cos = Math.cos(body.angle);\r\n      const sin = Math.sin(body.angle);\r\n      \r\n      const worldVertices = body.vertices.map(v => ({\r\n        x: body.position.x + v.x * cos - v.y * sin,\r\n        y: body.position.y + v.x * sin + v.y * cos\r\n      }));\r\n      \r\n      minX = Math.min(...worldVertices.map(v => v.x));\r\n      maxX = Math.max(...worldVertices.map(v => v.x));\r\n      minY = Math.min(...worldVertices.map(v => v.y));\r\n      maxY = Math.max(...worldVertices.map(v => v.y));\r\n    }\r\n    \r\n    // 转换到Canvas坐标\r\n    const topLeft = box2DToCanvas(minX, maxY, width, height);\r\n    const topRight = box2DToCanvas(maxX, maxY, width, height);\r\n    const bottomLeft = box2DToCanvas(minX, minY, width, height);\r\n    const bottomRight = box2DToCanvas(maxX, minY, width, height);\r\n    const centerX = (topLeft.x + topRight.x) / 2;\r\n    const centerY = (topLeft.y + bottomLeft.y) / 2;\r\n    \r\n    // 转换鼠标位置到Canvas坐标\r\n    const mouseCanvas = box2DToCanvas(x, y, width, height);\r\n    \r\n    // 8个缩放手柄的位置及其类型\r\n    const handles: Array<{ x: number; y: number; type: 'tl' | 'tr' | 'br' | 'bl' | 'top' | 'right' | 'bottom' | 'left' }> = [\r\n      { x: topLeft.x, y: topLeft.y, type: 'tl' },\r\n      { x: centerX, y: topLeft.y, type: 'top' },\r\n      { x: topRight.x, y: topRight.y, type: 'tr' },\r\n      { x: topRight.x, y: centerY, type: 'right' },\r\n      { x: bottomRight.x, y: bottomRight.y, type: 'br' },\r\n      { x: centerX, y: bottomRight.y, type: 'bottom' },\r\n      { x: bottomLeft.x, y: bottomLeft.y, type: 'bl' },\r\n      { x: bottomLeft.x, y: centerY, type: 'left' }\r\n    ];\r\n    \r\n    // 检测点击（带5像素容差）\r\n    const hitRadius = TRANSFORM_HANDLE_SIZE + 5;\r\n    \r\n    for (const handle of handles) {\r\n      const dist = Math.sqrt(\r\n        Math.pow(mouseCanvas.x - handle.x, 2) + \r\n        Math.pow(mouseCanvas.y - handle.y, 2)\r\n      );\r\n      \r\n      if (dist <= hitRadius) {\r\n        return handle.type;\r\n      }\r\n    }\r\n    \r\n    return null;\r\n  }\r\n\r\n  // 检测点击的是哪个锚点（x, y 为 Box2D 坐标）\r\n  private hitTestAnchor(x: number, y: number): { joint: Joint; isAnchorA: boolean } | null {\r\n    // 将像素阈值转换为 Box2D 单位（米）\r\n    const hitRadius = 10 / PPM; // 10 像素的点击范围\r\n    \r\n    for (let i = this.objects.length - 1; i >= 0; i--) {\r\n      const obj = this.objects[i];\r\n      \r\n      if (obj.type === 'joint') {\r\n        const joint = obj as Joint;\r\n        const bodyA = this.objects.find(o => o.id === joint.bodyAId) as Body;\r\n        const bodyB = this.objects.find(o => o.id === joint.bodyBId) as Body;\r\n        \r\n        if (bodyA && bodyB) {\r\n          const anchorAWorld = localToWorld(\r\n            joint.anchorALocal.x, joint.anchorALocal.y,\r\n            bodyA.position.x, bodyA.position.y, bodyA.angle\r\n          );\r\n          const anchorBWorld = localToWorld(\r\n            joint.anchorBLocal.x, joint.anchorBLocal.y,\r\n            bodyB.position.x, bodyB.position.y, bodyB.angle\r\n          );\r\n          \r\n          // 优先检测锚点 A\r\n          if (distance(x, y, anchorAWorld.x, anchorAWorld.y) <= hitRadius) {\r\n            return { joint, isAnchorA: true };\r\n          }\r\n          // 然后检测锚点 B\r\n          if (distance(x, y, anchorBWorld.x, anchorBWorld.y) <= hitRadius) {\r\n            return { joint, isAnchorA: false };\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  // ==================== 顶点编辑模式 ====================\r\n  \r\n  private enterVertexEditMode(body: Body): void {\r\n    this.isEditingVertices = true;\r\n    this.editingBody = body;\r\n    this.selectedObject = body;\r\n    console.log(`进入顶点编辑模式: ${body.id}`);\r\n    this.updateStatus('顶点编辑模式', '拖动顶点修改位置', '双击或点击空白处退出');\r\n    this.render();\r\n  }\r\n  \r\n  private exitVertexEditMode(): void {\r\n    this.isEditingVertices = false;\r\n    this.editingBody = null;\r\n    this.draggedVertexIndex = -1;\r\n    this.vertexDragStart = null;\r\n    console.log('退出顶点编辑模式');\r\n    this.updateStatus('退出顶点编辑模式');\r\n    this.render();\r\n  }\r\n  \r\n  private hitTestVertex(body: Body, worldX: number, worldY: number): number {\r\n    if (!body.vertices) return -1;\r\n    \r\n    const hitRadius = 0.3; // 顶点点击半径（米）\r\n    \r\n    for (let i = 0; i < body.vertices.length; i++) {\r\n      const vertex = body.vertices[i];\r\n      // 将本地顶点坐标转换为世界坐标\r\n      const cos = Math.cos(body.angle);\r\n      const sin = Math.sin(body.angle);\r\n      const worldVx = body.position.x + vertex.x * cos - vertex.y * sin;\r\n      const worldVy = body.position.y + vertex.x * sin + vertex.y * cos;\r\n      \r\n      const dist = Math.sqrt(\r\n        (worldX - worldVx) ** 2 + (worldY - worldVy) ** 2\r\n      );\r\n      \r\n      if (dist <= hitRadius) {\r\n        return i;\r\n      }\r\n    }\r\n    \r\n    return -1;\r\n  }\r\n\r\n  // 处理缩放操作\r\n  private handleScaling(body: Body, currentPos: Vector2): void {\r\n    if (!this.scaleHandle) return;\r\n    \r\n    if (body.shapeType === 'box') {\r\n      this.scaleBox(body, currentPos);\r\n    } else if (body.shapeType === 'circle') {\r\n      this.scaleCircle(body, currentPos);\r\n    } else if (body.shapeType === 'polygon') {\r\n      this.scalePolygon(body, currentPos);\r\n    }\r\n  }\r\n\r\n  // 缩放矩形 - 基于固定点的算法\r\n  private scaleBox(body: Body, currentPos: Vector2): void {\r\n    if (!body.width || !body.height || !this.scaleHandle) return;\r\n    \r\n    const handle = this.scaleHandle;\r\n    // 使用初始角度（缩放开始时的角度）\r\n    const cos = Math.cos(this.scaleStartAngle);\r\n    const sin = Math.sin(this.scaleStartAngle);\r\n    \r\n    // 计算初始状态下的四个角点（物体局部坐标）\r\n    const halfW = this.scaleStartWidth / 2;\r\n    const halfH = this.scaleStartHeight / 2;\r\n    \r\n    // 确定固定点（与拖动手柄相对的点，在物体局部坐标系中）\r\n    let fixedLocalX = 0;\r\n    let fixedLocalY = 0;\r\n    \r\n    // 确定缩放方向系数\r\n    let scaleXDirection = 0; // -1: 左侧缩放, +1: 右侧缩放, 0: 不缩放X\r\n    let scaleYDirection = 0; // -1: 下侧缩放, +1: 上侧缩放, 0: 不缩放Y\r\n    \r\n    switch (handle) {\r\n      case 'tl': // 左上角 -> 固定右下角\r\n        fixedLocalX = halfW;\r\n        fixedLocalY = -halfH;\r\n        scaleXDirection = -1;\r\n        scaleYDirection = 1;\r\n        break;\r\n      case 'tr': // 右上角 -> 固定左下角\r\n        fixedLocalX = -halfW;\r\n        fixedLocalY = -halfH;\r\n        scaleXDirection = 1;\r\n        scaleYDirection = 1;\r\n        break;\r\n      case 'br': // 右下角 -> 固定左上角\r\n        fixedLocalX = -halfW;\r\n        fixedLocalY = halfH;\r\n        scaleXDirection = 1;\r\n        scaleYDirection = -1;\r\n        break;\r\n      case 'bl': // 左下角 -> 固定右上角\r\n        fixedLocalX = halfW;\r\n        fixedLocalY = halfH;\r\n        scaleXDirection = -1;\r\n        scaleYDirection = -1;\r\n        break;\r\n      case 'top': // 上边中点 -> 固定下边\r\n        fixedLocalX = 0;\r\n        fixedLocalY = -halfH;\r\n        scaleXDirection = 0;\r\n        scaleYDirection = 1;\r\n        break;\r\n      case 'bottom': // 下边中点 -> 固定上边\r\n        fixedLocalX = 0;\r\n        fixedLocalY = halfH;\r\n        scaleXDirection = 0;\r\n        scaleYDirection = -1;\r\n        break;\r\n      case 'left': // 左边中点 -> 固定右边\r\n        fixedLocalX = halfW;\r\n        fixedLocalY = 0;\r\n        scaleXDirection = -1;\r\n        scaleYDirection = 0;\r\n        break;\r\n      case 'right': // 右边中点 -> 固定左边\r\n        fixedLocalX = -halfW;\r\n        fixedLocalY = 0;\r\n        scaleXDirection = 1;\r\n        scaleYDirection = 0;\r\n        break;\r\n    }\r\n    \r\n    // 计算固定点的世界坐标（基于初始位置和初始角度）\r\n    const fixedWorldX = this.scaleStartBodyPos.x + fixedLocalX * cos - fixedLocalY * sin;\r\n    const fixedWorldY = this.scaleStartBodyPos.y + fixedLocalX * sin + fixedLocalY * cos;\r\n    \r\n    // 计算鼠标位置相对于固定点的向量（世界坐标）\r\n    const fixedToMouseX = currentPos.x - fixedWorldX;\r\n    const fixedToMouseY = currentPos.y - fixedWorldY;\r\n    \r\n    // 转换到物体局部坐标系（注意：这里转换的是向量，不是点）\r\n    const localFixedToMouseX = fixedToMouseX * cos + fixedToMouseY * sin;\r\n    const localFixedToMouseY = -fixedToMouseX * sin + fixedToMouseY * cos;\r\n    \r\n    // 计算新尺寸\r\n    let newWidth = this.scaleStartWidth;\r\n    let newHeight = this.scaleStartHeight;\r\n    \r\n    if (scaleXDirection !== 0) {\r\n      // 缩放宽度：固定点到鼠标的距离就是半宽\r\n      // scaleXDirection 指示了缩放方向\r\n      const halfWidth = localFixedToMouseX * scaleXDirection;\r\n      newWidth = Math.max(MIN_SHAPE_WIDTH, halfWidth * 2);\r\n    }\r\n    \r\n    if (scaleYDirection !== 0) {\r\n      // 缩放高度：固定点到鼠标的距离就是半高\r\n      // scaleYDirection 指示了缩放方向\r\n      const halfHeight = localFixedToMouseY * scaleYDirection;\r\n      newHeight = Math.max(MIN_SHAPE_HEIGHT, halfHeight * 2);\r\n    }\r\n    \r\n    // 更新尺寸\r\n    body.width = newWidth;\r\n    body.height = newHeight;\r\n    \r\n    // 计算新的中心位置（保持固定点的世界坐标不变）\r\n    // 固定点在新物体局部坐标系中的位置\r\n    const newHalfW = newWidth / 2;\r\n    const newHalfH = newHeight / 2;\r\n    \r\n    let newFixedLocalX = 0;\r\n    let newFixedLocalY = 0;\r\n    \r\n    // 根据手柄类型确定固定点在新物体中的局部坐标\r\n    switch (handle) {\r\n      case 'tl': // 左上角 -> 固定右下角\r\n        newFixedLocalX = newHalfW;\r\n        newFixedLocalY = -newHalfH;\r\n        break;\r\n      case 'tr': // 右上角 -> 固定左下角\r\n        newFixedLocalX = -newHalfW;\r\n        newFixedLocalY = -newHalfH;\r\n        break;\r\n      case 'br': // 右下角 -> 固定左上角\r\n        newFixedLocalX = -newHalfW;\r\n        newFixedLocalY = newHalfH;\r\n        break;\r\n      case 'bl': // 左下角 -> 固定右上角\r\n        newFixedLocalX = newHalfW;\r\n        newFixedLocalY = newHalfH;\r\n        break;\r\n      case 'top': // 上边中点 -> 固定下边\r\n        newFixedLocalX = 0;\r\n        newFixedLocalY = -newHalfH;\r\n        break;\r\n      case 'bottom': // 下边中点 -> 固定上边\r\n        newFixedLocalX = 0;\r\n        newFixedLocalY = newHalfH;\r\n        break;\r\n      case 'left': // 左边中点 -> 固定右边\r\n        newFixedLocalX = newHalfW;\r\n        newFixedLocalY = 0;\r\n        break;\r\n      case 'right': // 右边中点 -> 固定左边\r\n        newFixedLocalX = -newHalfW;\r\n        newFixedLocalY = 0;\r\n        break;\r\n    }\r\n    \r\n    // 新的物体中心位置 = 固定点世界坐标 - 固定点局部坐标转到世界坐标\r\n    body.position.x = fixedWorldX - (newFixedLocalX * cos - newFixedLocalY * sin);\r\n    body.position.y = fixedWorldY - (newFixedLocalX * sin + newFixedLocalY * cos);\r\n  }\r\n\r\n  // 缩放圆形 - 基于固定中心的算法\r\n  private scaleCircle(body: Body, currentPos: Vector2): void {\r\n    if (!body.radius || !this.scaleHandle) return;\r\n    \r\n    // 圆形缩放：计算当前鼠标位置到圆心的距离作为新半径\r\n    const dx = currentPos.x - this.scaleStartBodyPos.x;\r\n    const dy = currentPos.y - this.scaleStartBodyPos.y;\r\n    const distanceToCenter = Math.sqrt(dx * dx + dy * dy);\r\n    \r\n    // 应用半径变化\r\n    const newRadius = Math.max(MIN_SHAPE_RADIUS, distanceToCenter);\r\n    body.radius = newRadius;\r\n    \r\n    // 圆形不需要改变位置\r\n  }\r\n\r\n  // 缩放多边形 - 基于固定点的算法\r\n  private scalePolygon(body: Body, currentPos: Vector2): void {\r\n    if (!body.vertices || this.scaleStartVertices.length === 0 || !this.scaleHandle) return;\r\n    \r\n    const handle = this.scaleHandle;\r\n    // 使用初始角度（缩放开始时的角度）\r\n    const cos = Math.cos(this.scaleStartAngle);\r\n    const sin = Math.sin(this.scaleStartAngle);\r\n    \r\n    // 计算初始包围框（局部坐标）\r\n    const minX = Math.min(...this.scaleStartVertices.map(v => v.x));\r\n    const maxX = Math.max(...this.scaleStartVertices.map(v => v.x));\r\n    const minY = Math.min(...this.scaleStartVertices.map(v => v.y));\r\n    const maxY = Math.max(...this.scaleStartVertices.map(v => v.y));\r\n    const centerX = (minX + maxX) / 2;\r\n    const centerY = (minY + maxY) / 2;\r\n    const startWidth = maxX - minX;\r\n    const startHeight = maxY - minY;\r\n    \r\n    // 确定固定点（局部坐标）\r\n    let fixedLocalX = 0;\r\n    let fixedLocalY = 0;\r\n    let scaleXDirection = 0;\r\n    let scaleYDirection = 0;\r\n    \r\n    switch (handle) {\r\n      case 'tl':\r\n        fixedLocalX = maxX;\r\n        fixedLocalY = minY;\r\n        scaleXDirection = -1;\r\n        scaleYDirection = 1;\r\n        break;\r\n      case 'tr':\r\n        fixedLocalX = minX;\r\n        fixedLocalY = minY;\r\n        scaleXDirection = 1;\r\n        scaleYDirection = 1;\r\n        break;\r\n      case 'br':\r\n        fixedLocalX = minX;\r\n        fixedLocalY = maxY;\r\n        scaleXDirection = 1;\r\n        scaleYDirection = -1;\r\n        break;\r\n      case 'bl':\r\n        fixedLocalX = maxX;\r\n        fixedLocalY = maxY;\r\n        scaleXDirection = -1;\r\n        scaleYDirection = -1;\r\n        break;\r\n      case 'top':\r\n        fixedLocalX = centerX;\r\n        fixedLocalY = minY;\r\n        scaleXDirection = 0;\r\n        scaleYDirection = 1;\r\n        break;\r\n      case 'bottom':\r\n        fixedLocalX = centerX;\r\n        fixedLocalY = maxY;\r\n        scaleXDirection = 0;\r\n        scaleYDirection = -1;\r\n        break;\r\n      case 'left':\r\n        fixedLocalX = maxX;\r\n        fixedLocalY = centerY;\r\n        scaleXDirection = -1;\r\n        scaleYDirection = 0;\r\n        break;\r\n      case 'right':\r\n        fixedLocalX = minX;\r\n        fixedLocalY = centerY;\r\n        scaleXDirection = 1;\r\n        scaleYDirection = 0;\r\n        break;\r\n    }\r\n    \r\n    // 计算固定点的世界坐标\r\n    const fixedWorldX = this.scaleStartBodyPos.x + fixedLocalX * cos - fixedLocalY * sin;\r\n    const fixedWorldY = this.scaleStartBodyPos.y + fixedLocalX * sin + fixedLocalY * cos;\r\n    \r\n    // 计算鼠标相对固定点的向量（世界坐标）\r\n    const fixedToMouseX = currentPos.x - fixedWorldX;\r\n    const fixedToMouseY = currentPos.y - fixedWorldY;\r\n    \r\n    // 转换到局部坐标系\r\n    const localFixedToMouseX = fixedToMouseX * cos + fixedToMouseY * sin;\r\n    const localFixedToMouseY = -fixedToMouseX * sin + fixedToMouseY * cos;\r\n    \r\n    // 计算缩放因子\r\n    let scaleX = 1;\r\n    let scaleY = 1;\r\n    \r\n    if (scaleXDirection !== 0 && startWidth > 0) {\r\n      // 计算新宽度：固定点到鼠标的距离 * 方向 * 2（因为从中心到边缘）\r\n      const halfWidth = localFixedToMouseX * scaleXDirection;\r\n      const newWidth = Math.max(0.1, halfWidth * 2);\r\n      scaleX = newWidth / startWidth;\r\n    }\r\n    \r\n    if (scaleYDirection !== 0 && startHeight > 0) {\r\n      // 计算新高度：固定点到鼠标的距离 * 方向 * 2\r\n      const halfHeight = localFixedToMouseY * scaleYDirection;\r\n      const newHeight = Math.max(0.1, halfHeight * 2);\r\n      scaleY = newHeight / startHeight;\r\n    }\r\n    \r\n    // 应用缩放到所有顶点（相对于固定点）\r\n    body.vertices = this.scaleStartVertices.map(v => {\r\n      // 计算顶点相对于固定点的位置\r\n      const relativeX = v.x - fixedLocalX;\r\n      const relativeY = v.y - fixedLocalY;\r\n      \r\n      // 应用缩放\r\n      const scaledRelativeX = relativeX * scaleX;\r\n      const scaledRelativeY = relativeY * scaleY;\r\n      \r\n      // 转换回相对于物体中心的坐标\r\n      return {\r\n        x: fixedLocalX + scaledRelativeX,\r\n        y: fixedLocalY + scaledRelativeY\r\n      };\r\n    });\r\n    \r\n    // 计算新的包围框中心\r\n    const newMinX = Math.min(...body.vertices.map(v => v.x));\r\n    const newMaxX = Math.max(...body.vertices.map(v => v.x));\r\n    const newMinY = Math.min(...body.vertices.map(v => v.y));\r\n    const newMaxY = Math.max(...body.vertices.map(v => v.y));\r\n    const newCenterX = (newMinX + newMaxX) / 2;\r\n    const newCenterY = (newMinY + newMaxY) / 2;\r\n    \r\n    // 调整所有顶点，使物体中心回到原点\r\n    const offsetX = newCenterX;\r\n    const offsetY = newCenterY;\r\n    \r\n    body.vertices = body.vertices.map(v => ({\r\n      x: v.x - offsetX,\r\n      y: v.y - offsetY\r\n    }));\r\n    \r\n    // 更新物体位置（补偿中心偏移）\r\n    body.position.x = this.scaleStartBodyPos.x + offsetX * cos - offsetY * sin;\r\n    body.position.y = this.scaleStartBodyPos.y + offsetX * sin + offsetY * cos;\r\n  }\r\n\r\n  private deleteSelected(): void {\r\n    if (this.selectedObject) {\r\n      const objToDelete = this.selectedObject;\r\n      const cmd = new DeleteObjectCommand(\r\n        this.objects,\r\n        objToDelete,\r\n        () => {\r\n          this.selectedObject = null;\r\n          this.updatePropertyPanel();\r\n          this.render();\r\n        }\r\n      );\r\n      this.commandHistory.execute(cmd);\r\n      \r\n      this.updateUndoRedoButtons();\r\n    }\r\n  }\r\n\r\n  private render(): void {\r\n    const ctx = this.ctx;\r\n    const width = this.canvas.width;\r\n    const height = this.canvas.height;\r\n\r\n    // 清空画布\r\n    ctx.clearRect(0, 0, width, height);\r\n\r\n    // 绘制网格（Box2D 坐标系，每格 GRID_SIZE 米）\r\n    ctx.strokeStyle = COLOR_GRID;\r\n    ctx.lineWidth = LINE_WIDTH_GRID;\r\n    \r\n    // 计算可视范围的 Box2D 坐标（Y 向上为正）\r\n    const worldMinX = ORIGIN_OFFSET_X - (width / 2) / PPM;\r\n    const worldMaxX = ORIGIN_OFFSET_X + (width / 2) / PPM;\r\n    const worldMinY = ORIGIN_OFFSET_Y - (height / 2) / PPM;  // Y 向上，Canvas 下方对应负值\r\n    const worldMaxY = ORIGIN_OFFSET_Y + (height / 2) / PPM;  // Y 向上，Canvas 上方对应正值\r\n    \r\n    // 绘制垂直网格线\r\n    for (let x = Math.floor(worldMinX / GRID_SIZE) * GRID_SIZE; x <= worldMaxX; x += GRID_SIZE) {\r\n      const canvasPos = box2DToCanvas(x, 0, width, height);\r\n      ctx.beginPath();\r\n      ctx.moveTo(canvasPos.x, 0);\r\n      ctx.lineTo(canvasPos.x, height);\r\n      ctx.stroke();\r\n    }\r\n    \r\n    // 绘制水平网格线\r\n    for (let y = Math.floor(worldMinY / GRID_SIZE) * GRID_SIZE; y <= worldMaxY; y += GRID_SIZE) {\r\n      const canvasPos = box2DToCanvas(0, y, width, height);\r\n      ctx.beginPath();\r\n      ctx.moveTo(0, canvasPos.y);\r\n      ctx.lineTo(width, canvasPos.y);\r\n      ctx.stroke();\r\n    }\r\n\r\n    // 绘制坐标轴标记（Box2D 坐标，米）\r\n    ctx.fillStyle = COLOR_GRID_TEXT;\r\n    ctx.font = '10px monospace';\r\n    \r\n    // X 轴标记（每 5米）\r\n    for (let x = Math.ceil(worldMinX); x <= Math.floor(worldMaxX); x++) {\r\n      if (x % 5 === 0) {\r\n        const canvasPos = box2DToCanvas(x, worldMinY, width, height);\r\n        ctx.fillText(`${x}m`, canvasPos.x + 2, height - 5);\r\n      }\r\n    }\r\n    \r\n    // Y 轴标记（每 5米）\r\n    for (let y = Math.ceil(worldMinY); y <= Math.floor(worldMaxY); y++) {\r\n      if (y % 5 === 0) {\r\n        const canvasPos = box2DToCanvas(worldMinX, y, width, height);\r\n        ctx.fillText(`${y}m`, 5, canvasPos.y - 2);\r\n      }\r\n    }\r\n    \r\n    // 绘制原点标记（红色十字）\r\n    const origin = box2DToCanvas(0, 0, width, height);\r\n    ctx.strokeStyle = COLOR_ORIGIN;\r\n    ctx.lineWidth = LINE_WIDTH_ORIGIN;\r\n    ctx.beginPath();\r\n    ctx.moveTo(origin.x - 10, origin.y);\r\n    ctx.lineTo(origin.x + 10, origin.y);\r\n    ctx.moveTo(origin.x, origin.y - 10);\r\n    ctx.lineTo(origin.x, origin.y + 10);\r\n    ctx.stroke();\r\n    ctx.fillStyle = COLOR_ORIGIN;\r\n    ctx.font = '11px monospace';\r\n    ctx.fillText('(0,0)', origin.x + 12, origin.y - 5);\r\n\r\n    // 绘制对象\r\n    this.objects.forEach(obj => {\r\n      if (obj.type === 'body') {\r\n        this.renderBody(obj);\r\n      } else {\r\n        this.renderJoint(obj);\r\n      }\r\n    });\r\n\r\n    // 绘制正在创建的对象\r\n    if (this.drawingObject) {\r\n      this.renderBody(this.drawingObject);\r\n    }\r\n\r\n    // 绘制多边形顶点（Box2D 坐标）\r\n    if (this.polygonVertices.length > 0) {\r\n      ctx.strokeStyle = COLOR_SELECTED;\r\n      ctx.fillStyle = COLOR_SELECTED;\r\n      ctx.lineWidth = LINE_WIDTH_SELECTED;\r\n      \r\n      // 绘制已有的边\r\n      ctx.beginPath();\r\n      const firstCanvas = box2DToCanvas(this.polygonVertices[0].x, this.polygonVertices[0].y, width, height);\r\n      ctx.moveTo(firstCanvas.x, firstCanvas.y);\r\n      for (let i = 1; i < this.polygonVertices.length; i++) {\r\n        const canvasPos = box2DToCanvas(this.polygonVertices[i].x, this.polygonVertices[i].y, width, height);\r\n        ctx.lineTo(canvasPos.x, canvasPos.y);\r\n      }\r\n      ctx.stroke();\r\n\r\n      // 绘制所有顶点\r\n      this.polygonVertices.forEach((v, index) => {\r\n        const canvasPos = box2DToCanvas(v.x, v.y, width, height);\r\n        ctx.beginPath();\r\n        \r\n        // 起始点用特殊样式（更大，绿色边框）\r\n        if (index === 0 && this.polygonVertices.length >= 3) {\r\n          ctx.fillStyle = COLOR_SELECTED;\r\n          ctx.strokeStyle = COLOR_HIGHLIGHT;\r\n          ctx.lineWidth = LINE_WIDTH_VERTEX_EDITING;\r\n          ctx.arc(canvasPos.x, canvasPos.y, VERTEX_RADIUS_HOVER, 0, Math.PI * 2);\r\n          ctx.fill();\r\n          ctx.stroke();\r\n          \r\n          // 绘制提示文字\r\n          ctx.fillStyle = COLOR_HIGHLIGHT;\r\n          ctx.font = 'bold 11px monospace';\r\n          ctx.fillText('点击闭合', canvasPos.x + 12, canvasPos.y - 8);\r\n        } else {\r\n          ctx.fillStyle = COLOR_SELECTED;\r\n          ctx.arc(canvasPos.x, canvasPos.y, VERTEX_RADIUS_NORMAL, 0, Math.PI * 2);\r\n          ctx.fill();\r\n        }\r\n      });\r\n      \r\n      // 从最后一个顶点到鼠标位置画虚线\r\n      if (this.polygonVertices.length > 0) {\r\n        ctx.setLineDash([5, 5]);\r\n        ctx.strokeStyle = COLOR_SELECTED;\r\n        ctx.lineWidth = LINE_WIDTH_DRAWING;\r\n        ctx.beginPath();\r\n        const lastVertex = this.polygonVertices[this.polygonVertices.length - 1];\r\n        const lastCanvas = box2DToCanvas(lastVertex.x, lastVertex.y, width, height);\r\n        const mouseCanvas = box2DToCanvas(this.mousePos.x, this.mousePos.y, width, height);\r\n        ctx.moveTo(lastCanvas.x, lastCanvas.y);\r\n        ctx.lineTo(mouseCanvas.x, mouseCanvas.y);\r\n        ctx.stroke();\r\n        ctx.setLineDash([]);\r\n        \r\n        // 如果鼠标靠近起始点，显示闭合预览\r\n        if (this.polygonVertices.length >= 3) {\r\n          const firstVertex = this.polygonVertices[0];\r\n          const distance = Math.sqrt(\r\n            Math.pow(this.mousePos.x - firstVertex.x, 2) + \r\n            Math.pow(this.mousePos.y - firstVertex.y, 2)\r\n          );\r\n          \r\n          if (distance < 0.5) {\r\n            // 绘制闭合边的预览（虚线）\r\n            ctx.setLineDash([5, 5]);\r\n            ctx.strokeStyle = COLOR_HIGHLIGHT;\r\n            ctx.lineWidth = LINE_WIDTH_VERTEX_HIGHLIGHT;\r\n            ctx.beginPath();\r\n            ctx.moveTo(lastCanvas.x, lastCanvas.y);\r\n            ctx.lineTo(firstCanvas.x, firstCanvas.y);\r\n            ctx.stroke();\r\n            ctx.setLineDash([]);\r\n          }\r\n        }\r\n      }\r\n      \r\n      // 显示顶点数量提示\r\n      if (this.polygonVertices.length > 0) {\r\n        const maxVertices = MAX_POLYGON_VERTICES;\r\n        const text = this.polygonVertices.length >= maxVertices\r\n          ? `顶点: ${this.polygonVertices.length}/${maxVertices} (已达物理引擎限制，双击或点击起始点完成)`\r\n          : `顶点: ${this.polygonVertices.length}/${maxVertices} (至少3个，双击或点击起始点完成)`;\r\n        ctx.fillStyle = this.polygonVertices.length >= maxVertices ? COLOR_DELETE_HOVER : COLOR_TEXT_DARK;\r\n        ctx.font = 'bold 12px monospace';\r\n        ctx.fillText(text, 10, height - 10);\r\n      }\r\n    }\r\n    \r\n    // 绘制鼠标十字线（仅在创建模式下）\r\n    if (this.currentTool !== 'select' && !this.isDragging) {\r\n      const mouseCanvas = box2DToCanvas(this.mousePos.x, this.mousePos.y, width, height);\r\n      \r\n      ctx.strokeStyle = COLOR_DRAWING;\r\n      ctx.lineWidth = LINE_WIDTH_DRAWING;\r\n      ctx.setLineDash([3, 3]);\r\n      \r\n      // 垂直线\r\n      ctx.beginPath();\r\n      ctx.moveTo(mouseCanvas.x, 0);\r\n      ctx.lineTo(mouseCanvas.x, height);\r\n      ctx.stroke();\r\n      \r\n      // 水平线\r\n      ctx.beginPath();\r\n      ctx.moveTo(0, mouseCanvas.y);\r\n      ctx.lineTo(width, mouseCanvas.y);\r\n      ctx.stroke();\r\n      \r\n      ctx.setLineDash([]);\r\n      \r\n      // 鼠标位置标记\r\n      ctx.fillStyle = COLOR_DELETE_HOVER;\r\n      ctx.beginPath();\r\n      ctx.arc(mouseCanvas.x, mouseCanvas.y, DELETE_HOVER_RADIUS, 0, Math.PI * 2);\r\n      ctx.fill();\r\n      \r\n      // 显示坐标\r\n      ctx.fillStyle = COLOR_TEXT;\r\n      ctx.font = '11px monospace';\r\n      ctx.fillText(`(${this.mousePos.x.toFixed(2)}m, ${this.mousePos.y.toFixed(2)}m)`, \r\n                   mouseCanvas.x + 10, mouseCanvas.y - 10);\r\n    }\r\n    \r\n    // 绘制关节工具的视觉反馈\r\n    if (this.currentTool === 'revoluteJoint' && this.jointBodyA && this.jointAnchorA) {\r\n      const width = this.canvas.width;\r\n      const height = this.canvas.height;\r\n      \r\n      // 高亮第一个选中的物体\r\n      ctx.save();\r\n      ctx.strokeStyle = COLOR_JOINT;\r\n      ctx.lineWidth = LINE_WIDTH_JOINT;\r\n      ctx.setLineDash([5, 5]);\r\n      \r\n      const bodyCenter = box2DToCanvas(this.jointBodyA.position.x, this.jointBodyA.position.y, width, height);\r\n      if (this.jointBodyA.shapeType === 'box' && this.jointBodyA.width && this.jointBodyA.height) {\r\n        const w = this.jointBodyA.width * PPM;\r\n        const h = this.jointBodyA.height * PPM;\r\n        ctx.strokeRect(bodyCenter.x - w / 2 - 5, bodyCenter.y - h / 2 - 5, w + 10, h + 10);\r\n      } else if (this.jointBodyA.shapeType === 'circle' && this.jointBodyA.radius) {\r\n        const r = this.jointBodyA.radius * PPM;\r\n        ctx.beginPath();\r\n        ctx.arc(bodyCenter.x, bodyCenter.y, r + 5, 0, Math.PI * 2);\r\n        ctx.stroke();\r\n      }\r\n      \r\n      ctx.setLineDash([]);\r\n      \r\n      // 绘制第一个锚点\r\n      const anchorA = box2DToCanvas(this.jointAnchorA.x, this.jointAnchorA.y, width, height);\r\n      ctx.fillStyle = COLOR_JOINT;\r\n      ctx.beginPath();\r\n      ctx.arc(anchorA.x, anchorA.y, JOINT_ANCHOR_RADIUS, 0, Math.PI * 2);\r\n      ctx.fill();\r\n      \r\n      // 从锚点到鼠标位置画虚线\r\n      const mouseCanvas = box2DToCanvas(this.mousePos.x, this.mousePos.y, width, height);\r\n      ctx.strokeStyle = COLOR_JOINT;\r\n      ctx.lineWidth = LINE_WIDTH_SELECTED;\r\n      ctx.setLineDash([5, 5]);\r\n      ctx.beginPath();\r\n      ctx.moveTo(anchorA.x, anchorA.y);\r\n      ctx.lineTo(mouseCanvas.x, mouseCanvas.y);\r\n      ctx.stroke();\r\n      \r\n      ctx.restore();\r\n    }\r\n    \r\n    // 绘制旋转手柄和缩放手柄（选中物体且为Body类型时）\r\n    if (this.selectedObject && this.selectedObject.type === 'body' && !this.isEditingVertices) {\r\n      this.renderRotateHandle(this.selectedObject as Body);\r\n      this.renderScaleHandles(this.selectedObject as Body);\r\n    }\r\n  }\r\n\r\n  // 渲染旋转手柄\r\n  private renderRotateHandle(body: Body): void {\r\n    const ctx = this.ctx;\r\n    const width = this.canvas.width;\r\n    const height = this.canvas.height;\r\n    \r\n    // 计算物体的包围框（世界坐标）\r\n    let minX = 0, maxX = 0, minY = 0, maxY = 0;\r\n    \r\n    if (body.shapeType === 'box' && body.width && body.height) {\r\n      const halfW = body.width / 2;\r\n      const halfH = body.height / 2;\r\n      const cos = Math.cos(body.angle);\r\n      const sin = Math.sin(body.angle);\r\n      \r\n      // 计算四个角点的世界坐标\r\n      const corners = [\r\n        { x: -halfW, y: -halfH },\r\n        { x: halfW, y: -halfH },\r\n        { x: halfW, y: halfH },\r\n        { x: -halfW, y: halfH }\r\n      ];\r\n      \r\n      const worldCorners = corners.map(c => ({\r\n        x: body.position.x + c.x * cos - c.y * sin,\r\n        y: body.position.y + c.x * sin + c.y * cos\r\n      }));\r\n      \r\n      minX = Math.min(...worldCorners.map(c => c.x));\r\n      maxX = Math.max(...worldCorners.map(c => c.x));\r\n      minY = Math.min(...worldCorners.map(c => c.y));\r\n      maxY = Math.max(...worldCorners.map(c => c.y));\r\n    } else if (body.shapeType === 'circle' && body.radius) {\r\n      const r = body.radius;\r\n      minX = body.position.x - r;\r\n      maxX = body.position.x + r;\r\n      minY = body.position.y - r;\r\n      maxY = body.position.y + r;\r\n    } else if (body.shapeType === 'polygon' && body.vertices) {\r\n      const cos = Math.cos(body.angle);\r\n      const sin = Math.sin(body.angle);\r\n      \r\n      const worldVertices = body.vertices.map(v => ({\r\n        x: body.position.x + v.x * cos - v.y * sin,\r\n        y: body.position.y + v.x * sin + v.y * cos\r\n      }));\r\n      \r\n      minX = Math.min(...worldVertices.map(v => v.x));\r\n      maxX = Math.max(...worldVertices.map(v => v.x));\r\n      minY = Math.min(...worldVertices.map(v => v.y));\r\n      maxY = Math.max(...worldVertices.map(v => v.y));\r\n    }\r\n    \r\n    // 转换到Canvas坐标\r\n    const topLeft = box2DToCanvas(minX, maxY, width, height);\r\n    const bottomRight = box2DToCanvas(maxX, minY, width, height);\r\n    \r\n    // 绘制包围框（虚线）\r\n    ctx.save();\r\n    ctx.strokeStyle = COLOR_SELECTED;\r\n    ctx.lineWidth = 1;\r\n    ctx.setLineDash([5, 5]);\r\n    ctx.strokeRect(\r\n      topLeft.x,\r\n      topLeft.y,\r\n      bottomRight.x - topLeft.x,\r\n      bottomRight.y - topLeft.y\r\n    );\r\n    ctx.setLineDash([]);\r\n    \r\n    // 计算旋转手柄位置（在包围框顶部中心上方）\r\n    const boxCenterX = (topLeft.x + bottomRight.x) / 2;\r\n    const boxTop = topLeft.y;\r\n    const handleY = boxTop - TRANSFORM_ROTATE_HANDLE_OFFSET;\r\n    \r\n    // 绘制连接线\r\n    ctx.strokeStyle = COLOR_SELECTED;\r\n    ctx.lineWidth = 1;\r\n    ctx.beginPath();\r\n    ctx.moveTo(boxCenterX, boxTop);\r\n    ctx.lineTo(boxCenterX, handleY);\r\n    ctx.stroke();\r\n    \r\n    // 绘制旋转手柄（红色圆圈）\r\n    ctx.fillStyle = TRANSFORM_ROTATE_HANDLE_COLOR;\r\n    ctx.strokeStyle = '#fff';\r\n    ctx.lineWidth = 2;\r\n    ctx.beginPath();\r\n    ctx.arc(boxCenterX, handleY, TRANSFORM_ROTATE_HANDLE_RADIUS, 0, Math.PI * 2);\r\n    ctx.fill();\r\n    ctx.stroke();\r\n    \r\n    // 绘制旋转图标（简单的箭头）\r\n    ctx.strokeStyle = '#fff';\r\n    ctx.lineWidth = 1.5;\r\n    ctx.beginPath();\r\n    ctx.arc(boxCenterX, handleY, 3, 0.2, Math.PI * 1.8);\r\n    ctx.stroke();\r\n    // 箭头\r\n    ctx.beginPath();\r\n    ctx.moveTo(boxCenterX - 2.5, handleY - 2);\r\n    ctx.lineTo(boxCenterX - 1, handleY - 3.5);\r\n    ctx.lineTo(boxCenterX - 2.5, handleY - 2.5);\r\n    ctx.fill();\r\n    \r\n    ctx.restore();\r\n  }\r\n\r\n  // 渲染缩放手柄（8个方向）\r\n  private renderScaleHandles(body: Body): void {\r\n    const ctx = this.ctx;\r\n    const width = this.canvas.width;\r\n    const height = this.canvas.height;\r\n    \r\n    // 计算物体的包围框（世界坐标）\r\n    let minX = 0, maxX = 0, minY = 0, maxY = 0;\r\n    \r\n    if (body.shapeType === 'box' && body.width && body.height) {\r\n      const halfW = body.width / 2;\r\n      const halfH = body.height / 2;\r\n      const cos = Math.cos(body.angle);\r\n      const sin = Math.sin(body.angle);\r\n      \r\n      const corners = [\r\n        { x: -halfW, y: -halfH },\r\n        { x: halfW, y: -halfH },\r\n        { x: halfW, y: halfH },\r\n        { x: -halfW, y: halfH }\r\n      ];\r\n      \r\n      const worldCorners = corners.map(c => ({\r\n        x: body.position.x + c.x * cos - c.y * sin,\r\n        y: body.position.y + c.x * sin + c.y * cos\r\n      }));\r\n      \r\n      minX = Math.min(...worldCorners.map(c => c.x));\r\n      maxX = Math.max(...worldCorners.map(c => c.x));\r\n      minY = Math.min(...worldCorners.map(c => c.y));\r\n      maxY = Math.max(...worldCorners.map(c => c.y));\r\n    } else if (body.shapeType === 'circle' && body.radius) {\r\n      const r = body.radius;\r\n      minX = body.position.x - r;\r\n      maxX = body.position.x + r;\r\n      minY = body.position.y - r;\r\n      maxY = body.position.y + r;\r\n    } else if (body.shapeType === 'polygon' && body.vertices) {\r\n      const cos = Math.cos(body.angle);\r\n      const sin = Math.sin(body.angle);\r\n      \r\n      const worldVertices = body.vertices.map(v => ({\r\n        x: body.position.x + v.x * cos - v.y * sin,\r\n        y: body.position.y + v.x * sin + v.y * cos\r\n      }));\r\n      \r\n      minX = Math.min(...worldVertices.map(v => v.x));\r\n      maxX = Math.max(...worldVertices.map(v => v.x));\r\n      minY = Math.min(...worldVertices.map(v => v.y));\r\n      maxY = Math.max(...worldVertices.map(v => v.y));\r\n    }\r\n    \r\n    // 转换到Canvas坐标\r\n    const topLeft = box2DToCanvas(minX, maxY, width, height);\r\n    const topRight = box2DToCanvas(maxX, maxY, width, height);\r\n    const bottomLeft = box2DToCanvas(minX, minY, width, height);\r\n    const bottomRight = box2DToCanvas(maxX, minY, width, height);\r\n    const centerX = (topLeft.x + topRight.x) / 2;\r\n    const centerY = (topLeft.y + bottomLeft.y) / 2;\r\n    \r\n    // 8个缩放手柄的位置\r\n    const handles = [\r\n      { x: topLeft.x, y: topLeft.y, type: 'tl' },           // 左上\r\n      { x: centerX, y: topLeft.y, type: 'top' },            // 上中\r\n      { x: topRight.x, y: topRight.y, type: 'tr' },         // 右上\r\n      { x: topRight.x, y: centerY, type: 'right' },         // 右中\r\n      { x: bottomRight.x, y: bottomRight.y, type: 'br' },   // 右下\r\n      { x: centerX, y: bottomRight.y, type: 'bottom' },     // 下中\r\n      { x: bottomLeft.x, y: bottomLeft.y, type: 'bl' },     // 左下\r\n      { x: bottomLeft.x, y: centerY, type: 'left' }         // 左中\r\n    ];\r\n    \r\n    ctx.save();\r\n    \r\n    // 绘制所有手柄\r\n    handles.forEach(handle => {\r\n      ctx.fillStyle = TRANSFORM_HANDLE_COLOR;\r\n      ctx.strokeStyle = TRANSFORM_HANDLE_STROKE_COLOR;\r\n      ctx.lineWidth = 2;\r\n      \r\n      ctx.fillRect(\r\n        handle.x - TRANSFORM_HANDLE_HALF_SIZE,\r\n        handle.y - TRANSFORM_HANDLE_HALF_SIZE,\r\n        TRANSFORM_HANDLE_SIZE,\r\n        TRANSFORM_HANDLE_SIZE\r\n      );\r\n      ctx.strokeRect(\r\n        handle.x - TRANSFORM_HANDLE_HALF_SIZE,\r\n        handle.y - TRANSFORM_HANDLE_HALF_SIZE,\r\n        TRANSFORM_HANDLE_SIZE,\r\n        TRANSFORM_HANDLE_SIZE\r\n      );\r\n    });\r\n    \r\n    ctx.restore();\r\n  }\r\n\r\n  private renderBody(body: Body): void {\r\n    const ctx = this.ctx;\r\n    const width = this.canvas.width;\r\n    const height = this.canvas.height;\r\n    const isSelected = this.selectedObject === body;\r\n\r\n    // Box2D → Canvas 坐标转换\r\n    const canvasPos = box2DToCanvas(body.position.x, body.position.y, width, height);\r\n\r\n    ctx.save();\r\n    ctx.translate(canvasPos.x, canvasPos.y);\r\n    ctx.rotate(-body.angle);  // Box2D 逆时针为正 → Canvas 顺时针为正\r\n\r\n    ctx.fillStyle = BODY_COLORS[body.bodyType];\r\n    ctx.strokeStyle = isSelected ? SELECTION_COLOR : COLOR_TEXT_DARK;\r\n    ctx.lineWidth = isSelected ? 3 : 2;\r\n\r\n    if (body.shapeType === 'box' && body.width && body.height) {\r\n      const w = box2DToCanvasScale(body.width);\r\n      const h = box2DToCanvasScale(body.height);\r\n      ctx.fillRect(-w / 2, -h / 2, w, h);\r\n      ctx.strokeRect(-w / 2, -h / 2, w, h);\r\n      \r\n      // 绘制方向指示线\r\n      ctx.strokeStyle = isSelected ? '#fff' : '#34495e';\r\n      ctx.lineWidth = 2;\r\n      ctx.beginPath();\r\n      ctx.moveTo(0, 0);\r\n      ctx.lineTo(w / 2, 0);\r\n      ctx.stroke();\r\n    } else if (body.shapeType === 'circle' && body.radius) {\r\n      const r = box2DToCanvasScale(body.radius);\r\n      ctx.beginPath();\r\n      ctx.arc(0, 0, r, 0, Math.PI * 2);\r\n      ctx.fill();\r\n      ctx.stroke();\r\n      \r\n      // 绘制半径指示线\r\n      ctx.strokeStyle = isSelected ? '#fff' : '#34495e';\r\n      ctx.lineWidth = 2;\r\n      ctx.beginPath();\r\n      ctx.moveTo(0, 0);\r\n      ctx.lineTo(r, 0);\r\n      ctx.stroke();\r\n    } else if (body.shapeType === 'polygon' && body.vertices && body.vertices.length > 0) {\r\n      ctx.beginPath();\r\n      const firstVertex = body.vertices[0];\r\n      const firstCanvas = { x: box2DToCanvasScale(firstVertex.x), y: -box2DToCanvasScale(firstVertex.y) };\r\n      ctx.moveTo(firstCanvas.x, firstCanvas.y);\r\n      \r\n      for (let i = 1; i < body.vertices.length; i++) {\r\n        const v = body.vertices[i];\r\n        const vCanvas = { x: box2DToCanvasScale(v.x), y: -box2DToCanvasScale(v.y) };\r\n        ctx.lineTo(vCanvas.x, vCanvas.y);\r\n      }\r\n      ctx.closePath();\r\n      ctx.fill();\r\n      ctx.stroke();\r\n    }\r\n\r\n    // 绘制中心点\r\n    ctx.fillStyle = isSelected ? '#fff' : COLOR_TEXT_DARK;\r\n    ctx.beginPath();\r\n    ctx.arc(0, 0, 3, 0, Math.PI * 2);\r\n    ctx.fill();\r\n\r\n    ctx.restore();\r\n    \r\n    // 顶点编辑模式：绘制可拖动的顶点控制点\r\n    if (this.isEditingVertices && this.editingBody === body && body.vertices) {\r\n      for (let i = 0; i < body.vertices.length; i++) {\r\n        const vertex = body.vertices[i];\r\n        \r\n        // 将本地顶点坐标转换为世界坐标\r\n        const cos = Math.cos(body.angle);\r\n        const sin = Math.sin(body.angle);\r\n        const worldX = body.position.x + vertex.x * cos - vertex.y * sin;\r\n        const worldY = body.position.y + vertex.x * sin + vertex.y * cos;\r\n        \r\n        // 转换为画布坐标\r\n        const canvasVertex = box2DToCanvas(worldX, worldY, width, height);\r\n        \r\n        // 绘制顶点控制点\r\n        ctx.save();\r\n        ctx.fillStyle = this.draggedVertexIndex === i ? COLOR_DELETE_HOVER : COLOR_SELECTED;\r\n        ctx.strokeStyle = '#fff';\r\n        ctx.lineWidth = LINE_WIDTH_SELECTED;\r\n        ctx.beginPath();\r\n        ctx.arc(canvasVertex.x, canvasVertex.y, VERTEX_CONTROL_RADIUS, 0, Math.PI * 2);\r\n        ctx.fill();\r\n        ctx.stroke();\r\n        \r\n        // 绘制顶点索引\r\n        ctx.fillStyle = '#fff';\r\n        ctx.font = 'bold 10px monospace';\r\n        ctx.textAlign = 'center';\r\n        ctx.textBaseline = 'middle';\r\n        ctx.fillText(i.toString(), canvasVertex.x, canvasVertex.y);\r\n        ctx.restore();\r\n      }\r\n    }\r\n    \r\n    // 绘制 ID 标签（在Canvas坐标系中）\r\n    if (isSelected) {\r\n      ctx.fillStyle = COLOR_TEXT;\r\n      ctx.font = '10px monospace';\r\n      ctx.fillText(body.id.substring(0, 12) + '...', canvasPos.x + 10, canvasPos.y - 10);\r\n    }\r\n  }\r\n\r\n  private renderJoint(joint: Joint): void {\r\n    const ctx = this.ctx;\r\n    const width = this.canvas.width;\r\n    const height = this.canvas.height;\r\n    const isSelected = this.selectedObject === joint;\r\n\r\n    // 找到关联的两个 Body\r\n    const bodyA = this.objects.find(o => o.id === joint.bodyAId) as Body;\r\n    const bodyB = this.objects.find(o => o.id === joint.bodyBId) as Body;\r\n    \r\n    if (!bodyA || !bodyB) return; // Body 不存在则不渲染\r\n    \r\n    // 将局部坐标转换为世界坐标（Box2D）\r\n    const anchorAWorld = localToWorld(\r\n      joint.anchorALocal.x, \r\n      joint.anchorALocal.y, \r\n      bodyA.position.x, \r\n      bodyA.position.y, \r\n      bodyA.angle\r\n    );\r\n    const anchorBWorld = localToWorld(\r\n      joint.anchorBLocal.x, \r\n      joint.anchorBLocal.y, \r\n      bodyB.position.x, \r\n      bodyB.position.y, \r\n      bodyB.angle\r\n    );\r\n    \r\n    // 转换为 Canvas 坐标\r\n    const anchorACanvas = box2DToCanvas(anchorAWorld.x, anchorAWorld.y, width, height);\r\n    const anchorBCanvas = box2DToCanvas(anchorBWorld.x, anchorBWorld.y, width, height);\r\n\r\n    // 绘制连线\r\n    ctx.strokeStyle = isSelected ? SELECTION_COLOR : '#e67e22';\r\n    ctx.lineWidth = isSelected ? 3 : 2;\r\n\r\n    ctx.beginPath();\r\n    ctx.moveTo(anchorACanvas.x, anchorACanvas.y);\r\n    ctx.lineTo(anchorBCanvas.x, anchorBCanvas.y);\r\n    ctx.stroke();\r\n\r\n    // 绘制锚点\r\n    const anchorRadius = isSelected ? ANCHOR_RADIUS_SELECTED : ANCHOR_RADIUS_NORMAL;\r\n    ctx.fillStyle = COLOR_DELETE_HOVER; // 旋转关节锚点A使用红色\r\n    \r\n    // 检测是否正在拖动某个锚点\r\n    const isDraggingAnchorA = this.draggingAnchor && this.draggingAnchor.joint === joint && this.draggingAnchor.isAnchorA;\r\n    const isDraggingAnchorB = this.draggingAnchor && this.draggingAnchor.joint === joint && !this.draggingAnchor.isAnchorA;\r\n    \r\n    // 锚点 A\r\n    ctx.beginPath();\r\n    ctx.arc(anchorACanvas.x, anchorACanvas.y, isDraggingAnchorA ? 10 : anchorRadius, 0, Math.PI * 2);\r\n    ctx.fill();\r\n    if (isSelected || isDraggingAnchorA) {\r\n      ctx.strokeStyle = isDraggingAnchorA ? COLOR_HIGHLIGHT : '#fff';\r\n      ctx.lineWidth = isDraggingAnchorA ? LINE_WIDTH_VERTEX_EDITING : LINE_WIDTH_SELECTED;\r\n      ctx.stroke();\r\n    }\r\n    \r\n    // 锚点 B\r\n    ctx.fillStyle = '#9b59b6'; // 锚点 B 使用紫色区分\r\n    ctx.beginPath();\r\n    ctx.arc(anchorBCanvas.x, anchorBCanvas.y, isDraggingAnchorB ? 10 : anchorRadius, 0, Math.PI * 2);\r\n    ctx.fill();\r\n    if (isSelected || isDraggingAnchorB) {\r\n      ctx.strokeStyle = isDraggingAnchorB ? COLOR_HIGHLIGHT : '#fff';\r\n      ctx.lineWidth = isDraggingAnchorB ? LINE_WIDTH_VERTEX_EDITING : LINE_WIDTH_SELECTED;\r\n      ctx.stroke();\r\n    }\r\n    \r\n    // 标签\r\n    if (isSelected) {\r\n      ctx.fillStyle = COLOR_TEXT;\r\n      ctx.font = '10px monospace';\r\n      const midX = (anchorACanvas.x + anchorBCanvas.x) / 2;\r\n      const midY = (anchorACanvas.y + anchorBCanvas.y) / 2;\r\n      ctx.fillText('Revolute Joint', midX + 5, midY - 5);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 从 friction 值中提取平台行为类型（第三位小数）\r\n   * 例如：0.302 -> 2, 0.503 -> 3\r\n   */\r\n  private getPlatformBehaviorType(friction: number): number {\r\n    const frictionInt = Math.floor(friction * 1000);\r\n    const thirdDigit = Math.floor((frictionInt % 10));\r\n    return thirdDigit >= 0 && thirdDigit <= 4 ? thirdDigit : 0;\r\n  }\r\n\r\n  /**\r\n   * 设置 friction 值的平台行为类型（修改第三位小数）\r\n   * 保留前两位小数，只修改第三位\r\n   * 例如：(0.35, 2) -> 0.352\r\n   */\r\n  private setPlatformBehaviorType(friction: number, behaviorType: number): number {\r\n    // 保留前两位小数\r\n    const baseFriction = Math.floor(friction * 100) / 100;\r\n    // 添加第三位小数（行为类型）\r\n    const newFriction = baseFriction + (behaviorType / 1000);\r\n    // 确保在 0-1 范围内\r\n    return Math.min(Math.max(newFriction, 0), 1);\r\n  }\r\n\r\n  private updatePropertyPanel(): void {\r\n    const panel = document.getElementById('property-content');\r\n    if (!panel) return;\r\n\r\n    if (!this.selectedObject) {\r\n      panel.innerHTML = '<p class=\"placeholder\">请选择一个对象以编辑其属性</p>';\r\n      return;\r\n    }\r\n\r\n    if (this.selectedObject.type === 'body') {\r\n      panel.innerHTML = this.generateBodyProperties(this.selectedObject);\r\n      this.bindBodyPropertyEvents();\r\n    } else {\r\n      panel.innerHTML = this.generateJointProperties(this.selectedObject);\r\n      this.bindJointPropertyEvents();\r\n    }\r\n  }\r\n\r\n  private generateBodyProperties(body: Body): string {\r\n    // 生成形状尺寸编辑部分\r\n    let shapePropertiesHTML = '';\r\n    \r\n    if (body.shapeType === 'box' && body.width !== undefined && body.height !== undefined) {\r\n      shapePropertiesHTML = `\r\n        <div class=\"property-group\">\r\n          <div class=\"property-group-title\">矩形尺寸 (单位：米)</div>\r\n          <div class=\"property-field\">\r\n            <label>宽度 (Width)</label>\r\n            <input type=\"number\" id=\"prop-width\" class=\"body-prop\" value=\"${body.width.toFixed(2)}\" step=\"0.1\" min=\"0.1\">\r\n          </div>\r\n          <div class=\"property-field\">\r\n            <label>高度 (Height)</label>\r\n            <input type=\"number\" id=\"prop-height\" class=\"body-prop\" value=\"${body.height.toFixed(2)}\" step=\"0.1\" min=\"0.1\">\r\n          </div>\r\n        </div>\r\n      `;\r\n    } else if (body.shapeType === 'circle' && body.radius !== undefined) {\r\n      shapePropertiesHTML = `\r\n        <div class=\"property-group\">\r\n          <div class=\"property-group-title\">圆形尺寸 (单位：米)</div>\r\n          <div class=\"property-field\">\r\n            <label>半径 (Radius)</label>\r\n            <input type=\"number\" id=\"prop-radius\" class=\"body-prop\" value=\"${body.radius.toFixed(2)}\" step=\"0.1\" min=\"0.1\">\r\n          </div>\r\n        </div>\r\n      `;\r\n    } else if (body.shapeType === 'polygon' && body.vertices && body.vertices.length > 0) {\r\n      const verticesHTML = body.vertices.map((v, i) => `\r\n        <div class=\"vertex-field\">\r\n          <label>顶点 ${i + 1}</label>\r\n          <div class=\"input-group\">\r\n            <input type=\"number\" id=\"prop-vertex-${i}-x\" class=\"body-prop vertex-input\" \r\n                   value=\"${v.x.toFixed(2)}\" step=\"0.1\" placeholder=\"X\">\r\n            <input type=\"number\" id=\"prop-vertex-${i}-y\" class=\"body-prop vertex-input\" \r\n                   value=\"${v.y.toFixed(2)}\" step=\"0.1\" placeholder=\"Y\">\r\n          </div>\r\n        </div>\r\n      `).join('');\r\n      \r\n      shapePropertiesHTML = `\r\n        <div class=\"property-group\">\r\n          <div class=\"property-group-title\">多边形顶点 (单位：米)</div>\r\n          ${verticesHTML}\r\n          <div class=\"hint\">提示：顶点坐标相对于物体中心</div>\r\n        </div>\r\n      `;\r\n    }\r\n    \r\n    return `\r\n      <div class=\"object-info\">\r\n        <div class=\"object-info-row\">\r\n          <span class=\"object-info-label\">ID:</span>\r\n          <span class=\"object-info-value\">${body.id}</span>\r\n        </div>\r\n        <div class=\"object-info-row\">\r\n          <span class=\"object-info-label\">类型:</span>\r\n          <span class=\"object-info-value\">刚体 (${body.shapeType})</span>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"property-group\">\r\n        <div class=\"property-group-title\">位置坐标 (单位：米)</div>\r\n        <div class=\"property-field\">\r\n          <label>X 坐标</label>\r\n          <input type=\"number\" id=\"prop-position-x\" class=\"body-prop\" value=\"${body.position.x.toFixed(2)}\" step=\"0.1\">\r\n        </div>\r\n        <div class=\"property-field\">\r\n          <label>Y 坐标</label>\r\n          <input type=\"number\" id=\"prop-position-y\" class=\"body-prop\" value=\"${body.position.y.toFixed(2)}\" step=\"0.1\">\r\n        </div>\r\n        <div class=\"property-field\">\r\n          <label>旋转角度 (度)</label>\r\n          <input type=\"number\" id=\"prop-angle\" class=\"body-prop\" value=\"${(body.angle * 180 / Math.PI).toFixed(2)}\" step=\"1\">\r\n        </div>\r\n      </div>\r\n\r\n      ${shapePropertiesHTML}\r\n\r\n      <div class=\"property-group\">\r\n        <div class=\"property-group-title\">刚体类型</div>\r\n        <div class=\"property-field\">\r\n          <select id=\"prop-bodyType\" class=\"body-prop\">\r\n            <option value=\"static\" ${body.bodyType === 'static' ? 'selected' : ''}>Static (静态)</option>\r\n            <option value=\"dynamic\" ${body.bodyType === 'dynamic' ? 'selected' : ''}>Dynamic (动态)</option>\r\n            <option value=\"kinematic\" ${body.bodyType === 'kinematic' ? 'selected' : ''}>Kinematic (运动学)</option>\r\n          </select>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"property-group\">\r\n        <div class=\"property-group-title\">物理属性</div>\r\n        <div class=\"property-field\">\r\n          <label>密度 (Density)</label>\r\n          <input type=\"number\" id=\"prop-density\" class=\"body-prop\" value=\"${body.density}\" step=\"0.1\" min=\"0\">\r\n        </div>\r\n        <div class=\"property-field\">\r\n          <label>摩擦力 (Friction 0.00-0.99)</label>\r\n          <input type=\"number\" id=\"prop-friction\" class=\"body-prop\" value=\"${(Math.floor(body.friction * 100) / 100).toFixed(2)}\" step=\"0.01\" min=\"0\" max=\"0.99\">\r\n          <div class=\"hint\">仅前两位小数可编辑，第三位由下方平台行为决定</div>\r\n        </div>\r\n        <div class=\"property-field\">\r\n          <label>弹性 (Restitution)</label>\r\n          <input type=\"number\" id=\"prop-restitution\" class=\"body-prop\" value=\"${body.restitution}\" step=\"0.1\" min=\"0\" max=\"1\">\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"property-group\">\r\n        <div class=\"property-group-title\">平台行为 (物理预览时生效)</div>\r\n        <div class=\"property-field\">\r\n          <label>行为类型</label>\r\n          <select id=\"prop-platformBehavior\" class=\"body-prop\">\r\n            <option value=\"0\" ${this.getPlatformBehaviorType(body.friction) === 0 ? 'selected' : ''}>无特殊行为</option>\r\n            <option value=\"1\" ${this.getPlatformBehaviorType(body.friction) === 1 ? 'selected' : ''}>完全静态</option>\r\n            <option value=\"2\" ${this.getPlatformBehaviorType(body.friction) === 2 ? 'selected' : ''}>左右平移</option>\r\n            <option value=\"3\" ${this.getPlatformBehaviorType(body.friction) === 3 ? 'selected' : ''}>绕点旋转</option>\r\n            <option value=\"4\" ${this.getPlatformBehaviorType(body.friction) === 4 ? 'selected' : ''}>定期消失</option>\r\n          </select>\r\n          <div class=\"hint\">通过设置摩擦力第三位小数实现 (0.XX${this.getPlatformBehaviorType(body.friction)})</div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"property-group\">\r\n        <div class=\"property-group-title\">阻尼</div>\r\n        <div class=\"property-field\">\r\n          <label>线性阻尼</label>\r\n          <input type=\"number\" id=\"prop-linearDamping\" class=\"body-prop\" value=\"${body.linearDamping}\" step=\"0.1\" min=\"0\">\r\n        </div>\r\n        <div class=\"property-field\">\r\n          <label>角阻尼</label>\r\n          <input type=\"number\" id=\"prop-angularDamping\" class=\"body-prop\" value=\"${body.angularDamping}\" step=\"0.1\" min=\"0\">\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"property-group\">\r\n        <div class=\"property-group-title\">其他</div>\r\n        <div class=\"property-field\">\r\n          <label>重力缩放</label>\r\n          <input type=\"number\" id=\"prop-gravityScale\" class=\"body-prop\" value=\"${body.gravityScale}\" step=\"0.1\">\r\n        </div>\r\n        <div class=\"property-field property-field-inline\">\r\n          <input type=\"checkbox\" id=\"prop-fixedRotation\" class=\"body-prop\" ${body.fixedRotation ? 'checked' : ''}>\r\n          <label>固定旋转</label>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"btn-group\">\r\n        <button id=\"btn-delete-obj\" class=\"btn\">删除对象</button>\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  private generateJointProperties(joint: Joint): string {\r\n    const bodyA = this.objects.find(o => o.id === joint.bodyAId);\r\n    const bodyB = this.objects.find(o => o.id === joint.bodyBId);\r\n    \r\n    return `\r\n      <div class=\"object-info\">\r\n        <div class=\"object-info-row\">\r\n          <span class=\"object-info-label\">ID:</span>\r\n          <span class=\"object-info-value\">${joint.id}</span>\r\n        </div>\r\n        <div class=\"object-info-row\">\r\n          <span class=\"object-info-label\">类型:</span>\r\n          <span class=\"object-info-value\">旋转关节</span>\r\n        </div>\r\n        <div class=\"object-info-row\">\r\n          <span class=\"object-info-label\">Body A:</span>\r\n          <span class=\"object-info-value\">${bodyA ? (bodyA as Body).id.substring(0, 12) + '...' : 'N/A'}</span>\r\n        </div>\r\n        <div class=\"object-info-row\">\r\n          <span class=\"object-info-label\">Body B:</span>\r\n          <span class=\"object-info-value\">${bodyB ? (bodyB as Body).id.substring(0, 12) + '...' : 'N/A'}</span>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"property-group\">\r\n        <div class=\"property-group-title\">锚点位置（局部坐标，单位：米）</div>\r\n        <div class=\"property-field\">\r\n          <label>锚点 A - X (m)</label>\r\n          <input type=\"number\" id=\"prop-anchorALocalX\" class=\"joint-prop\" value=\"${joint.anchorALocal.x.toFixed(2)}\" step=\"0.1\">\r\n        </div>\r\n        <div class=\"property-field\">\r\n          <label>锚点 A - Y (m)</label>\r\n          <input type=\"number\" id=\"prop-anchorALocalY\" class=\"joint-prop\" value=\"${joint.anchorALocal.y.toFixed(2)}\" step=\"0.1\">\r\n        </div>\r\n        <div class=\"property-field\">\r\n          <label>锚点 B - X (m)</label>\r\n          <input type=\"number\" id=\"prop-anchorBLocalX\" class=\"joint-prop\" value=\"${joint.anchorBLocal.x.toFixed(2)}\" step=\"0.1\">\r\n        </div>\r\n        <div class=\"property-field\">\r\n          <label>锚点 B - Y (m)</label>\r\n          <input type=\"number\" id=\"prop-anchorBLocalY\" class=\"joint-prop\" value=\"${joint.anchorBLocal.y.toFixed(2)}\" step=\"0.1\">\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"property-group\">\r\n        <div class=\"property-group-title\">旋转关节属性</div>\r\n        <div class=\"property-field property-field-inline\">\r\n          <input type=\"checkbox\" id=\"prop-enableLimit\" class=\"joint-prop\" ${joint.enableLimit ? 'checked' : ''}>\r\n          <label>启用角度限制</label>\r\n        </div>\r\n        <div class=\"property-field\">\r\n          <label>下限角度 (度)</label>\r\n          <input type=\"number\" id=\"prop-lowerAngle\" class=\"joint-prop\" value=\"${Math.round((joint.lowerAngle || 0) * 180 / Math.PI)}\" step=\"5\">\r\n        </div>\r\n        <div class=\"property-field\">\r\n          <label>上限角度 (度)</label>\r\n          <input type=\"number\" id=\"prop-upperAngle\" class=\"joint-prop\" value=\"${Math.round((joint.upperAngle || 0) * 180 / Math.PI)}\" step=\"5\">\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"property-group\">\r\n        <div class=\"property-group-title\">马达控制</div>\r\n        <div class=\"property-field property-field-inline\">\r\n          <input type=\"checkbox\" id=\"prop-enableMotor\" class=\"joint-prop\" ${joint.enableMotor ? 'checked' : ''}>\r\n          <label>启用马达</label>\r\n        </div>\r\n        <div class=\"property-field\">\r\n          <label>马达速度 (rad/s)</label>\r\n          <input type=\"number\" id=\"prop-motorSpeed\" class=\"joint-prop\" value=\"${(joint.motorSpeed || 0).toFixed(2)}\" step=\"0.1\">\r\n          <div class=\"hint\">正值：逆时针旋转 | 负值：顺时针旋转</div>\r\n        </div>\r\n        <div class=\"property-field\">\r\n          <label>最大扭矩</label>\r\n          <input type=\"number\" id=\"prop-maxMotorTorque\" class=\"joint-prop\" value=\"${joint.maxMotorTorque || 1000}\" step=\"100\" min=\"0\">\r\n          <div class=\"hint\">扭矩越大，马达力量越强</div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"property-group\">\r\n        <div class=\"property-group-title\">碰撞设置</div>\r\n        <div class=\"property-field property-field-inline\">\r\n          <input type=\"checkbox\" id=\"prop-collideConnected\" class=\"joint-prop\" ${joint.collideConnected ? 'checked' : ''}>\r\n          <label>允许连接物体碰撞</label>\r\n        </div>\r\n        <div class=\"hint\">勾选：连接的物体会发生碰撞（如人体关节）<br>不勾选：连接的物体穿透彼此（适合特殊效果）</div>\r\n      </div>\r\n\r\n      <div class=\"btn-group\">\r\n        <button id=\"btn-delete-obj\" class=\"btn\">删除对象</button>\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  private bindBodyPropertyEvents(): void {\r\n    const updateProp = (id: string, prop: keyof Body, isCheckbox = false) => {\r\n      const elem = document.getElementById(id) as HTMLInputElement;\r\n      if (!elem || !this.selectedObject || this.selectedObject.type !== 'body') return;\r\n      \r\n      elem.addEventListener(isCheckbox ? 'change' : 'input', () => {\r\n        if (this.selectedObject && this.selectedObject.type === 'body') {\r\n          const body = this.selectedObject as Body;\r\n          const oldValue = (body as any)[prop];\r\n          const newValue = isCheckbox ? elem.checked : (id === 'prop-bodyType' ? elem.value : parseFloat(elem.value));\r\n          \r\n          // 值没变化就不记录\r\n          if (oldValue !== newValue) {\r\n            const cmd = new ModifyPropertyCommand(\r\n              body,\r\n              prop as string,\r\n              oldValue,\r\n              newValue,\r\n              () => {\r\n                this.render();\r\n                this.updatePropertyPanel();\r\n              }\r\n            );\r\n            this.commandHistory.execute(cmd);\r\n            this.updateUndoRedoButtons();\r\n          }\r\n        }\r\n      });\r\n    };\r\n\r\n    // 位置坐标 X\r\n    const posXInput = document.getElementById('prop-position-x') as HTMLInputElement;\r\n    if (posXInput && this.selectedObject && this.selectedObject.type === 'body') {\r\n      posXInput.addEventListener('input', () => {\r\n        if (this.selectedObject && this.selectedObject.type === 'body') {\r\n          const body = this.selectedObject as Body;\r\n          const oldX = body.position.x;\r\n          const newX = parseFloat(posXInput.value);\r\n          \r\n          if (oldX !== newX) {\r\n            const cmd = new ModifyPropertyCommand(\r\n              body,\r\n              'position.x',\r\n              oldX,\r\n              newX,\r\n              () => {\r\n                body.position.x = newX;\r\n                this.render();\r\n                this.updatePropertyPanel();\r\n              }\r\n            );\r\n            this.commandHistory.execute(cmd);\r\n            this.updateUndoRedoButtons();\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    // 位置坐标 Y\r\n    const posYInput = document.getElementById('prop-position-y') as HTMLInputElement;\r\n    if (posYInput && this.selectedObject && this.selectedObject.type === 'body') {\r\n      posYInput.addEventListener('input', () => {\r\n        if (this.selectedObject && this.selectedObject.type === 'body') {\r\n          const body = this.selectedObject as Body;\r\n          const oldY = body.position.y;\r\n          const newY = parseFloat(posYInput.value);\r\n          \r\n          if (oldY !== newY) {\r\n            const cmd = new ModifyPropertyCommand(\r\n              body,\r\n              'position.y',\r\n              oldY,\r\n              newY,\r\n              () => {\r\n                body.position.y = newY;\r\n                this.render();\r\n                this.updatePropertyPanel();\r\n              }\r\n            );\r\n            this.commandHistory.execute(cmd);\r\n            this.updateUndoRedoButtons();\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    // 旋转角度\r\n    const angleInput = document.getElementById('prop-angle') as HTMLInputElement;\r\n    if (angleInput && this.selectedObject && this.selectedObject.type === 'body') {\r\n      angleInput.addEventListener('input', () => {\r\n        if (this.selectedObject && this.selectedObject.type === 'body') {\r\n          const body = this.selectedObject as Body;\r\n          const oldAngle = body.angle;\r\n          const newAngle = parseFloat(angleInput.value) * Math.PI / 180; // 度转弧度\r\n          \r\n          if (oldAngle !== newAngle) {\r\n            const cmd = new ModifyPropertyCommand(\r\n              body,\r\n              'angle',\r\n              oldAngle,\r\n              newAngle,\r\n              () => {\r\n                this.render();\r\n                this.updatePropertyPanel();\r\n              }\r\n            );\r\n            this.commandHistory.execute(cmd);\r\n            this.updateUndoRedoButtons();\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    // 形状尺寸属性\r\n    updateProp('prop-width', 'width');\r\n    updateProp('prop-height', 'height');\r\n    updateProp('prop-radius', 'radius');\r\n    \r\n    // 多边形顶点编辑\r\n    if (this.selectedObject && this.selectedObject.type === 'body') {\r\n      const body = this.selectedObject as Body;\r\n      if (body.shapeType === 'polygon' && body.vertices) {\r\n        body.vertices.forEach((_, i) => {\r\n          // X 坐标\r\n          const xInput = document.getElementById(`prop-vertex-${i}-x`) as HTMLInputElement;\r\n          if (xInput) {\r\n            xInput.addEventListener('input', () => {\r\n              const newX = parseFloat(xInput.value);\r\n              const oldVertices = JSON.parse(JSON.stringify(body.vertices));\r\n              const newVertices = JSON.parse(JSON.stringify(body.vertices));\r\n              newVertices[i].x = newX;\r\n              \r\n              const cmd = new ModifyPropertyCommand(\r\n                body,\r\n                'vertices',\r\n                oldVertices,\r\n                newVertices,\r\n                () => {\r\n                  this.render();\r\n                  this.updatePropertyPanel();\r\n                }\r\n              );\r\n              this.commandHistory.execute(cmd);\r\n              this.updateUndoRedoButtons();\r\n            });\r\n          }\r\n          \r\n          // Y 坐标\r\n          const yInput = document.getElementById(`prop-vertex-${i}-y`) as HTMLInputElement;\r\n          if (yInput) {\r\n            yInput.addEventListener('input', () => {\r\n              const newY = parseFloat(yInput.value);\r\n              const oldVertices = JSON.parse(JSON.stringify(body.vertices));\r\n              const newVertices = JSON.parse(JSON.stringify(body.vertices));\r\n              newVertices[i].y = newY;\r\n              \r\n              const cmd = new ModifyPropertyCommand(\r\n                body,\r\n                'vertices',\r\n                oldVertices,\r\n                newVertices,\r\n                () => {\r\n                  this.render();\r\n                  this.updatePropertyPanel();\r\n                }\r\n              );\r\n              this.commandHistory.execute(cmd);\r\n              this.updateUndoRedoButtons();\r\n            });\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    // 物理属性\r\n    updateProp('prop-bodyType', 'bodyType');\r\n    updateProp('prop-density', 'density');\r\n    \r\n    // 摩擦力 - 特殊处理，限制只能修改前两位小数\r\n    const frictionInput = document.getElementById('prop-friction') as HTMLInputElement;\r\n    if (frictionInput && this.selectedObject && this.selectedObject.type === 'body') {\r\n      frictionInput.addEventListener('input', () => {\r\n        if (this.selectedObject && this.selectedObject.type === 'body') {\r\n          const body = this.selectedObject as Body;\r\n          const oldFriction = body.friction;\r\n          let newFriction = parseFloat(frictionInput.value);\r\n          \r\n          // 限制只能修改前两位小数，保留第三位（平台行为）\r\n          const behaviorType = this.getPlatformBehaviorType(oldFriction);\r\n          newFriction = this.setPlatformBehaviorType(newFriction, behaviorType);\r\n          \r\n          if (oldFriction !== newFriction) {\r\n            const cmd = new ModifyPropertyCommand(\r\n              body,\r\n              'friction',\r\n              oldFriction,\r\n              newFriction,\r\n              () => {\r\n                this.render();\r\n                this.updatePropertyPanel();\r\n              }\r\n            );\r\n            this.commandHistory.execute(cmd);\r\n            this.updateUndoRedoButtons();\r\n          }\r\n        }\r\n      });\r\n    }\r\n    \r\n    // 平台行为类型\r\n    const behaviorSelect = document.getElementById('prop-platformBehavior') as HTMLSelectElement;\r\n    if (behaviorSelect && this.selectedObject && this.selectedObject.type === 'body') {\r\n      behaviorSelect.addEventListener('change', () => {\r\n        if (this.selectedObject && this.selectedObject.type === 'body') {\r\n          const body = this.selectedObject as Body;\r\n          const oldFriction = body.friction;\r\n          const behaviorType = parseInt(behaviorSelect.value);\r\n          \r\n          // 保留前两位小数，只修改第三位\r\n          const newFriction = this.setPlatformBehaviorType(oldFriction, behaviorType);\r\n          \r\n          if (oldFriction !== newFriction) {\r\n            const cmd = new ModifyPropertyCommand(\r\n              body,\r\n              'friction',\r\n              oldFriction,\r\n              newFriction,\r\n              () => {\r\n                this.render();\r\n                this.updatePropertyPanel();\r\n              }\r\n            );\r\n            this.commandHistory.execute(cmd);\r\n            this.updateUndoRedoButtons();\r\n          }\r\n        }\r\n      });\r\n    }\r\n    \r\n    updateProp('prop-restitution', 'restitution');\r\n    updateProp('prop-linearDamping', 'linearDamping');\r\n    updateProp('prop-angularDamping', 'angularDamping');\r\n    updateProp('prop-gravityScale', 'gravityScale');\r\n    updateProp('prop-fixedRotation', 'fixedRotation', true);\r\n\r\n    document.getElementById('btn-delete-obj')?.addEventListener('click', () => this.deleteSelected());\r\n  }\r\n\r\n  private bindJointPropertyEvents(): void {\r\n    const updateProp = (id: string, prop: keyof Joint, isCheckbox = false, isDegree = false) => {\r\n      const elem = document.getElementById(id) as HTMLInputElement;\r\n      if (!elem || !this.selectedObject || this.selectedObject.type !== 'joint') return;\r\n      \r\n      elem.addEventListener(isCheckbox ? 'change' : 'input', () => {\r\n        if (this.selectedObject && this.selectedObject.type === 'joint') {\r\n          const joint = this.selectedObject as Joint;\r\n          const oldValue = (joint as any)[prop];\r\n          let newValue: any = isCheckbox ? elem.checked : parseFloat(elem.value);\r\n          if (isDegree) newValue = newValue * Math.PI / 180;\r\n          \r\n          // 值没变化就不记录\r\n          if (oldValue !== newValue) {\r\n            const cmd = new ModifyPropertyCommand(\r\n              joint,\r\n              prop as string,\r\n              oldValue,\r\n              newValue,\r\n              () => {\r\n                this.render();\r\n                this.updatePropertyPanel();\r\n              }\r\n            );\r\n            this.commandHistory.execute(cmd);\r\n            this.updateUndoRedoButtons();\r\n          }\r\n        }\r\n      });\r\n    };\r\n\r\n    // 锚点位置编辑\r\n    const updateAnchor = (id: string, isAnchorA: boolean, isX: boolean) => {\r\n      const elem = document.getElementById(id) as HTMLInputElement;\r\n      if (!elem || !this.selectedObject || this.selectedObject.type !== 'joint') return;\r\n      \r\n      elem.addEventListener('input', () => {\r\n        if (this.selectedObject && this.selectedObject.type === 'joint') {\r\n          const joint = this.selectedObject as Joint;\r\n          const anchor = isAnchorA ? joint.anchorALocal : joint.anchorBLocal;\r\n          const prop = isAnchorA ? 'anchorALocal' : 'anchorBLocal';\r\n          const oldValue = { x: anchor.x, y: anchor.y };\r\n          const newValue = { x: anchor.x, y: anchor.y };\r\n          \r\n          if (isX) {\r\n            newValue.x = parseFloat(elem.value);\r\n          } else {\r\n            newValue.y = parseFloat(elem.value);\r\n          }\r\n          \r\n          if (oldValue.x !== newValue.x || oldValue.y !== newValue.y) {\r\n            const cmd = new ModifyPropertyCommand(\r\n              joint,\r\n              prop,\r\n              oldValue,\r\n              newValue,\r\n              () => {\r\n                this.render();\r\n                this.updatePropertyPanel();\r\n              }\r\n            );\r\n            this.commandHistory.execute(cmd);\r\n            this.updateUndoRedoButtons();\r\n          }\r\n        }\r\n      });\r\n    };\r\n\r\n    updateAnchor('prop-anchorALocalX', true, true);\r\n    updateAnchor('prop-anchorALocalY', true, false);\r\n    updateAnchor('prop-anchorBLocalX', false, true);\r\n    updateAnchor('prop-anchorBLocalY', false, false);\r\n\r\n    // 只绑定旋转关节属性\r\n    updateProp('prop-enableLimit', 'enableLimit', true);\r\n    updateProp('prop-lowerAngle', 'lowerAngle', false, true);\r\n    updateProp('prop-upperAngle', 'upperAngle', false, true);\r\n    \r\n    // 马达属性\r\n    updateProp('prop-enableMotor', 'enableMotor', true);\r\n    updateProp('prop-motorSpeed', 'motorSpeed', false);\r\n    updateProp('prop-maxMotorTorque', 'maxMotorTorque', false);\r\n    \r\n    // 其他属性\r\n    updateProp('prop-collideConnected', 'collideConnected', true);\r\n\r\n    document.getElementById('btn-delete-obj')?.addEventListener('click', () => this.deleteSelected());\r\n  }\r\n\r\n  // ==================== 撤销/重做 ====================\r\n\r\n  private updateUndoRedoButtons(): void {\r\n    const undoBtn = document.getElementById('btn-undo') as HTMLButtonElement | null;\r\n    const redoBtn = document.getElementById('btn-redo') as HTMLButtonElement | null;\r\n    \r\n    if (undoBtn) {\r\n      undoBtn.disabled = !this.commandHistory.canUndo();\r\n    }\r\n    if (redoBtn) {\r\n      redoBtn.disabled = !this.commandHistory.canRedo();\r\n    }\r\n  }\r\n\r\n  private undo(): void {\r\n    this.commandHistory.undo();\r\n    this.updateUndoRedoButtons();\r\n    this.updateStatus('撤销操作', '', '已撤销');\r\n  }\r\n\r\n  private redo(): void {\r\n    this.commandHistory.redo();\r\n    this.updateUndoRedoButtons();\r\n    this.updateStatus('重做操作', '', '已重做');\r\n  }\r\n\r\n  // ==================== 状态更新 ====================\r\n\r\n  private updateStatus(...messages: string[]): void {\r\n    const statusTool = document.getElementById('status-tool');\r\n    const statusObjects = document.getElementById('status-objects');\r\n    const statusCoords = document.getElementById('status-coords');\r\n    const statusMessage = document.getElementById('status-message');\r\n\r\n    if (messages[0] && statusTool) statusTool.textContent = messages[0];\r\n    if (statusObjects) statusObjects.textContent = `对象: ${this.objects.length}`;\r\n    if (messages[1] && statusCoords) statusCoords.textContent = messages[1];\r\n    if (messages[2] && statusMessage) statusMessage.textContent = messages[2];\r\n  }\r\n\r\n  private newMap(): void {\r\n    if (confirm('确定要新建地图吗？当前未保存的内容将丢失。')) {\r\n      this.objects = [];\r\n      this.selectedObject = null;\r\n      this.updatePropertyPanel();\r\n      this.render();\r\n    }\r\n  }\r\n\r\n  private saveMap(): void {\r\n    if (this.objects.length === 0) {\r\n      alert('没有可保存的对象');\r\n      return;\r\n    }\r\n    const data = JSON.stringify(this.objects, null, 2);\r\n    downloadFile(data, 'map.json');\r\n    alert('地图保存成功！');\r\n  }\r\n\r\n  private loadMap(): void {\r\n    const fileInput = document.getElementById('file-input') as HTMLInputElement;\r\n    fileInput?.click();\r\n  }\r\n\r\n  private async loadFromFile(file: File): Promise<void> {\r\n    try {\r\n      const text = await file.text();\r\n      const data = JSON.parse(text);\r\n      \r\n      // 检查是否是 Box2D 导出格式\r\n      if (data.world_settings && data.bodies && data.joints) {\r\n        alert('检测到 Box2D 导出格式，但目前不支持从导出文件导入。\\n请使用\"保存地图\"生成的 map.json 文件。');\r\n        return;\r\n      }\r\n      \r\n      // 验证数据格式（地图保存格式）\r\n      if (!Array.isArray(data)) {\r\n        throw new Error('文件格式错误：数据必须是数组格式');\r\n      }\r\n      \r\n      // 验证数组中的对象是否有必要的字段\r\n      for (const obj of data) {\r\n        if (!obj.id || !obj.type) {\r\n          throw new Error('文件格式错误：对象缺少必要字段（id 或 type）');\r\n        }\r\n      }\r\n      \r\n      // 加载对象并填充默认值\r\n      this.objects = data.map((obj: any) => {\r\n        if (obj.type === 'body') {\r\n          // 确保 Body 对象有所有必需的属性\r\n          return {\r\n            ...obj,\r\n            linearDamping: obj.linearDamping ?? DEFAULT_BODY_LINEAR_DAMPING,\r\n            angularDamping: obj.angularDamping ?? DEFAULT_BODY_ANGULAR_DAMPING,\r\n            gravityScale: obj.gravityScale ?? DEFAULT_BODY_GRAVITY_SCALE,\r\n            density: obj.density ?? DEFAULT_BODY_DENSITY,\r\n            friction: obj.friction ?? DEFAULT_BODY_FRICTION,\r\n            restitution: obj.restitution ?? DEFAULT_BODY_RESTITUTION,\r\n            fixedRotation: obj.fixedRotation ?? false\r\n          };\r\n        }\r\n        return obj;\r\n      });\r\n      \r\n      this.selectedObject = null;\r\n      this.commandHistory = new CommandHistory(); // 清空撤销历史\r\n      this.updateUndoRedoButtons();\r\n      this.updatePropertyPanel();\r\n      this.render();\r\n      alert('文件加载成功！');\r\n    } catch (error) {\r\n      console.error('加载文件错误:', error);\r\n      alert('加载文件失败: ' + (error instanceof Error ? error.message : String(error)));\r\n    }\r\n  }\r\n\r\n  private exportBox2D(): void {\r\n    const box2dData = {\r\n      world_settings: {\r\n        gravity: [0, -9.8],  // 标准重力加速度 9.8 m/s²，Y向下（负值）\r\n        allow_sleeping: true,\r\n        auto_clear_forces: true\r\n      },\r\n      bodies: this.objects\r\n        .filter(o => o.type === 'body')\r\n        .map(body => this.bodyToBox2D(body as Body)),\r\n      joints: this.objects\r\n        .filter(o => o.type === 'joint')\r\n        .map(joint => this.jointToBox2D(joint as Joint))\r\n    };\r\n\r\n    const json = JSON.stringify(box2dData, null, 2);\r\n    downloadFile(json, 'box2d_export.json');\r\n  }\r\n\r\n  private bodyToBox2D(body: Body): any {\r\n    const fixtures: any[] = [];\r\n    \r\n    // 数据已经是 Box2D 坐标，直接使用\r\n    if (body.shapeType === 'box' && body.width && body.height) {\r\n      fixtures.push({\r\n        shape: {\r\n          type: 'box',\r\n          params: {\r\n            width: body.width,    // 已经是米\r\n            height: body.height   // 已经是米\r\n          }\r\n        },\r\n        fixture_def: {\r\n          density: body.density,\r\n          friction: body.friction,\r\n          restitution: body.restitution,\r\n          is_sensor: false,\r\n          filter_category_bits: 1,\r\n          filter_mask_bits: 65535,\r\n          filter_group_index: 0\r\n        }\r\n      });\r\n    } else if (body.shapeType === 'circle' && body.radius) {\r\n      fixtures.push({\r\n        shape: {\r\n          type: 'circle',\r\n          params: {\r\n            radius: body.radius   // 已经是米\r\n          }\r\n        },\r\n        fixture_def: {\r\n          density: body.density,\r\n          friction: body.friction,\r\n          restitution: body.restitution,\r\n          is_sensor: false,\r\n          filter_category_bits: 1,\r\n          filter_mask_bits: 65535,\r\n          filter_group_index: 0\r\n        }\r\n      });\r\n    } else if (body.shapeType === 'polygon' && body.vertices) {\r\n      fixtures.push({\r\n        shape: {\r\n          type: 'polygon',\r\n          params: {\r\n            vertices: body.vertices.map(v => [v.x, v.y])  // 已经是米\r\n          }\r\n        },\r\n        fixture_def: {\r\n          density: body.density,\r\n          friction: body.friction,\r\n          restitution: body.restitution,\r\n          is_sensor: false,\r\n          filter_category_bits: 1,\r\n          filter_mask_bits: 65535,\r\n          filter_group_index: 0\r\n        }\r\n      });\r\n    }\r\n\r\n    return {\r\n      id: body.id,\r\n      body_def: {\r\n        type: body.bodyType,\r\n        position: [body.position.x, body.position.y],  // 已经是米，Y向上\r\n        angle: body.angle,  // 已经是逆时针为正\r\n        linear_velocity: [0, 0],\r\n        angular_velocity: 0,\r\n        linear_damping: body.linearDamping,\r\n        angular_damping: body.angularDamping,\r\n        allow_sleep: true,\r\n        awake: true,\r\n        fixed_rotation: body.fixedRotation,\r\n        bullet: false,\r\n        gravity_scale: body.gravityScale\r\n      },\r\n      fixtures,\r\n      visual_properties: {},\r\n      user_data: {}\r\n    };\r\n  }\r\n\r\n  private jointToBox2D(joint: Joint): any {\r\n    const bodyA = this.objects.find(o => o.id === joint.bodyAId) as Body;\r\n    const bodyB = this.objects.find(o => o.id === joint.bodyBId) as Body;\r\n\r\n    if (!bodyA || !bodyB) return null;\r\n\r\n    // 现在锚点已经是局部坐标了，直接使用\r\n    const base = {\r\n      id: joint.id,\r\n      joint_type: 'revolute', // 只导出旋转关节\r\n      body_a: joint.bodyAId,\r\n      body_b: joint.bodyBId,\r\n      visual_properties: {},\r\n      user_data: {}\r\n    };\r\n\r\n    // 数据已经是 Box2D 坐标（局部坐标，米），直接使用\r\n    return {\r\n      ...base,\r\n      joint_def: {\r\n        local_anchor_a: [joint.anchorALocal.x, joint.anchorALocal.y],  // 已经是米\r\n        local_anchor_b: [joint.anchorBLocal.x, joint.anchorBLocal.y],  // 已经是米\r\n        reference_angle: bodyB.angle - bodyA.angle,\r\n        enable_limit: joint.enableLimit || false,\r\n        lower_angle: joint.lowerAngle || -Math.PI / 2,\r\n        upper_angle: joint.upperAngle || Math.PI / 2,\r\n        enable_motor: false,\r\n        motor_speed: 0,\r\n        max_motor_torque: 0,\r\n        collide_connected: false\r\n      }\r\n    };\r\n  }\r\n\r\n  // ==================== 物理预览 ====================\r\n\r\n  private disableToolbar(disabled: boolean): void {\r\n    // 禁用/启用所有工具按钮\r\n    document.querySelectorAll('.tool-btn').forEach(btn => {\r\n      (btn as HTMLButtonElement).disabled = disabled;\r\n      if (disabled) {\r\n        btn.classList.add('disabled');\r\n      } else {\r\n        btn.classList.remove('disabled');\r\n      }\r\n    });\r\n    \r\n    // 禁用/启用文件操作按钮\r\n    const fileButtons = ['btn-new', 'btn-save', 'btn-load', 'btn-export', 'btn-undo', 'btn-redo'];\r\n    fileButtons.forEach(id => {\r\n      const btn = document.getElementById(id) as HTMLButtonElement;\r\n      if (btn) {\r\n        btn.disabled = disabled;\r\n      }\r\n    });\r\n  }\r\n\r\n  private togglePreview(): void {\r\n    if (this.isPreviewMode) {\r\n      this.exitPreview();\r\n    } else {\r\n      this.startPreview();\r\n    }\r\n  }\r\n\r\n  private startPreview(): void {\r\n    // 检查 Box2D 是否加载（旧版 Box2D Flash API）\r\n    if (typeof (window as any).b2World === 'undefined') {\r\n      alert('Box2D 物理引擎未加载！\\n\\n请确认：\\n1. public/box2d-js/lib/box2d.js 文件存在\\n2. 刷新页面重新加载\\n3. 查看控制台是否有加载错误');\r\n      console.error('Box2D 加载检查失败 - b2World 未定义');\r\n      console.log('可用的全局对象:', Object.keys(window).filter(k => k.includes('b2')));\r\n      return;\r\n    }\r\n\r\n    // 如果没有物体，提示用户\r\n    if (this.objects.length === 0) {\r\n      alert('场景中没有物体！请先创建一些物体。');\r\n      return;\r\n    }\r\n\r\n    console.log('开始物理预览...');\r\n    console.log('Box2D 版本: Flash 移植版');\r\n    \r\n    this.isPreviewMode = true;\r\n    this.previewPaused = false;\r\n    \r\n    // 保存所有物体的原始状态（用于重置）\r\n    this.previewOriginalState = [];\r\n    for (const obj of this.objects) {\r\n      if (obj.type === 'body') {\r\n        const body = obj as Body;\r\n        this.previewOriginalState.push({\r\n          id: body.id,\r\n          position: { x: body.position.x, y: body.position.y },\r\n          angle: body.angle\r\n        });\r\n      }\r\n    }\r\n    \r\n    // 隐藏设计UI，显示预览UI\r\n    this.canvas.style.cursor = 'default';\r\n    document.getElementById('preview-controls')!.style.display = 'flex';\r\n    document.getElementById('property-panel')!.style.display = 'none';\r\n    \r\n    // 禁用所有工具栏按钮和文件操作按钮\r\n    this.disableToolbar(true);\r\n    \r\n    // 设置预览按钮初始状态（播放中，显示暂停按钮）\r\n    document.getElementById('btn-preview-play')!.style.display = 'none';\r\n    document.getElementById('btn-preview-pause')!.style.display = 'inline-block';\r\n    \r\n    // 保存当前的坐标系参数（用于 Box2D 同步）\r\n    this.previewPPM = PPM;\r\n    this.previewOriginOffsetX = ORIGIN_OFFSET_X;\r\n    this.previewOriginOffsetY = ORIGIN_OFFSET_Y;\r\n    console.log(`保存坐标系快照: PPM=${this.previewPPM}, OriginX=${this.previewOriginOffsetX.toFixed(2)}, OriginY=${this.previewOriginOffsetY.toFixed(2)}`);\r\n    \r\n    // 初始化 Box2D 世界\r\n    this.initBox2DWorld();\r\n    \r\n    // 开始动画循环\r\n    this.startPreviewAnimation();\r\n    \r\n    this.updateStatus('物理预览模式', `物体数: ${this.objects.length}`, '按 ESC 或点击退出');\r\n  }\r\n\r\n  private initBox2DWorld(): void {\r\n    console.log('=== 初始化 Box2D 世界 ===');\r\n    console.log(`场景对象总数: ${this.objects.length}`);\r\n    \r\n    // 首先清空旧的映射（如果有）\r\n    this.box2dBodies.clear();\r\n    this.box2dJoints.clear();\r\n    console.log('已清空旧的 Box2D 映射');\r\n    \r\n    // 使用旧版 Box2D Flash API\r\n    const b2AABB = (window as any).b2AABB;\r\n    const b2World = (window as any).b2World;\r\n    const b2Vec2 = (window as any).b2Vec2;\r\n    \r\n    // 创建世界边界（AABB）\r\n    const worldAABB = new b2AABB();\r\n    worldAABB.minVertex.Set(-1000, -1000);\r\n    worldAABB.maxVertex.Set(1000, 1000);\r\n    \r\n    // 创建重力（统一使用 Y 向上为正的坐标系）\r\n    // 标准重力: 9.8 m/s² 向下\r\n    // Y 向上为正，所以向下是负值\r\n    const gravityValue = -9.8 * this.previewPPM; // 负值表示向下\r\n    const gravity = new b2Vec2(0, gravityValue);\r\n    const doSleep = true;\r\n    \r\n    console.log(`重力设置: ${gravityValue.toFixed(1)} Box2D单位/s² (= -9.8 m/s² 向下, Y轴向上, PPM=${this.previewPPM})`);\r\n    \r\n    // 创建世界\r\n    this.box2dWorld = new b2World(worldAABB, gravity, doSleep);\r\n    console.log('Box2D 世界已创建');\r\n    \r\n    // 统计物体和关节数量\r\n    const bodies = this.objects.filter(o => o.type === 'body');\r\n    const joints = this.objects.filter(o => o.type === 'joint');\r\n    console.log(`准备创建: ${bodies.length} 个物体, ${joints.length} 个关节`);\r\n    \r\n    // 创建所有刚体\r\n    let bodySuccessCount = 0;\r\n    let bodyFailCount = 0;\r\n    for (const obj of this.objects) {\r\n      if (obj.type === 'body') {\r\n        const body = obj as Body;\r\n        const b2Body = this.createBox2DBody(body);\r\n        if (b2Body) {\r\n          this.box2dBodies.set(body.id, b2Body);\r\n          bodySuccessCount++;\r\n        } else {\r\n          bodyFailCount++;\r\n        }\r\n      }\r\n    }\r\n    \r\n    console.log(`物体创建完成: ${bodySuccessCount} 成功, ${bodyFailCount} 失败`);\r\n    console.log(`当前 box2dBodies Map 大小: ${this.box2dBodies.size}`);\r\n    console.log(`box2dBodies 的 keys:`, Array.from(this.box2dBodies.keys()));\r\n    \r\n    // 创建所有关节\r\n    let jointSuccessCount = 0;\r\n    let jointFailCount = 0;\r\n    for (const obj of this.objects) {\r\n      if (obj.type === 'joint') {\r\n        const joint = obj as Joint;\r\n        const b2Joint = this.createBox2DJoint(joint);\r\n        if (b2Joint) {\r\n          this.box2dJoints.set(joint.id, b2Joint);\r\n          jointSuccessCount++;\r\n        } else {\r\n          jointFailCount++;\r\n        }\r\n      }\r\n    }\r\n    \r\n    console.log(`关节创建完成: ${jointSuccessCount} 成功, ${jointFailCount} 失败`);\r\n    console.log(`=== Box2D 世界初始化完成 ===`);\r\n    console.log(`最终结果: ${this.box2dBodies.size} 个物体, ${this.box2dJoints.size} 个关节`);\r\n  }\r\n\r\n  private createBox2DBody(body: Body): any {\r\n    console.log(`创建 Box2D Body: id=${body.id}, type=${body.bodyType}, shape=${body.shapeType}`);\r\n    \r\n    // 使用旧版 Box2D Flash API\r\n    const b2BodyDef = (window as any).b2BodyDef;\r\n    const b2BoxDef = (window as any).b2BoxDef;\r\n    const b2CircleDef = (window as any).b2CircleDef;\r\n    const b2PolyDef = (window as any).b2PolyDef;\r\n    \r\n    const bodyDef = new b2BodyDef();\r\n    \r\n    // 创建形状定义\r\n    let shapeDef: any = null;\r\n    \r\n    if (body.shapeType === 'box' && body.width && body.height) {\r\n      shapeDef = new b2BoxDef();\r\n      // extents 是半宽和半高（像素）\r\n      // 重要：使用保存的 PPM 参数\r\n      const halfWidth = body.width * this.previewPPM / 2;\r\n      const halfHeight = body.height * this.previewPPM / 2;\r\n      shapeDef.extents.Set(halfWidth, halfHeight);\r\n      console.log(`  - 矩形: 半宽=${halfWidth.toFixed(2)}px, 半高=${halfHeight.toFixed(2)}px [使用保存的 PPM=${this.previewPPM}]`);\r\n    } else if (body.shapeType === 'circle' && body.radius) {\r\n      shapeDef = new b2CircleDef();\r\n      // 重要：使用保存的 PPM 参数\r\n      shapeDef.radius = body.radius * this.previewPPM;\r\n      console.log(`  - 圆形: 半径=${shapeDef.radius.toFixed(2)}px [使用保存的 PPM=${this.previewPPM}]`);\r\n    } else if (body.shapeType === 'polygon' && body.vertices && body.vertices.length >= 3) {\r\n      // Box2D 旧版对多边形顶点数有限制（最多 8 个）\r\n      const maxVertices = 8;\r\n      if (body.vertices.length > maxVertices) {\r\n        console.error(`❌ 多边形顶点数超出限制: ${body.vertices.length} > ${maxVertices}`);\r\n        console.error(`   Box2D 旧版最多支持 ${maxVertices} 个顶点的多边形`);\r\n        return null;\r\n      }\r\n      \r\n      shapeDef = new b2PolyDef();\r\n      shapeDef.vertexCount = body.vertices.length;\r\n      \r\n      console.log(`  - 准备创建多边形: ${body.vertices.length} 个顶点`);\r\n      \r\n      // 多边形顶点（相对于物体中心）\r\n      // 重要：使用保存的 PPM 参数\r\n      // 注意：旧版 Box2D 需要使用 .Set() 方法设置顶点！\r\n      // 统一使用 Y 向上的坐标系，不翻转\r\n      for (let i = 0; i < body.vertices.length; i++) {\r\n        const v = body.vertices[i];\r\n        const vx = v.x * this.previewPPM;\r\n        const vy = v.y * this.previewPPM;  // Y 向上，不翻转\r\n        \r\n        // 使用 Set() 方法（旧版 API 要求）\r\n        shapeDef.vertices[i].Set(vx, vy);\r\n        console.log(`    顶点[${i}]: 局部(${v.x.toFixed(2)}, ${v.y.toFixed(2)}) -> Box2D(${vx.toFixed(2)}, ${vy.toFixed(2)})`);\r\n      }\r\n      \r\n      console.log(`  - 多边形顶点已设置 [使用保存的 PPM=${this.previewPPM}, Y向上]`);\r\n    }\r\n    \r\n    if (!shapeDef) {\r\n      console.error(`❌ 无法创建形状: ${body.shapeType}, width=${body.width}, height=${body.height}, radius=${body.radius}`);\r\n      return null;\r\n    }\r\n    \r\n    // 设置物理属性\r\n    shapeDef.density = body.bodyType === 'static' ? 0 : body.density;\r\n    shapeDef.friction = body.friction;\r\n    shapeDef.restitution = body.restitution;\r\n    console.log(`  - 物理属性: density=${shapeDef.density}, friction=${shapeDef.friction}, restitution=${shapeDef.restitution}`);\r\n    \r\n    // 添加形状到 body 定义（旧版必须先添加形状）\r\n    bodyDef.AddShape(shapeDef);\r\n    \r\n    // 设置位置（统一使用 Y 向上的坐标系）\r\n    // 重要：使用保存的坐标系参数，确保创建和同步使用相同的参数\r\n    const canvasX = (body.position.x - this.previewOriginOffsetX) * this.previewPPM + this.canvas.width / 2;\r\n    const canvasY = (body.position.y - this.previewOriginOffsetY) * this.previewPPM + this.canvas.height / 2; // Y向上，不翻转\r\n    bodyDef.position.Set(canvasX, canvasY);\r\n    console.log(`  - 位置: 世界(${body.position.x.toFixed(2)}, ${body.position.y.toFixed(2)}) -> Box2D(${canvasX.toFixed(0)}, ${canvasY.toFixed(0)}) [Y向上]`);\r\n    \r\n    // 设置旋转（统一使用逆时针为正）\r\n    bodyDef.rotation = body.angle; // Y向上，角度不反向\r\n    console.log(`  - 角度: ${(body.angle * 180 / Math.PI).toFixed(1)}° -> Box2D ${(bodyDef.rotation * 180 / Math.PI).toFixed(1)}°`);\r\n    \r\n    // 创建刚体\r\n    const b2Body = this.box2dWorld.CreateBody(bodyDef);\r\n    \r\n    if (b2Body) {\r\n      console.log(`✅ Body ${body.id} 创建成功`);\r\n      // 验证物体是否有形状\r\n      const shapeList = b2Body.GetShapeList();\r\n      if (shapeList) {\r\n        console.log(`  - 物体有形状定义: type=${shapeList.m_type}`);\r\n      } else {\r\n        console.warn(`  - ⚠️ 警告：物体没有形状定义！`);\r\n      }\r\n      // 验证物体类型\r\n      console.log(`  - 物体类型: ${body.bodyType} (static的质量应该为无穷大)`);\r\n    } else {\r\n      console.error(`❌ Body ${body.id} 创建失败！CreateBody 返回 null`);\r\n      console.error(`  - 详细信息: type=${body.bodyType}, shape=${body.shapeType}`);\r\n      console.error(`  - bodyDef:`, bodyDef);\r\n      console.error(`  - shapeDef:`, shapeDef);\r\n    }\r\n    \r\n    return b2Body;\r\n  }\r\n\r\n  private createBox2DJoint(joint: Joint): any {\r\n    console.log(`创建 Box2D Joint: id=${joint.id}, type=${joint.jointType}, bodyA=${joint.bodyAId}, bodyB=${joint.bodyBId}`);\r\n    \r\n    // 使用旧版 Box2D Flash API\r\n    const b2RevoluteJointDef = (window as any).b2RevoluteJointDef;\r\n    \r\n    const bodyA = this.box2dBodies.get(joint.bodyAId);\r\n    const bodyB = this.box2dBodies.get(joint.bodyBId);\r\n    \r\n    if (!bodyA) {\r\n      console.error(`❌ 关节 ${joint.id} 的 bodyA (${joint.bodyAId}) 未找到！`);\r\n      console.log(`  - 可用的 bodies:`, Array.from(this.box2dBodies.keys()));\r\n      return null;\r\n    }\r\n    \r\n    if (!bodyB) {\r\n      console.error(`❌ 关节 ${joint.id} 的 bodyB (${joint.bodyBId}) 未找到！`);\r\n      console.log(`  - 可用的 bodies:`, Array.from(this.box2dBodies.keys()));\r\n      return null;\r\n    }\r\n    \r\n    console.log(`  - bodyA 和 bodyB 都已找到`);\r\n    \r\n    if (joint.jointType === 'revolute') {\r\n      // 找到对应的 Body 对象\r\n      const bodyAObj = this.objects.find(o => o.id === joint.bodyAId) as Body;\r\n      const bodyBObj = this.objects.find(o => o.id === joint.bodyBId) as Body;\r\n      \r\n      if (!bodyAObj || !bodyBObj) {\r\n        console.error(`❌ 关节 ${joint.id} 对应的 Body 对象未找到！bodyAObj=${!!bodyAObj}, bodyBObj=${!!bodyBObj}`);\r\n        return null;\r\n      }\r\n      \r\n      console.log(`  - Body 对象: bodyA pos=(${bodyAObj.position.x.toFixed(2)}, ${bodyAObj.position.y.toFixed(2)}), bodyB pos=(${bodyBObj.position.x.toFixed(2)}, ${bodyBObj.position.y.toFixed(2)})`);\r\n      \r\n      // 创建旋转关节定义\r\n      const jointDef = new b2RevoluteJointDef();\r\n      jointDef.body1 = bodyA;\r\n      jointDef.body2 = bodyB;\r\n      \r\n      // 将局部锚点转换为世界坐标（我们的坐标系，米）\r\n      const anchorAWorld = localToWorld(\r\n        joint.anchorALocal.x,\r\n        joint.anchorALocal.y,\r\n        bodyAObj.position.x,\r\n        bodyAObj.position.y,\r\n        bodyAObj.angle\r\n      );\r\n      \r\n      // 将世界坐标转换为 Box2D 坐标（Y 向上，不翻转）\r\n      // 重要：使用保存的坐标系参数，确保与物体创建时使用相同的参数\r\n      const anchorCanvasX = (anchorAWorld.x - this.previewOriginOffsetX) * this.previewPPM + this.canvas.width / 2;\r\n      const anchorCanvasY = (anchorAWorld.y - this.previewOriginOffsetY) * this.previewPPM + this.canvas.height / 2; // Y 向上，不翻转\r\n      \r\n      // 设置锚点（旧版使用 anchorPoint）\r\n      jointDef.anchorPoint.Set(anchorCanvasX, anchorCanvasY);\r\n      \r\n      console.log(`  - 锚点: 局部(${joint.anchorALocal.x.toFixed(2)}, ${joint.anchorALocal.y.toFixed(2)}) -> 世界(${anchorAWorld.x.toFixed(2)}, ${anchorAWorld.y.toFixed(2)}) -> Box2D(${anchorCanvasX.toFixed(0)}, ${anchorCanvasY.toFixed(0)}) [Y向上]`);      \r\n      // 角度限制（旧版 API 完全支持！）\r\n      if (joint.enableLimit) {\r\n        jointDef.enableLimit = true;\r\n        jointDef.lowerAngle = joint.lowerAngle || -Math.PI / 2;\r\n        jointDef.upperAngle = joint.upperAngle || Math.PI / 2;\r\n        console.log(`  - 角度限制: ${(jointDef.lowerAngle * 180 / Math.PI).toFixed(0)}° 到 ${(jointDef.upperAngle * 180 / Math.PI).toFixed(0)}°`);\r\n      }\r\n      \r\n      // 马达功能（旧版 API 完全支持！）\r\n      if (joint.enableMotor) {\r\n        jointDef.enableMotor = true;\r\n        jointDef.motorSpeed = joint.motorSpeed || 0;\r\n        jointDef.motorTorque = joint.maxMotorTorque || 1000; // 旧版使用 motorTorque 而非 maxMotorTorque\r\n        console.log(`  - 马达: 速度=${jointDef.motorSpeed.toFixed(2)} rad/s, 扭矩=${jointDef.motorTorque}`);\r\n      }\r\n      \r\n      // 碰撞连接\r\n      jointDef.collideConnected = joint.collideConnected || false;\r\n      console.log(`  - 碰撞连接: ${jointDef.collideConnected}`);\r\n      \r\n      // 创建关节\r\n      try {\r\n        const b2Joint = this.box2dWorld.CreateJoint(jointDef);\r\n        if (b2Joint) {\r\n          console.log(`✅ Joint ${joint.id} 创建成功`);\r\n          return b2Joint;\r\n        } else {\r\n          console.error(`❌ Joint ${joint.id} 创建失败！CreateJoint 返回 null`);\r\n          return null;\r\n        }\r\n      } catch (error) {\r\n        console.error(`❌ Joint ${joint.id} 创建异常:`, error);\r\n        return null;\r\n      }\r\n    }\r\n    \r\n    console.warn(`⚠️ 不支持的关节类型: ${joint.jointType}`);\r\n    return null;\r\n  }\r\n\r\n  private startPreviewAnimation(): void {\r\n    const animate = () => {\r\n      if (!this.isPreviewMode) return;\r\n      \r\n      if (!this.previewPaused) {\r\n        // 步进物理模拟（旧版 API）\r\n        // 参数：timeStep, iterations（旧版只有一个迭代参数）\r\n        this.box2dWorld.Step(1 / 60, 10);\r\n        \r\n        // 同步 Box2D 状态到我们的对象\r\n        this.syncBox2DToObjects();\r\n      }\r\n      \r\n      // 渲染\r\n      this.render();\r\n      \r\n      // 继续动画\r\n      this.previewAnimationId = requestAnimationFrame(animate);\r\n    };\r\n    \r\n    animate();\r\n  }\r\n\r\n  private syncBox2DToObjects(): void {\r\n    for (const [id, b2Body] of this.box2dBodies.entries()) {\r\n      const body = this.objects.find(o => o.id === id) as Body;\r\n      if (body) {\r\n        // 旧版 API：直接访问 m_position 和 m_rotation\r\n        const pos = b2Body.m_position;\r\n        const angle = b2Body.m_rotation;\r\n        \r\n        // 从 Box2D 坐标转回世界坐标（Box2D 单位 -> 米，Y 向上不翻转）\r\n        // 重要：使用保存的坐标系参数，而不是当前的参数\r\n        // 这样即使用户在预览时拖动或缩放视图，Box2D 同步也是正确的\r\n        const canvasX = pos.x;\r\n        const canvasY = pos.y;\r\n        \r\n        // 使用保存的坐标系参数进行转换\r\n        const worldX = (canvasX - this.canvas.width / 2) / this.previewPPM + this.previewOriginOffsetX;\r\n        const worldY = (canvasY - this.canvas.height / 2) / this.previewPPM + this.previewOriginOffsetY; // Y 向上，不翻转\r\n        \r\n        body.position.x = worldX;\r\n        body.position.y = worldY;\r\n        body.angle = angle; // Y 向上，角度不反向\r\n      }\r\n    }\r\n  }\r\n\r\n  private pausePreview(): void {\r\n    this.previewPaused = true;\r\n    document.getElementById('btn-preview-play')!.style.display = 'inline-block';\r\n    document.getElementById('btn-preview-pause')!.style.display = 'none';\r\n  }\r\n\r\n  private resumePreview(): void {\r\n    this.previewPaused = false;\r\n    document.getElementById('btn-preview-play')!.style.display = 'none';\r\n    document.getElementById('btn-preview-pause')!.style.display = 'inline-block';\r\n  }\r\n\r\n  private rebuildBox2DWorldWithNewScale(): void {\r\n    console.log('=== 缩放变化，重建 Box2D 世界 ===');\r\n    console.log(`新的 PPM: ${PPM}, 新的 ORIGIN_OFFSET: (${ORIGIN_OFFSET_X.toFixed(2)}, ${ORIGIN_OFFSET_Y.toFixed(2)})`);\r\n    \r\n    // 暂停模拟（不停止动画循环）\r\n    const wasPaused = this.previewPaused;\r\n    this.previewPaused = true;\r\n    \r\n    // 保存当前所有物体的物理状态（位置、角度、速度）\r\n    const currentStates: Array<{\r\n      id: string;\r\n      position: Vector2;\r\n      angle: number;\r\n      linearVelocity?: { x: number; y: number };\r\n      angularVelocity?: number;\r\n    }> = [];\r\n    \r\n    for (const [id, b2Body] of this.box2dBodies.entries()) {\r\n      const body = this.objects.find(o => o.id === id) as Body;\r\n      if (body) {\r\n        // 保存当前的位置和角度（已经从 Box2D 同步到 objects）\r\n        const state: any = {\r\n          id: body.id,\r\n          position: { x: body.position.x, y: body.position.y },\r\n          angle: body.angle\r\n        };\r\n        \r\n        // 保存速度（如果是动态物体）\r\n        if (body.bodyType === 'dynamic' && b2Body.m_linearVelocity) {\r\n          state.linearVelocity = {\r\n            x: b2Body.m_linearVelocity.x,\r\n            y: b2Body.m_linearVelocity.y\r\n          };\r\n          state.angularVelocity = b2Body.m_angularVelocity || 0;\r\n        }\r\n        \r\n        currentStates.push(state);\r\n      }\r\n    }\r\n    \r\n    console.log(`已保存 ${currentStates.length} 个物体的当前状态`);\r\n    \r\n    // 销毁旧的 Box2D 世界\r\n    if (this.box2dWorld) {\r\n      this.box2dWorld = null;\r\n    }\r\n    \r\n    // 更新坐标系快照为新的值\r\n    this.previewPPM = PPM;\r\n    this.previewOriginOffsetX = ORIGIN_OFFSET_X;\r\n    this.previewOriginOffsetY = ORIGIN_OFFSET_Y;\r\n    console.log(`更新坐标系快照: PPM=${this.previewPPM}, OriginX=${this.previewOriginOffsetX.toFixed(2)}, OriginY=${this.previewOriginOffsetY.toFixed(2)}`);\r\n    \r\n    // 重新初始化 Box2D 世界（使用新的坐标系参数）\r\n    this.initBox2DWorld();\r\n    \r\n    // 恢复物体的速度（如果有）\r\n    for (const state of currentStates) {\r\n      const b2Body = this.box2dBodies.get(state.id);\r\n      if (b2Body && state.linearVelocity) {\r\n        // 速度单位是画布像素/秒，不需要根据 PPM 缩放\r\n        b2Body.m_linearVelocity.Set(state.linearVelocity.x, state.linearVelocity.y);\r\n        b2Body.m_angularVelocity = state.angularVelocity || 0;\r\n        console.log(`恢复物体 ${state.id} 的速度: (${state.linearVelocity.x.toFixed(2)}, ${state.linearVelocity.y.toFixed(2)}), 角速度: ${state.angularVelocity}`);\r\n      }\r\n    }\r\n    \r\n    // 恢复暂停状态\r\n    this.previewPaused = wasPaused;\r\n    \r\n    // 渲染新的状态\r\n    this.render();\r\n    \r\n    console.log('=== Box2D 世界重建完成 ===');\r\n  }\r\n\r\n  private resetPreview(): void {\r\n    console.log('=== 重置物理预览 ===');\r\n    \r\n    // 停止当前模拟\r\n    if (this.previewAnimationId) {\r\n      cancelAnimationFrame(this.previewAnimationId);\r\n      this.previewAnimationId = null;\r\n      console.log('动画循环已停止');\r\n    }\r\n    \r\n    // 销毁旧的 Box2D 世界\r\n    if (this.box2dWorld) {\r\n      console.log('销毁旧的 Box2D 世界');\r\n      this.box2dWorld = null; // 让 GC 处理\r\n    }\r\n    \r\n    console.log('恢复物体到原始状态...');\r\n    // 恢复所有物体的原始状态\r\n    let restoredCount = 0;\r\n    for (const savedState of this.previewOriginalState) {\r\n      const body = this.objects.find(o => o.id === savedState.id) as Body;\r\n      if (body) {\r\n        body.position.x = savedState.position.x;\r\n        body.position.y = savedState.position.y;\r\n        body.angle = savedState.angle;\r\n        restoredCount++;\r\n      }\r\n    }\r\n    console.log(`已恢复 ${restoredCount} 个物体的状态`);\r\n    \r\n    // 重新初始化世界（会清空并重建 box2dBodies 和 box2dJoints）\r\n    this.initBox2DWorld();\r\n    this.previewPaused = false;\r\n    \r\n    // 重置按钮状态为播放中\r\n    document.getElementById('btn-preview-play')!.style.display = 'none';\r\n    document.getElementById('btn-preview-pause')!.style.display = 'inline-block';\r\n    \r\n    // 重新启动动画循环\r\n    this.startPreviewAnimation();\r\n    \r\n    console.log('=== 重置完成 ===');\r\n    this.updateStatus('物理预览已重置');\r\n  }\r\n\r\n  private exitPreview(): void {\r\n    console.log('退出物理预览');\r\n    \r\n    this.isPreviewMode = false;\r\n    \r\n    // 停止动画\r\n    if (this.previewAnimationId) {\r\n      cancelAnimationFrame(this.previewAnimationId);\r\n      this.previewAnimationId = null;\r\n    }\r\n    \r\n    // 销毁 Box2D 世界\r\n    if (this.box2dWorld) {\r\n      this.box2dWorld = null;\r\n    }\r\n    \r\n    this.box2dBodies.clear();\r\n    this.box2dJoints.clear();\r\n    \r\n    // 恢复所有物体的原始状态\r\n    for (const savedState of this.previewOriginalState) {\r\n      const body = this.objects.find(o => o.id === savedState.id) as Body;\r\n      if (body) {\r\n        body.position.x = savedState.position.x;\r\n        body.position.y = savedState.position.y;\r\n        body.angle = savedState.angle;\r\n      }\r\n    }\r\n    \r\n    // 清空保存的状态\r\n    this.previewOriginalState = [];\r\n    \r\n    // 恢复UI\r\n    document.getElementById('preview-controls')!.style.display = 'none';\r\n    document.getElementById('property-panel')!.style.display = 'flex';\r\n    this.canvas.style.cursor = 'crosshair';\r\n    \r\n    // 重新启用所有工具栏按钮和文件操作按钮\r\n    this.disableToolbar(false);\r\n    \r\n    // 重置按钮状态（为下次预览做准备）\r\n    document.getElementById('btn-preview-play')!.style.display = 'none';\r\n    document.getElementById('btn-preview-pause')!.style.display = 'none';\r\n    \r\n    // 重新渲染（使用原始状态）\r\n    this.render();\r\n    \r\n    this.updateStatus('已退出预览模式');\r\n  }\r\n}\r\n\r\n// ==================== 初始化 ====================\r\n\r\nwindow.addEventListener('DOMContentLoaded', () => {\r\n  new MapDesigner('design-canvas');\r\n});\r\n"],"names":["AddObjectCommand","objects","object","onUpdate","index","DeleteObjectCommand","__publicField","MoveObjectCommand","body","oldX","oldY","newX","newY","ModifyPropertyCommand","property","oldValue","newValue","CommandHistory","command","DEFAULT_CANVAS_WIDTH","DEFAULT_CANVAS_HEIGHT","DEFAULT_BODY_DENSITY","DEFAULT_BODY_FRICTION","DEFAULT_BODY_RESTITUTION","DEFAULT_BODY_LINEAR_DAMPING","DEFAULT_BODY_ANGULAR_DAMPING","DEFAULT_BODY_GRAVITY_SCALE","JOINT_ANCHOR_RADIUS","MIN_SHAPE_WIDTH","MIN_SHAPE_HEIGHT","MIN_SHAPE_RADIUS","MAX_POLYGON_VERTICES","VERTEX_RADIUS_NORMAL","VERTEX_RADIUS_HOVER","TRANSFORM_HANDLE_SIZE","TRANSFORM_HANDLE_HALF_SIZE","TRANSFORM_ROTATE_HANDLE_RADIUS","TRANSFORM_ROTATE_HANDLE_OFFSET","TRANSFORM_HANDLE_COLOR","TRANSFORM_HANDLE_STROKE_COLOR","TRANSFORM_ROTATE_HANDLE_COLOR","ANCHOR_RADIUS_NORMAL","ANCHOR_RADIUS_SELECTED","VERTEX_CONTROL_RADIUS","DELETE_HOVER_RADIUS","COLOR_GRID","COLOR_GRID_TEXT","COLOR_ORIGIN","COLOR_SELECTED","COLOR_HIGHLIGHT","COLOR_DRAWING","COLOR_DELETE_HOVER","COLOR_TEXT","COLOR_TEXT_DARK","COLOR_JOINT","LINE_WIDTH_GRID","LINE_WIDTH_ORIGIN","LINE_WIDTH_SELECTED","LINE_WIDTH_VERTEX_HIGHLIGHT","LINE_WIDTH_VERTEX_EDITING","LINE_WIDTH_DRAWING","LINE_WIDTH_JOINT","PPM","ORIGIN_OFFSET_X","ORIGIN_OFFSET_Y","GRID_SIZE","SELECTION_COLOR","BODY_COLORS","generateId","prefix","box2DToCanvas","box2dX","box2dY","canvasWidth","canvasHeight","offsetX","offsetY","canvasToBox2D","canvasX","canvasY","box2DToCanvasScale","box2dValue","distance","x1","y1","x2","y2","dx","dy","worldToLocal","worldX","worldY","bodyX","bodyY","bodyAngle","cos","sin","localToWorld","localX","localY","pointInRotatedRect","px","py","rectX","rectY","width","height","angle","local","halfW","halfH","pointInCircle","cx","cy","radius","pointInPolygon","vertices","centerX","centerY","inside","i","j","xi","yi","xj","yj","downloadFile","content","filename","blob","url","link","MapDesigner","canvasId","btn","e","tool","file","canvasWidthSlider","canvasWidthValue","canvasHeightSlider","canvasHeightValue","ppmSlider","ppmValue","originXSlider","originXValue","originYSlider","originYValue","resetBtn","value","panel","isCollapsed","rect","scaleX","scaleY","pos","deltaX","deltaY","vertexCount","maxVertices","hint","joint","isAnchorA","o","localPos","angleDelta","_e","anchor","prop","cmd","oldAngle","newAngle","changed","oldWidth","newWidth","v","oldVertices","newVertices","worldPos","obj","mouseX","mouseY","worldPosBefore","delta","oldPPM","worldPosAfter","clampedX","clampedY","scaleHandle","vertexIndex","vertex","anchorHit","firstVertex","bodyB","newObject","sum","localVertices","area","shapeType","x","y","bodyA","anchorA","anchorB","anchorALocal","anchorBLocal","hitRadius","anchorAWorld","anchorBWorld","minX","maxX","maxY","worldCorners","c","r","worldVertices","boxCenterX","handleY","handleRadius","minY","topLeft","topRight","bottomLeft","bottomRight","mouseCanvas","handles","handle","worldVx","worldVy","currentPos","fixedLocalX","fixedLocalY","scaleXDirection","scaleYDirection","fixedWorldX","fixedWorldY","fixedToMouseX","fixedToMouseY","localFixedToMouseX","localFixedToMouseY","newHeight","halfWidth","halfHeight","newHalfW","newHalfH","newFixedLocalX","newFixedLocalY","distanceToCenter","newRadius","startWidth","startHeight","relativeX","relativeY","scaledRelativeX","scaledRelativeY","newMinX","newMaxX","newMinY","newMaxY","newCenterX","newCenterY","objToDelete","ctx","worldMinX","worldMaxX","worldMinY","worldMaxY","canvasPos","origin","firstCanvas","lastVertex","lastCanvas","text","bodyCenter","w","h","boxTop","isSelected","vCanvas","canvasVertex","anchorACanvas","anchorBCanvas","anchorRadius","isDraggingAnchorA","isDraggingAnchorB","midX","midY","friction","frictionInt","thirdDigit","behaviorType","newFriction","shapePropertiesHTML","updateProp","id","isCheckbox","elem","posXInput","posYInput","angleInput","_","xInput","yInput","frictionInput","oldFriction","behaviorSelect","isDegree","updateAnchor","isX","undoBtn","redoBtn","messages","statusTool","statusObjects","statusCoords","statusMessage","data","error","box2dData","json","fixtures","disabled","k","b2AABB","b2World","b2Vec2","worldAABB","gravityValue","gravity","doSleep","bodies","joints","bodySuccessCount","bodyFailCount","b2Body","jointSuccessCount","jointFailCount","b2Joint","b2BodyDef","b2BoxDef","b2CircleDef","b2PolyDef","bodyDef","shapeDef","vx","vy","shapeList","b2RevoluteJointDef","bodyAObj","bodyBObj","jointDef","anchorCanvasX","anchorCanvasY","animate","wasPaused","currentStates","state","restoredCount","savedState"],"mappings":"82BAgBO,MAAMA,CAAoC,CAC/C,YACUC,EACAC,EACAC,EACR,CAHQ,KAAA,QAAAF,EACA,KAAA,OAAAC,EACA,KAAA,SAAAC,CACP,CAEH,SAAgB,CACd,KAAK,QAAQ,KAAK,KAAK,MAAM,EAC7B,KAAK,SAAA,CACP,CAEA,MAAa,CACX,MAAMC,EAAQ,KAAK,QAAQ,QAAQ,KAAK,MAAM,EAC1CA,EAAQ,IACV,KAAK,QAAQ,OAAOA,EAAO,CAAC,EAE9B,KAAK,SAAA,CACP,CAEA,MAAa,CACX,KAAK,QAAA,CACP,CACF,CAGO,MAAMC,EAAuC,CAGlD,YACUJ,EACAC,EACAC,EACR,CANMG,EAAA,aAAgB,IAGd,KAAA,QAAAL,EACA,KAAA,OAAAC,EACA,KAAA,SAAAC,EAER,KAAK,MAAQF,EAAQ,QAAQC,CAAM,CACrC,CAEA,SAAgB,CACV,KAAK,MAAQ,IACf,KAAK,QAAQ,OAAO,KAAK,MAAO,CAAC,EAEnC,KAAK,SAAA,CACP,CAEA,MAAa,CACP,KAAK,MAAQ,IACf,KAAK,QAAQ,OAAO,KAAK,MAAO,EAAG,KAAK,MAAM,EAEhD,KAAK,SAAA,CACP,CAEA,MAAa,CACX,KAAK,QAAA,CACP,CACF,CAGO,MAAMK,EAAqC,CAMhD,YACUC,EACRC,EACAC,EACAC,EACAC,EACQT,EACR,CAZMG,EAAA,aACAA,EAAA,aACAA,EAAA,aACAA,EAAA,aAGE,KAAA,KAAAE,EAKA,KAAA,SAAAL,EAER,KAAK,KAAOM,EACZ,KAAK,KAAOC,EACZ,KAAK,KAAOC,EACZ,KAAK,KAAOC,CACd,CAEA,SAAgB,CACd,KAAK,KAAK,SAAS,EAAI,KAAK,KAC5B,KAAK,KAAK,SAAS,EAAI,KAAK,KAC5B,KAAK,SAAA,CACP,CAEA,MAAa,CACX,KAAK,KAAK,SAAS,EAAI,KAAK,KAC5B,KAAK,KAAK,SAAS,EAAI,KAAK,KAC5B,KAAK,SAAA,CACP,CAEA,MAAa,CACX,KAAK,QAAA,CACP,CACF,CAGO,MAAMC,CAAyC,CAIpD,YACUX,EACAY,EACRC,EACAC,EACQb,EACR,CATMG,EAAA,iBACAA,EAAA,iBAGE,KAAA,OAAAJ,EACA,KAAA,SAAAY,EAGA,KAAA,SAAAX,EAER,KAAK,SAAWY,EAChB,KAAK,SAAWC,CAClB,CAEA,SAAgB,CACd,KAAK,OAAO,KAAK,QAAQ,EAAI,KAAK,SAClC,KAAK,SAAA,CACP,CAEA,MAAa,CACX,KAAK,OAAO,KAAK,QAAQ,EAAI,KAAK,SAClC,KAAK,SAAA,CACP,CAEA,MAAa,CACX,KAAK,QAAA,CACP,CACF,CAyBO,MAAMC,EAAe,CAArB,cACGX,EAAA,eAAqB,CAAA,GACrBA,EAAA,oBAAuB,IACvBA,EAAA,sBAAyB,IAEjC,SAAmB,CACjB,OAAO,KAAK,cAAgB,CAC9B,CAEA,SAAmB,CACjB,OAAO,KAAK,aAAe,KAAK,QAAQ,OAAS,CACnD,CAEA,QAAQY,EAAwB,CAC9BA,EAAQ,QAAA,EAGR,KAAK,QAAQ,OAAO,KAAK,aAAe,CAAC,EAGzC,KAAK,QAAQ,KAAKA,CAAO,EACzB,KAAK,eAGD,KAAK,QAAQ,OAAS,KAAK,iBAC7B,KAAK,QAAQ,MAAA,EACb,KAAK,eAET,CAEA,MAAa,CACP,KAAK,YACP,KAAK,QAAQ,KAAK,YAAY,EAAE,KAAA,EAChC,KAAK,eAET,CAEA,MAAa,CACP,KAAK,YACP,KAAK,eACL,KAAK,QAAQ,KAAK,YAAY,EAAE,KAAA,EAEpC,CAEA,OAAc,CACZ,KAAK,QAAU,CAAA,EACf,KAAK,aAAe,EACtB,CAEA,gBAAyB,CACvB,OAAO,KAAK,QAAQ,MACtB,CAEA,iBAA0B,CACxB,OAAO,KAAK,YACd,CACF,CClNO,MAAMC,EAAuB,IACvBC,EAAwB,IAgBxBC,GAAuB,EACvBC,GAAwB,GACxBC,GAA2B,GAC3BC,GAA8B,EAC9BC,GAA+B,EAC/BC,GAA6B,EAa7BC,GAAsB,EAKtBC,GAAkB,GAClBC,GAAmB,GACnBC,GAAmB,IAOnBC,GAAuB,EAIvBC,GAAuB,EACvBC,GAAsB,EAItBC,EAAwB,EACxBC,EAA6BD,EAAwB,EACrDE,GAAiC,EACjCC,GAAiC,GAEjCC,GAAyB,UACzBC,GAAgC,UAChCC,GAAgC,UAGhCC,GAAuB,EACvBC,GAAyB,EACzBC,GAAwB,EAGxBC,GAAsB,EAItBC,GAAa,UACbC,GAAkB,OAClBC,GAAe,UAGfC,EAAiB,UACjBC,EAAkB,UAIlBC,GAAgB,OAChBC,EAAqB,UAGrBC,EAAa,OACbC,EAAkB,UAGlBC,EAAc,UAGdC,GAAkB,EAClBC,GAAoB,EACpBC,EAAsB,EACtBC,GAA8B,EAC9BC,GAA4B,EAC5BC,GAAqB,EACrBC,GAAmB,ECahC,IAAIC,EAAM,GAGNC,EAAkB,EAClBC,EAAkB,EAEtB,MAAMC,EAAY,EACZC,GAAkB,UAClBC,GAAc,CAClB,OAAQ,UACR,QAAS,UACT,UAAW,SACb,EAIA,SAASC,GAAWC,EAAwB,CAC1C,MAAO,GAAGA,CAAM,GAAG,KAAK,IAAA,CAAK,IAAI,KAAK,OAAA,EAAS,SAAS,EAAE,EAAE,OAAO,EAAG,CAAC,CAAC,EAC1E,CAMA,SAASC,EAAcC,EAAgBC,EAAgBC,EAAqBC,EAA+B,CAEzG,MAAMC,EAAUJ,EAASR,EACnBa,EAAUJ,EAASR,EAGzB,MAAO,CACL,EAAGS,EAAc,EAAIE,EAAUb,EAC/B,EAAGY,EAAe,EAAIE,EAAUd,CAAA,CAEpC,CAEA,SAASe,EAAcC,EAAiBC,EAAiBN,EAAqBC,EAA+B,CAE3G,MAAMH,GAAUO,EAAUL,EAAc,GAAKX,EACvCU,GAAUE,EAAe,EAAIK,GAAWjB,EAG9C,MAAO,CACL,EAAGS,EAASR,EACZ,EAAGS,EAASR,CAAA,CAEhB,CAEA,SAASgB,EAAmBC,EAA4B,CAEtD,OAAOA,EAAanB,CACtB,CAOA,SAASoB,EAASC,EAAYC,EAAYC,EAAYC,EAAoB,CACxE,MAAMC,EAAKF,EAAKF,EACVK,EAAKF,EAAKF,EAChB,OAAO,KAAK,KAAKG,EAAKA,EAAKC,EAAKA,CAAE,CACpC,CAEA,SAASC,EAAaC,EAAgBC,EAAgBC,EAAeC,EAAeC,EAA4B,CAC9G,MAAMP,EAAKG,EAASE,EACdJ,EAAKG,EAASE,EACdE,EAAM,KAAK,IAAI,CAACD,CAAS,EACzBE,EAAM,KAAK,IAAI,CAACF,CAAS,EAC/B,MAAO,CACL,EAAGP,EAAKQ,EAAMP,EAAKQ,EACnB,EAAGT,EAAKS,EAAMR,EAAKO,CAAA,CAEvB,CAEA,SAASE,EAAaC,EAAgBC,EAAgBP,EAAeC,EAAeC,EAA4B,CAC9G,MAAMC,EAAM,KAAK,IAAID,CAAS,EACxBE,EAAM,KAAK,IAAIF,CAAS,EAC9B,MAAO,CACL,EAAGF,EAAQM,EAASH,EAAMI,EAASH,EACnC,EAAGH,EAAQK,EAASF,EAAMG,EAASJ,CAAA,CAEvC,CAEA,SAASK,GAAmBC,EAAYC,EAAYC,EAAeC,EAAeC,EAAeC,EAAgBC,EAAwB,CACvI,MAAMC,EAAQnB,EAAaY,EAAIC,EAAIC,EAAOC,EAAOG,CAAK,EAChDE,EAAQJ,EAAQ,EAChBK,EAAQJ,EAAS,EACvB,OAAOE,EAAM,GAAK,CAACC,GAASD,EAAM,GAAKC,GAASD,EAAM,GAAK,CAACE,GAASF,EAAM,GAAKE,CAClF,CAEA,SAASC,GAAcV,EAAYC,EAAYU,EAAYC,EAAYC,EAAyB,CAC9F,OAAOhC,EAASmB,EAAIC,EAAIU,EAAIC,CAAE,GAAKC,CACrC,CAEA,SAASC,GAAed,EAAYC,EAAYc,EAAqBC,EAAiBC,EAAiBX,EAAwB,CAE7H,MAAMC,EAAQnB,EAAaY,EAAIC,EAAIe,EAASC,EAASX,CAAK,EAG1D,IAAIY,EAAS,GACb,QAASC,EAAI,EAAGC,EAAIL,EAAS,OAAS,EAAGI,EAAIJ,EAAS,OAAQK,EAAID,IAAK,CACrE,MAAME,EAAKN,EAASI,CAAC,EAAE,EACjBG,EAAKP,EAASI,CAAC,EAAE,EACjBI,EAAKR,EAASK,CAAC,EAAE,EACjBI,EAAKT,EAASK,CAAC,EAAE,EAEHE,EAAKf,EAAM,GAAQiB,EAAKjB,EAAM,GAC/CA,EAAM,GAAKgB,EAAKF,IAAOd,EAAM,EAAIe,IAAOE,EAAKF,GAAMD,MAC9B,CAACH,EAC3B,CACA,OAAOA,CACT,CAEA,SAASO,GAAaC,EAAiBC,EAAwB,CAC7D,MAAMC,EAAO,IAAI,KAAK,CAACF,CAAO,EAAG,CAAE,KAAM,mBAAoB,EACvDG,EAAM,IAAI,gBAAgBD,CAAI,EAC9BE,EAAO,SAAS,cAAc,GAAG,EACvCA,EAAK,KAAOD,EACZC,EAAK,SAAWH,EAChB,SAAS,KAAK,YAAYG,CAAI,EAC9BA,EAAK,MAAA,EACL,SAAS,KAAK,YAAYA,CAAI,EAC9B,IAAI,gBAAgBD,CAAG,CACzB,CAIA,MAAME,EAAY,CAkEhB,YAAYC,EAAkB,CAjEtB/H,EAAA,eACAA,EAAA,YACAA,EAAA,eAAuB,CAAA,GACvBA,EAAA,sBAAmC,MACnCA,EAAA,mBAAoB,UAEpBA,EAAA,qBAA6B,MAC7BA,EAAA,uBAA6B,CAAA,GAC7BA,EAAA,kBAA0B,MAC1BA,EAAA,oBAA+B,MAE/BA,EAAA,kBAAa,IACbA,EAAA,oBAA+B,MAC/BA,EAAA,gBAAoB,CAAE,EAAG,EAAG,EAAG,CAAA,GAG/BA,EAAA,uBACAA,EAAA,oBAA+B,MAG/BA,EAAA,sBAA8D,MAC9DA,EAAA,sBAAiC,MAGjCA,EAAA,iBAAY,IACZA,EAAA,uBAAkB,GAClBA,EAAA,uBAAkB,GAClBA,EAAA,sBAAiB,GACjBA,EAAA,sBAAiB,GAGjBA,EAAA,yBAAoB,IACpBA,EAAA,mBAA2B,MAC3BA,EAAA,0BAA6B,IAC7BA,EAAA,uBAAkC,MAGlCA,EAAA,kBAAa,IACbA,EAAA,wBAAmB,GACnBA,EAAA,6BAAwB,GAGxBA,EAAA,iBAAY,IACZA,EAAA,mBAAsF,MACtFA,EAAA,yBAA6B,CAAE,EAAG,EAAG,EAAG,CAAA,GACxCA,EAAA,uBAAkB,GAClBA,EAAA,uBAAkB,GAClBA,EAAA,wBAAmB,GACnBA,EAAA,wBAAmB,GACnBA,EAAA,0BAAgC,CAAA,GAGhCA,EAAA,qBAAgB,IAChBA,EAAA,kBAAkB,MAClBA,EAAA,uBAAoC,KACpCA,EAAA,uBAAoC,KACpCA,EAAA,0BAAoC,MACpCA,EAAA,qBAAgB,IAChBA,EAAA,4BAA8E,CAAA,GAG9EA,EAAA,kBAAa,IACbA,EAAA,4BAAuB,GACvBA,EAAA,4BAAuB,GAG7B,KAAK,OAAS,SAAS,eAAe+H,CAAQ,EAC9C,KAAK,IAAM,KAAK,OAAO,WAAW,IAAI,EACtC,KAAK,eAAiB,IAAIpH,GAE1B,KAAK,oBAAA,EACL,KAAK,sBAAA,EACL,KAAK,OAAA,CACP,CAEQ,qBAA4B,CAElC,SAAS,iBAAiB,WAAW,EAAE,QAAQqH,GAAO,CACpDA,EAAI,iBAAiB,QAAUC,GAAM,CACnC,MAAMC,EAAQD,EAAE,cAA8B,QAAQ,KACtD,KAAK,QAAQC,CAAI,CACnB,CAAC,CACH,CAAC,EAGD,KAAK,OAAO,iBAAiB,YAAa,KAAK,YAAY,KAAK,IAAI,CAAC,EACrE,KAAK,OAAO,iBAAiB,YAAa,KAAK,YAAY,KAAK,IAAI,CAAC,EACrE,KAAK,OAAO,iBAAiB,UAAW,KAAK,UAAU,KAAK,IAAI,CAAC,EACjE,KAAK,OAAO,iBAAiB,WAAY,KAAK,cAAc,KAAK,IAAI,CAAC,EAGtE,KAAK,OAAO,iBAAiB,QAAS,KAAK,aAAa,KAAK,IAAI,EAAG,CAAE,QAAS,EAAA,CAAO,EAGtF,KAAK,OAAO,iBAAiB,cAAgB,GAAM,EAAE,gBAAgB,EAGrE,SAAS,eAAe,SAAS,GAAG,iBAAiB,QAAS,IAAM,KAAK,QAAQ,EACjF,SAAS,eAAe,UAAU,GAAG,iBAAiB,QAAS,IAAM,KAAK,SAAS,EACnF,SAAS,eAAe,UAAU,GAAG,iBAAiB,QAAS,IAAM,KAAK,SAAS,EACnF,SAAS,eAAe,YAAY,GAAG,iBAAiB,QAAS,IAAM,KAAK,aAAa,EAGzF,SAAS,eAAe,kBAAkB,GAAG,iBAAiB,QAAS,IAAM,KAAK,aAAa,EAG/F,SAAS,eAAe,aAAa,GAAG,iBAAiB,QAAS,IAAM,KAAK,eAAe,EAC5F,SAAS,eAAe,kBAAkB,GAAG,iBAAiB,QAAS,IAAM,KAAK,eAAe,EACjG,SAAS,eAAe,mBAAmB,GAAG,iBAAiB,QAAS,IAAM,KAAK,cAAc,EACjG,SAAS,eAAe,mBAAmB,GAAG,iBAAiB,QAAS,IAAM,KAAK,cAAc,EACjG,SAAS,eAAe,kBAAkB,GAAG,iBAAiB,QAAS,IAAM,KAAK,aAAa,EAG/F,SAAS,eAAe,UAAU,GAAG,iBAAiB,QAAS,IAAM,KAAK,MAAM,EAChF,SAAS,eAAe,UAAU,GAAG,iBAAiB,QAAS,IAAM,KAAK,MAAM,EAE9D,SAAS,eAAe,YAAY,GAC3C,iBAAiB,SAAW,GAAM,CAC3C,MAAMC,EAAQ,EAAE,OAA4B,QAAQ,CAAC,EACjDA,GAAM,KAAK,aAAaA,CAAI,CAClC,CAAC,EAGD,SAAS,iBAAiB,UAAY,GAAM,CAE1C,GAAI,KAAK,cAAe,CAClB,EAAE,MAAQ,WACZ,EAAE,eAAA,EACF,KAAK,YAAA,GAEP,MACF,CAGI,EAAE,MAAQ,UAAY,KAAK,eAC7B,KAAK,eAAA,EACI,EAAE,SAAW,EAAE,MAAQ,KAChC,EAAE,eAAA,EACF,KAAK,KAAA,GACI,EAAE,SAAW,EAAE,MAAQ,KAChC,EAAE,eAAA,EACF,KAAK,KAAA,GACI,EAAE,MAAQ,MACnB,EAAE,eAAA,EACF,KAAK,cAAA,EAET,CAAC,EAGD,KAAK,kBAAA,CACP,CAEQ,mBAA0B,CAChC,MAAMC,EAAoB,SAAS,eAAe,qBAAqB,EACjEC,EAAmB,SAAS,eAAe,oBAAoB,EAC/DC,EAAqB,SAAS,eAAe,sBAAsB,EACnEC,EAAoB,SAAS,eAAe,qBAAqB,EACjEC,EAAY,SAAS,eAAe,YAAY,EAChDC,EAAW,SAAS,eAAe,WAAW,EAC9CC,EAAgB,SAAS,eAAe,iBAAiB,EACzDC,EAAe,SAAS,eAAe,gBAAgB,EACvDC,EAAgB,SAAS,eAAe,iBAAiB,EACzDC,EAAe,SAAS,eAAe,gBAAgB,EACvDC,EAAW,SAAS,eAAe,gBAAgB,EAGzDV,GAAmB,iBAAiB,QAAUH,GAAM,CAClD,MAAMc,EAAQ,SAAUd,EAAE,OAA4B,KAAK,EAC3D,KAAK,OAAO,MAAQc,EAChBV,IAAkBA,EAAiB,YAAcU,EAAM,SAAA,GAC3D,KAAK,OAAA,EACL,KAAK,aAAa,YAAcA,EAAQ,IAAI,CAC9C,CAAC,EAGDT,GAAoB,iBAAiB,QAAUL,GAAM,CACnD,MAAMc,EAAQ,SAAUd,EAAE,OAA4B,KAAK,EAC3D,KAAK,OAAO,OAASc,EACjBR,IAAmBA,EAAkB,YAAcQ,EAAM,SAAA,GAC7D,KAAK,OAAA,EACL,KAAK,aAAa,YAAcA,EAAQ,IAAI,CAC9C,CAAC,EAGDP,GAAW,iBAAiB,QAAUP,GAAM,CAC1C,MAAMc,EAAQ,SAAUd,EAAE,OAA4B,KAAK,EAC3DzE,EAAMuF,EACFN,IAAUA,EAAS,YAAcM,EAAM,SAAA,GAC3C,KAAK,OAAA,CACP,CAAC,EAGDL,GAAe,iBAAiB,QAAUT,GAAM,CAC9C,MAAMc,EAAQ,WAAYd,EAAE,OAA4B,KAAK,EAC7DxE,EAAkBsF,EACdJ,IAAcA,EAAa,YAAcI,EAAM,QAAQ,CAAC,GAC5D,KAAK,OAAA,CACP,CAAC,EAGDH,GAAe,iBAAiB,QAAUX,GAAM,CAC9C,MAAMc,EAAQ,WAAYd,EAAE,OAA4B,KAAK,EAC7DvE,EAAkBqF,EACdF,IAAcA,EAAa,YAAcE,EAAM,QAAQ,CAAC,GAC5D,KAAK,OAAA,CACP,CAAC,EAGDD,GAAU,iBAAiB,QAAS,IAAM,CAExC,KAAK,OAAO,MAAQjI,EACpB,KAAK,OAAO,OAASC,EACjBsH,IAAmBA,EAAkB,MAAQ,OAAOvH,CAAoB,GACxEwH,IAAkBA,EAAiB,YAAc,OAAOxH,CAAoB,GAC5EyH,IAAoBA,EAAmB,MAAQ,OAAOxH,CAAqB,GAC3EyH,IAAmBA,EAAkB,YAAc,OAAOzH,CAAqB,GAGnF0C,EAAM,GACNC,EAAkB,EAClBC,EAAmB5C,EAAwB,EAAK0C,EAE5CgF,MAAqB,MAAQ,MAC7BC,MAAmB,YAAc,MACjCC,MAA6B,MAAQ,KACrCC,MAA2B,YAAc,QACzCC,IAAeA,EAAc,MAAQ,OAAOlF,CAAe,GAC3DmF,IAAcA,EAAa,YAAcnF,EAAgB,QAAQ,CAAC,GAEtE,KAAK,OAAA,EACL,KAAK,aAAa,OAAO,CAC3B,CAAC,CACH,CAEQ,aAAoB,CAC1B,MAAMsF,EAAQ,SAAS,eAAe,gBAAgB,EACtD,GAAIA,EAAO,CACTA,EAAM,UAAU,OAAO,WAAW,EAClC,MAAMC,EAAcD,EAAM,UAAU,SAAS,WAAW,EACxD,KAAK,aAAaC,EAAc,UAAY,SAAS,CACvD,CACF,CAEQ,QAAQf,EAAkB,CAChC,KAAK,YAAcA,EAGnB,KAAK,cAAgB,KACrB,KAAK,gBAAkB,CAAA,EACvB,KAAK,WAAa,KAClB,KAAK,aAAe,KAGpB,SAAS,iBAAiB,WAAW,EAAE,QAAQF,GAAO,CACpDA,EAAI,UAAU,OAAO,QAAQ,CAC/B,CAAC,EACD,SAAS,cAAc,eAAeE,CAAI,IAAI,GAAG,UAAU,IAAI,QAAQ,EAEvE,KAAK,aAAa,OAAOA,CAAI,EAAE,EAC/B,KAAK,OAAA,CACP,CAEQ,YAAYD,EAAwB,CAC1C,MAAMiB,EAAO,KAAK,OAAO,sBAAA,EAEnBC,EAAS,KAAK,OAAO,MAAQD,EAAK,MAClCE,EAAS,KAAK,OAAO,OAASF,EAAK,OAEnC1E,GAAWyD,EAAE,QAAUiB,EAAK,MAAQC,EACpC1E,GAAWwD,EAAE,QAAUiB,EAAK,KAAOE,EAGzC,OAAO7E,EAAcC,EAASC,EAAS,KAAK,OAAO,MAAO,KAAK,OAAO,MAAM,CAC9E,CAEQ,YAAYwD,EAAqB,CAEvC,GAAI,KAAK,eAAiBA,EAAE,SAAW,EACrC,OAIF,GAAIA,EAAE,SAAW,EAAG,CAClBA,EAAE,eAAA,EACF,KAAK,UAAY,GACjB,KAAK,gBAAkBxE,EACvB,KAAK,gBAAkBC,EACvB,KAAK,eAAiBuE,EAAE,QACxB,KAAK,eAAiBA,EAAE,QACxB,KAAK,OAAO,MAAM,OAAS,WAC3B,MACF,CAGA,GAAIA,EAAE,SAAW,EAAG,OAEpB,MAAMoB,EAAM,KAAK,YAAYpB,CAAC,EAE9B,OAAQ,KAAK,YAAA,CACX,IAAK,SACH,KAAK,sBAAsBoB,CAAG,EAC9B,MACF,IAAK,OACL,IAAK,SACH,KAAK,qBAAqBA,CAAG,EAC7B,MACF,IAAK,UACH,KAAK,uBAAuBA,CAAG,EAC/B,MACF,IAAK,gBACH,KAAK,qBAAqBA,CAAG,EAC7B,MACF,IAAK,SACH,KAAK,sBAAsBA,CAAG,EAC9B,KAAA,CAEN,CAEQ,YAAYpB,EAAqB,CAEvC,GAAI,KAAK,UAAW,CAClB,MAAMqB,EAASrB,EAAE,QAAU,KAAK,eAC1BsB,EAAStB,EAAE,QAAU,KAAK,eAKhCxE,EAAkB,KAAK,gBAAkB6F,EAAS9F,EAClDE,EAAkB,KAAK,gBAAkB6F,EAAS/F,EAGlD,KAAK,qBAAA,EACL,KAAK,OAAA,EACL,MACF,CAGA,GAAI,KAAK,cAAe,CACtB,MAAM6F,EAAM,KAAK,YAAYpB,CAAC,EAC9B,KAAK,aAAa,SAAU,QAAQoB,EAAI,EAAE,QAAQ,CAAC,CAAC,MAAMA,EAAI,EAAE,QAAQ,CAAC,CAAC,KAAM,aAAa,EAC7F,MACF,CAEA,MAAMA,EAAM,KAAK,YAAYpB,CAAC,EAI9B,GAHA,KAAK,SAAWoB,EAGZ,KAAK,kBACP,KAAK,aACH,+BACA,QAAQA,EAAI,EAAE,QAAQ,CAAC,CAAC,MAAMA,EAAI,EAAE,QAAQ,CAAC,CAAC,IAAA,UAEvC,KAAK,cAAgB,WAAa,KAAK,gBAAgB,OAAS,EAAG,CAE5E,MAAMG,EAAc,KAAK,gBAAgB,OACnCC,EAAc,EACpB,IAAIC,EAAO,GACPF,EAAc,EAChBE,EAAO,MAAMF,CAAW,gBACfA,GAAeC,EACxBC,EAAO,cAAcD,CAAW,iBAEhCC,EAAO,MAAMF,CAAW,UAAUC,CAAW,gBAE/C,KAAK,aAAa,QAAS,QAAQJ,EAAI,EAAE,QAAQ,CAAC,CAAC,MAAMA,EAAI,EAAE,QAAQ,CAAC,CAAC,KAAMK,CAAI,CACrF,MACE,KAAK,aAAa,OAAO,KAAK,WAAW,GAAI,QAAQL,EAAI,EAAE,QAAQ,CAAC,CAAC,MAAMA,EAAI,EAAE,QAAQ,CAAC,CAAC,IAAI,EAIjG,GAAI,KAAK,oBAAsB,GAAK,KAAK,aAAa,SAAU,CAC9D,MAAMnJ,EAAO,KAAK,YAGZuF,EAAM,KAAK,IAAI,CAACvF,EAAK,KAAK,EAC1BwF,EAAM,KAAK,IAAI,CAACxF,EAAK,KAAK,EAC1B+E,EAAKoE,EAAI,EAAInJ,EAAK,SAAS,EAC3BgF,EAAKmE,EAAI,EAAInJ,EAAK,SAAS,EAC3B0F,EAASX,EAAKQ,EAAMP,EAAKQ,EACzBG,EAASZ,EAAKS,EAAMR,EAAKO,EAG/BvF,EAAK,SAAU,KAAK,kBAAkB,EAAE,EAAI0F,EAC5C1F,EAAK,SAAU,KAAK,kBAAkB,EAAE,EAAI2F,EAE5C,KAAK,OAAA,EACL,MACF,CAGA,GAAI,KAAK,eAAgB,CACvB,KAAM,CAAE,MAAA8D,EAAO,UAAAC,CAAA,EAAc,KAAK,eAC5B1J,EAAO,KAAK,QAAQ,KAAK2J,GAAKA,EAAE,MAAQD,EAAYD,EAAM,QAAUA,EAAM,QAAQ,EAExF,GAAIzJ,EAAM,CAER,MAAM4J,EAAW3E,EAAakE,EAAI,EAAGA,EAAI,EAAGnJ,EAAK,SAAS,EAAGA,EAAK,SAAS,EAAGA,EAAK,KAAK,EAGpF0J,GACFD,EAAM,aAAa,EAAIG,EAAS,EAChCH,EAAM,aAAa,EAAIG,EAAS,IAEhCH,EAAM,aAAa,EAAIG,EAAS,EAChCH,EAAM,aAAa,EAAIG,EAAS,EAIpC,CAEA,KAAK,OAAA,EACL,MACF,CAGA,GAAI,KAAK,YAAc,KAAK,gBAAkB,KAAK,eAAe,OAAS,OAAQ,CACjF,MAAM5J,EAAO,KAAK,eAGZ+E,EAAKoE,EAAI,EAAInJ,EAAK,SAAS,EAC3BgF,EAAKmE,EAAI,EAAInJ,EAAK,SAAS,EAI3B6J,EAHoB,KAAK,MAAM7E,EAAID,CAAE,EAGJ,KAAK,sBAG5C/E,EAAK,MAAQ,KAAK,iBAAmB6J,EAErC,KAAK,OAAA,EACL,MACF,CAGA,GAAI,KAAK,WAAa,KAAK,gBAAkB,KAAK,eAAe,OAAS,OAAQ,CAChF,MAAM7J,EAAO,KAAK,eAClB,KAAK,cAAcA,EAAMmJ,CAAG,EAC5B,KAAK,OAAA,EACL,MACF,CAEA,GAAI,KAAK,cAAgB,UAAY,KAAK,YAAc,KAAK,gBAAkB,KAAK,aAAc,CAChG,MAAMpE,EAAKoE,EAAI,EAAI,KAAK,aAAa,EAC/BnE,EAAKmE,EAAI,EAAI,KAAK,aAAa,EAEjC,KAAK,eAAe,OAAS,SAC/B,KAAK,eAAe,SAAS,GAAKpE,EAClC,KAAK,eAAe,SAAS,GAAKC,GAGpC,KAAK,aAAemE,EACpB,KAAK,OAAA,CACP,CAEI,KAAK,gBAAkB,KAAK,cAAgB,QAAU,KAAK,cAAgB,YAC7E,KAAK,mBAAmBA,CAAG,EAC3B,KAAK,OAAA,IAIH,KAAK,cAAgB,UAAY,KAAK,gBAAgB,OAAS,IACjE,KAAK,OAAA,CAET,CAEQ,UAAUW,EAAsB,CAEtC,GAAI,KAAK,UAAW,CAClB,KAAK,UAAY,GACjB,KAAK,OAAO,MAAM,OAAS,KAAK,cAAgB,UAAY,YAC5D,MACF,CAGA,GAAI,MAAK,cAWT,KAPI,KAAK,cAAgB,QAAU,KAAK,cAAgB,WAClD,KAAK,eACP,KAAK,qBAAA,EAKL,KAAK,gBAAkB,KAAK,eAAgB,CAC9C,KAAM,CAAE,MAAAL,EAAO,UAAAC,CAAA,EAAc,KAAK,eAC5BK,EAASL,EAAYD,EAAM,aAAeA,EAAM,aAChDO,EAAON,EAAY,eAAiB,eACpCnJ,EAAW,KAAK,eAChBC,EAAW,CAAE,EAAGuJ,EAAO,EAAG,EAAGA,EAAO,CAAA,EAG1C,GAAIxJ,EAAS,IAAMC,EAAS,GAAKD,EAAS,IAAMC,EAAS,EAAG,CAC1D,MAAMyJ,EAAM,IAAI5J,EACdoJ,EACAO,EACAzJ,EACAC,EACA,IAAM,CACJ,KAAK,OAAA,EACL,KAAK,oBAAA,CACP,CAAA,EAEF,KAAK,eAAe,QAAQyJ,CAAG,EAC/B,KAAK,sBAAA,CACP,CAEA,KAAK,eAAiB,KACtB,KAAK,eAAiB,KACtB,KAAK,oBAAA,CACP,CAGA,GAAI,KAAK,YAAc,KAAK,gBAAkB,KAAK,eAAe,OAAS,OAAQ,CACjF,MAAMjK,EAAO,KAAK,eACZkK,EAAW,KAAK,iBAChBC,EAAWnK,EAAK,MAGtB,GAAI,KAAK,IAAImK,EAAWD,CAAQ,EAAI,IAAM,CACxC,MAAMD,EAAM,IAAI5J,EACdL,EACA,QACAkK,EACAC,EACA,IAAM,CACJ,KAAK,OAAA,EACL,KAAK,oBAAA,CACP,CAAA,EAEF,KAAK,eAAe,QAAQF,CAAG,EAC/B,KAAK,sBAAA,CACP,CAEA,KAAK,WAAa,GAClB,KAAK,oBAAA,CACP,CAGA,GAAI,KAAK,WAAa,KAAK,gBAAkB,KAAK,eAAe,OAAS,OAAQ,CAChF,MAAMjK,EAAO,KAAK,eAGlB,IAAIoK,EAAU,GAEd,GAAIpK,EAAK,YAAc,OAIrB,GAHAoK,EAAU,KAAK,KAAKpK,EAAK,OAAS,GAAK,KAAK,eAAe,EAAI,KACrD,KAAK,KAAKA,EAAK,QAAU,GAAK,KAAK,gBAAgB,EAAI,IAE7DoK,EAAS,CAEX,MAAMC,EAAW,KAAK,gBAChBC,EAAWtK,EAAK,MAEhBiK,EAAM,IAAI5J,EACdL,EACA,QACAqK,EACAC,EACA,IAAM,CACJ,KAAK,OAAA,EACL,KAAK,oBAAA,CACP,CAAA,EAEF,KAAK,eAAe,QAAQL,CAAG,EAC/B,KAAK,sBAAA,CACP,UACSjK,EAAK,YAAc,UAG5B,GAFAoK,EAAU,KAAK,KAAKpK,EAAK,QAAU,GAAK,KAAK,gBAAgB,EAAI,IAE7DoK,EAAS,CACX,MAAMH,EAAM,IAAI5J,EACdL,EACA,SACA,KAAK,iBACLA,EAAK,OACL,IAAM,CACJ,KAAK,OAAA,EACL,KAAK,oBAAA,CACP,CAAA,EAEF,KAAK,eAAe,QAAQiK,CAAG,EAC/B,KAAK,sBAAA,CACP,UACSjK,EAAK,YAAc,WAAaA,EAAK,WAE9CoK,EAAUpK,EAAK,SAAS,KAAK,CAACuK,EAAGvD,IAC/B,KAAK,IAAIuD,EAAE,EAAI,KAAK,mBAAmBvD,CAAC,EAAE,CAAC,EAAI,KAC/C,KAAK,IAAIuD,EAAE,EAAI,KAAK,mBAAmBvD,CAAC,EAAE,CAAC,EAAI,GAAA,EAG7CoD,GAAS,CACX,MAAMH,EAAM,IAAI5J,EACdL,EACA,WACA,KAAK,mBACLA,EAAK,SACL,IAAM,CACJ,KAAK,OAAA,EACL,KAAK,oBAAA,CACP,CAAA,EAEF,KAAK,eAAe,QAAQiK,CAAG,EAC/B,KAAK,sBAAA,CACP,CAGF,KAAK,UAAY,GACjB,KAAK,YAAc,KACnB,KAAK,oBAAA,CACP,CAGA,GAAI,KAAK,oBAAsB,GAAK,KAAK,iBAAmB,KAAK,aAAa,SAAU,CACtF,MAAMjK,EAAO,KAAK,YAGZwK,EAAc,KAAK,MAAM,KAAK,UAAUxK,EAAK,QAAQ,CAAC,EAC5DwK,EAAY,KAAK,kBAAkB,EAAE,EAAI,KAAK,gBAAgB,EAC9DA,EAAY,KAAK,kBAAkB,EAAE,EAAI,KAAK,gBAAgB,EAG9D,MAAMC,EAAc,KAAK,MAAM,KAAK,UAAUzK,EAAK,QAAQ,CAAC,EAM5D,GAHc,KAAK,IAAIyK,EAAY,KAAK,kBAAkB,EAAE,EAAID,EAAY,KAAK,kBAAkB,EAAE,CAAC,EAAI,KAC5F,KAAK,IAAIC,EAAY,KAAK,kBAAkB,EAAE,EAAID,EAAY,KAAK,kBAAkB,EAAE,CAAC,EAAI,IAE/F,CACT,MAAMP,EAAM,IAAI5J,EACdL,EACA,WACAwK,EACAC,EACA,IAAM,CACJ,KAAK,OAAA,EACL,KAAK,oBAAA,CACP,CAAA,EAEF,KAAK,eAAe,QAAQR,CAAG,EAC/B,KAAK,sBAAA,CACP,CAEA,KAAK,mBAAqB,GAC1B,KAAK,gBAAkB,KACvB,KAAK,oBAAA,CACP,CAGA,GAAI,KAAK,YAAc,KAAK,cAAgB,KAAK,gBAAkB,KAAK,eAAe,OAAS,OAAQ,CACtG,MAAMjK,EAAO,KAAK,eACZC,EAAO,KAAK,aAAa,EACzBC,EAAO,KAAK,aAAa,EACzBC,EAAOH,EAAK,SAAS,EACrBI,EAAOJ,EAAK,SAAS,EAG3B,GAAIC,IAASE,GAAQD,IAASE,EAAM,CAClC,MAAM6J,EAAM,IAAIlK,GACdC,EACAC,EACAC,EACAC,EACAC,EACA,IAAM,KAAK,OAAA,CAAO,EAEpB,KAAK,eAAe,QAAQ6J,CAAG,EAC/B,KAAK,sBAAA,CACP,CACF,CAEA,KAAK,WAAa,GAClB,KAAK,aAAe,KACpB,KAAK,aAAe,KACtB,CAEQ,cAAclC,EAAqB,CAEzC,GAAI,MAAK,cAKT,IAAI,KAAK,cAAgB,WAAa,KAAK,gBAAgB,QAAU,EAAG,CAEtE,KAAK,gBAAgB,IAAA,EACrB,KAAK,gBAAA,EACL,MACF,CAGA,GAAI,KAAK,cAAgB,SAAU,CACjC,MAAMiB,EAAO,KAAK,OAAO,sBAAA,EACnBC,EAAS,KAAK,OAAO,MAAQD,EAAK,MAClCE,EAAS,KAAK,OAAO,OAASF,EAAK,OACnC1E,GAAWyD,EAAE,QAAUiB,EAAK,MAAQC,EACpC1E,GAAWwD,EAAE,QAAUiB,EAAK,KAAOE,EACnCwB,EAAWrG,EAAcC,EAASC,EAAS,KAAK,OAAO,MAAO,KAAK,OAAO,MAAM,EAGtF,GAAI,KAAK,kBAAmB,CAC1B,KAAK,mBAAA,EACL,MACF,CAGA,MAAMoG,EAAM,KAAK,QAAQD,EAAS,EAAGA,EAAS,CAAC,EAG/C,GAAIC,GAAOA,EAAI,OAAS,OAAQ,CAC9B,MAAM3K,EAAO2K,EACT3K,EAAK,YAAc,WAAaA,EAAK,UACvC,KAAK,oBAAoBA,CAAI,CAEjC,CACF,EACF,CAEQ,aAAa+H,EAAqB,CACxCA,EAAE,eAAA,EAGF,MAAMiB,EAAO,KAAK,OAAO,sBAAA,EACnB4B,EAAS7C,EAAE,QAAUiB,EAAK,KAC1B6B,EAAS9C,EAAE,QAAUiB,EAAK,IAG1BC,EAAS,KAAK,OAAO,MAAQD,EAAK,MAClCE,EAAS,KAAK,OAAO,OAASF,EAAK,OACnC1E,EAAUsG,EAAS3B,EACnB1E,EAAUsG,EAAS3B,EACnB4B,EAAiBzG,EAAcC,EAASC,EAAS,KAAK,OAAO,MAAO,KAAK,OAAO,MAAM,EAGtFwG,EAAQhD,EAAE,OAAS,EAAI,GAAK,EAC5BiD,EAAS1H,EAIf,GAHAA,EAAM,KAAK,IAAI,EAAG,KAAK,IAAI,GAAIA,EAAMyH,CAAK,CAAC,EAGvCzH,IAAQ0H,EAAQ,OAGpB,MAAMC,EAAgB5G,EAAcC,EAASC,EAAS,KAAK,OAAO,MAAO,KAAK,OAAO,MAAM,EAG3FhB,GAAoBuH,EAAe,EAAIG,EAAc,EACrDzH,GAAoBsH,EAAe,EAAIG,EAAc,EAGrD,KAAK,qBAAA,EAGD,KAAK,cACP,KAAK,8BAAA,EAEL,KAAK,OAAA,CAET,CAEQ,sBAA6B,CAEnC,MAAM3C,EAAY,SAAS,eAAe,YAAY,EAChDC,EAAW,SAAS,eAAe,WAAW,EAChDD,IAAWA,EAAU,MAAQhF,EAAI,SAAA,GACjCiF,IAAUA,EAAS,YAAcjF,EAAI,SAAA,GAGzC,MAAMkF,EAAgB,SAAS,eAAe,iBAAiB,EACzDC,EAAe,SAAS,eAAe,gBAAgB,EAC7D,GAAID,EAAe,CAEjB,MAAM0C,EAAW,KAAK,IAAI,IAAK,KAAK,IAAI,GAAI3H,CAAe,CAAC,EAC5DiF,EAAc,MAAQ0C,EAAS,SAAA,CACjC,CACIzC,IAAcA,EAAa,YAAclF,EAAgB,QAAQ,CAAC,GAGtE,MAAMmF,EAAgB,SAAS,eAAe,iBAAiB,EACzDC,EAAe,SAAS,eAAe,gBAAgB,EAC7D,GAAID,EAAe,CAEjB,MAAMyC,EAAW,KAAK,IAAI,IAAK,KAAK,IAAI,GAAI3H,CAAe,CAAC,EAC5DkF,EAAc,MAAQyC,EAAS,SAAA,CACjC,CACIxC,IAAcA,EAAa,YAAcnF,EAAgB,QAAQ,CAAC,EACxE,CAEQ,sBAAsB2F,EAAoB,CAEhD,GAAI,KAAK,gBAAkB,KAAK,eAAe,OAAS,QAAU,CAAC,KAAK,kBAAmB,CACzF,MAAMnJ,EAAO,KAAK,eAGlB,GAAI,KAAK,oBAAoBA,EAAMmJ,EAAI,EAAGA,EAAI,CAAC,EAAG,CAEhD,KAAK,WAAa,GAClB,KAAK,iBAAmBnJ,EAAK,MAG7B,MAAM+E,EAAKoE,EAAI,EAAInJ,EAAK,SAAS,EAC3BgF,EAAKmE,EAAI,EAAInJ,EAAK,SAAS,EACjC,KAAK,sBAAwB,KAAK,MAAMgF,EAAID,CAAE,EAE9C,QAAQ,IAAI,QAAQ,EACpB,MACF,CAGA,MAAMqG,EAAc,KAAK,mBAAmBpL,EAAMmJ,EAAI,EAAGA,EAAI,CAAC,EAC9D,GAAIiC,EAAa,CAEf,KAAK,UAAY,GACjB,KAAK,YAAcA,EACnB,KAAK,kBAAoB,CAAE,EAAGpL,EAAK,SAAS,EAAG,EAAGA,EAAK,SAAS,CAAA,EAChE,KAAK,gBAAkBA,EAAK,MAGxBA,EAAK,YAAc,OACrB,KAAK,gBAAkBA,EAAK,OAAS,EACrC,KAAK,iBAAmBA,EAAK,QAAU,GAC9BA,EAAK,YAAc,SAC5B,KAAK,iBAAmBA,EAAK,QAAU,GAC9BA,EAAK,YAAc,WAAaA,EAAK,WAE9C,KAAK,mBAAqBA,EAAK,SAAS,IAAIuK,IAAM,CAAE,EAAGA,EAAE,EAAG,EAAGA,EAAE,CAAA,EAAI,GAGvE,QAAQ,IAAI,cAAca,CAAW,EAAE,EACvC,MACF,CACF,CAGA,GAAI,KAAK,mBAAqB,KAAK,YAAa,CAC9C,MAAMC,EAAc,KAAK,cAAc,KAAK,YAAalC,EAAI,EAAGA,EAAI,CAAC,EACrE,GAAIkC,GAAe,EAAG,CACpB,KAAK,mBAAqBA,EAC1B,MAAMC,EAAS,KAAK,YAAY,SAAUD,CAAW,EACrD,KAAK,gBAAkB,CAAE,EAAGC,EAAO,EAAG,EAAGA,EAAO,CAAA,EAChD,QAAQ,IAAI,UAAUD,CAAW,EAAE,EACnC,MACF,CAEA,KAAK,mBAAA,CACP,CAGA,MAAME,EAAY,KAAK,cAAcpC,EAAI,EAAGA,EAAI,CAAC,EACjD,GAAIoC,EAAW,CAEb,KAAK,eAAiBA,EACtB,KAAK,eAAiBA,EAAU,MAChC,MAAMxB,EAASwB,EAAU,UAAYA,EAAU,MAAM,aAAeA,EAAU,MAAM,aACpF,KAAK,eAAiB,CAAE,EAAGxB,EAAO,EAAG,EAAGA,EAAO,CAAA,EAC/C,KAAK,oBAAA,EACL,KAAK,OAAA,EACL,MACF,CAGA,MAAMY,EAAM,KAAK,QAAQxB,EAAI,EAAGA,EAAI,CAAC,EACrC,KAAK,eAAiBwB,EAElBA,GAAOA,EAAI,OAAS,SACtB,KAAK,WAAa,GAClB,KAAK,aAAexB,EAEpB,KAAK,aAAe,CAAE,EAAGwB,EAAI,SAAS,EAAG,EAAGA,EAAI,SAAS,CAAA,GAG3D,KAAK,oBAAA,EACL,KAAK,OAAA,CACP,CACQ,qBAAqBxB,EAAoB,CAC3C,KAAK,cAAgB,OAEvB,KAAK,cAAgB,KAAK,WAAW,MAAOA,EAAI,EAAGA,EAAI,EAAG,EAAG,CAAC,EAG9D,KAAK,cAAgB,KAAK,WAAW,SAAUA,EAAI,EAAGA,EAAI,EAAG,EAAG,EAElE,KAAK,aAAeA,CACtB,CAEQ,uBAAuBA,EAAoB,CAEjD,GAAI,KAAK,gBAAgB,QAAU,EAAG,CACpC,MAAMqC,EAAc,KAAK,gBAAgB,CAAC,EAO1C,GANiB,KAAK,KACpB,KAAK,IAAIrC,EAAI,EAAIqC,EAAY,EAAG,CAAC,EACjC,KAAK,IAAIrC,EAAI,EAAIqC,EAAY,EAAG,CAAC,CAAA,EAIpB,GAAK,CAClB,KAAK,gBAAA,EACL,MACF,CACF,CAGA,MAAMjC,EAAc,EACpB,GAAI,KAAK,gBAAgB,QAAUA,EAAa,CAC9C,KAAK,aAAa,QAAS,GAAI,qBAAqBA,CAAW,oBAAoB,EACnF,MACF,CAEA,KAAK,gBAAgB,KAAK,CAAE,EAAGJ,EAAI,EAAG,EAAGA,EAAI,EAAG,EAChD,KAAK,OAAA,CACP,CAEQ,qBAAqBA,EAAoB,CAC/C,MAAMnJ,EAAO,KAAK,QAAQmJ,EAAI,EAAGA,EAAI,CAAC,EAEtC,GAAI,CAACnJ,GAAQA,EAAK,OAAS,OAAQ,CACjC,KAAK,aAAa,OAAQ,GAAI,iBAAiB,EAC/C,MACF,CAEA,GAAI,CAAC,KAAK,WAER,KAAK,WAAaA,EAClB,KAAK,aAAemJ,EACpB,KAAK,aAAa,OAAQ,GAAI,SAAS,KAAK,WAAW,GAAG,UAAU,EAAG,CAAC,CAAC,eAAe,MACnF,CACL,MAAMsC,EAAQzL,EAGd,GAAI,KAAK,WAAW,KAAOyL,EAAM,GAAI,CACnC,KAAK,aAAa,OAAQ,GAAI,sBAAsB,EACpD,MACF,CAGA,KAAK,YAAY,KAAK,WAAYA,EAAO,KAAK,aAAetC,CAAG,EAChE,KAAK,WAAa,KAClB,KAAK,aAAe,KACpB,KAAK,aAAa,OAAQ,GAAI,2BAA2B,CAC3D,CACF,CAEQ,sBAAsBA,EAAoB,CAChD,MAAMwB,EAAM,KAAK,QAAQxB,EAAI,EAAGA,EAAI,CAAC,EACjCwB,IACF,KAAK,QAAU,KAAK,QAAQ,UAAYhB,EAAE,KAAOgB,EAAI,EAAE,EACvD,KAAK,eAAiB,KACtB,KAAK,oBAAA,EACL,KAAK,OAAA,EAET,CAEQ,mBAAmBxB,EAAoB,CAC7C,GAAI,CAAC,KAAK,eAAiB,CAAC,KAAK,aAAc,OAE/C,MAAMpE,EAAKoE,EAAI,EAAI,KAAK,aAAa,EAC/BnE,EAAKmE,EAAI,EAAI,KAAK,aAAa,EAEjC,KAAK,cAAc,YAAc,OAEnC,KAAK,cAAc,MAAQ,KAAK,IAAI/H,GAAiB,KAAK,IAAI2D,CAAE,CAAC,EACjE,KAAK,cAAc,OAAS,KAAK,IAAI1D,GAAkB,KAAK,IAAI2D,CAAE,CAAC,EAEnE,KAAK,cAAc,SAAS,EAAI,KAAK,aAAa,EAAID,EAAK,EAC3D,KAAK,cAAc,SAAS,EAAI,KAAK,aAAa,EAAIC,EAAK,GAClD,KAAK,cAAc,YAAc,WAE1C,KAAK,cAAc,OAAS,KAAK,IAAI1D,GAAkB,KAAK,IAAI,KAAK,IAAIyD,CAAE,EAAG,KAAK,IAAIC,CAAE,CAAC,EAAI,CAAC,EAEnG,CAEQ,sBAA6B,CACnC,GAAI,KAAK,cAAe,CACtB,MAAM0G,EAAY,KAAK,cACjBzB,EAAM,IAAIzK,EACd,KAAK,QACLkM,EACA,IAAM,KAAK,OAAA,CAAO,EAEpB,KAAK,eAAe,QAAQzB,CAAG,EAE/B,KAAK,cAAgB,KACrB,KAAK,aAAe,KACpB,KAAK,sBAAA,EACL,KAAK,OAAA,CACP,CACF,CAEQ,iBAAwB,CAC9B,GAAI,KAAK,gBAAgB,QAAU,EAAG,CACpC,MAAMpD,EAAU,KAAK,gBAAgB,OAAO,CAAC8E,EAAKpB,IAAMoB,EAAMpB,EAAE,EAAG,CAAC,EAAI,KAAK,gBAAgB,OACvFzD,EAAU,KAAK,gBAAgB,OAAO,CAAC6E,EAAKpB,IAAMoB,EAAMpB,EAAE,EAAG,CAAC,EAAI,KAAK,gBAAgB,OAE7F,IAAIqB,EAAgB,KAAK,gBAAgB,IAAIrB,IAAM,CACjD,EAAGA,EAAE,EAAI1D,EACT,EAAG0D,EAAE,EAAIzD,CAAA,EACT,EAGF8E,EAAgB,KAAK,uBAAuBA,CAAa,EAEzD,MAAM5L,EAAO,KAAK,WAAW,UAAW6G,EAASC,CAAO,EACxD9G,EAAK,SAAW4L,EAEhB,MAAM3B,EAAM,IAAIzK,EACd,KAAK,QACLQ,EACA,IAAM,KAAK,OAAA,CAAO,EAEpB,KAAK,eAAe,QAAQiK,CAAG,EAE/B,KAAK,gBAAkB,CAAA,EACvB,KAAK,sBAAA,EACL,KAAK,OAAA,CACP,CACF,CAGQ,uBAAuBrD,EAAgC,CAC7D,GAAIA,EAAS,OAAS,EAAG,OAAOA,EAGhC,IAAIiF,EAAO,EACX,QAAS,EAAI,EAAG,EAAIjF,EAAS,OAAQ,IAAK,CACxC,MAAMK,GAAK,EAAI,GAAKL,EAAS,OAC7BiF,GAAQjF,EAAS,CAAC,EAAE,EAAIA,EAASK,CAAC,EAAE,EACpC4E,GAAQjF,EAASK,CAAC,EAAE,EAAIL,EAAS,CAAC,EAAE,CACtC,CAIA,OAAIiF,EAAO,GACT,QAAQ,IAAI,kBAAkB,EACvBjF,EAAS,QAAA,GAGXA,CACT,CAEQ,WAAWkF,EAAsBC,EAAWC,EAAW/F,EAAgBC,EAAuB,CACpG,MAAO,CACL,GAAItC,GAAW,OAAO,EACtB,KAAM,OACN,UAAAkI,EACA,SAAU,CAAE,EAAAC,EAAG,EAAAC,CAAA,EACf,MAAO,EACP,MAAA/F,EACA,OAAAC,EACA,OAAQ4F,IAAc,SAAW,GAAK,OACtC,SAAU,UACV,QAAS,EACT,SAAU,GACV,YAAa,GACb,cAAe,EACf,eAAgB,EAChB,aAAc,EACd,cAAe,EAAA,CAEnB,CAEQ,YAAYG,EAAaR,EAAaS,EAAkBC,EAAwB,CAEtF,MAAMC,EAAenH,EAAaiH,EAAQ,EAAGA,EAAQ,EAAGD,EAAM,SAAS,EAAGA,EAAM,SAAS,EAAGA,EAAM,KAAK,EACjGI,EAAepH,EAAakH,EAAQ,EAAGA,EAAQ,EAAGV,EAAM,SAAS,EAAGA,EAAM,SAAS,EAAGA,EAAM,KAAK,EAEjGhC,EAAe,CACnB,GAAI7F,GAAW,QAAQ,EACvB,KAAM,QACN,UAAW,WACX,QAASqI,EAAM,GACf,QAASR,EAAM,GACf,aAAAW,EACA,aAAAC,CAAA,EAIF5C,EAAM,YAAc,GACpBA,EAAM,WAAa,CAAC,KAAK,GAAK,EAC9BA,EAAM,WAAa,KAAK,GAAK,EAC7BA,EAAM,YAAc,GACpBA,EAAM,WAAa,EACnBA,EAAM,eAAiB,IACvBA,EAAM,iBAAmB,GAEzB,MAAMQ,EAAM,IAAIzK,EACd,KAAK,QACLiK,EACA,IAAM,KAAK,OAAA,CAAO,EAEpB,KAAK,eAAe,QAAQQ,CAAG,EAE/B,KAAK,sBAAA,EACL,KAAK,OAAA,CACP,CAEQ,QAAQ8B,EAAWC,EAA6B,CAEtD,MAAMM,EAAY,GAAKhJ,EAGvB,QAAS0D,EAAI,KAAK,QAAQ,OAAS,EAAGA,GAAK,EAAGA,IAAK,CACjD,MAAM2D,EAAM,KAAK,QAAQ3D,CAAC,EAE1B,GAAI2D,EAAI,OAAS,QAAS,CACxB,MAAMlB,EAAQkB,EACRsB,EAAQ,KAAK,QAAQ,QAAUtC,EAAE,KAAOF,EAAM,OAAO,EACrDgC,EAAQ,KAAK,QAAQ,QAAU9B,EAAE,KAAOF,EAAM,OAAO,EAE3D,GAAIwC,GAASR,EAAO,CAClB,MAAMc,EAAe9G,EACnBgE,EAAM,aAAa,EAAGA,EAAM,aAAa,EACzCwC,EAAM,SAAS,EAAGA,EAAM,SAAS,EAAGA,EAAM,KAAA,EAEtCO,EAAe/G,EACnBgE,EAAM,aAAa,EAAGA,EAAM,aAAa,EACzCgC,EAAM,SAAS,EAAGA,EAAM,SAAS,EAAGA,EAAM,KAAA,EAI5C,GAAI/G,EAASqH,EAAGC,EAAGO,EAAa,EAAGA,EAAa,CAAC,GAAKD,GAClD5H,EAASqH,EAAGC,EAAGQ,EAAa,EAAGA,EAAa,CAAC,GAAKF,EACpD,OAAO7C,CAEX,CACF,CACF,CAGA,QAASzC,EAAI,KAAK,QAAQ,OAAS,EAAGA,GAAK,EAAGA,IAAK,CACjD,MAAM2D,EAAM,KAAK,QAAQ3D,CAAC,EAE1B,GAAI2D,EAAI,OAAS,QACf,GAAIA,EAAI,YAAc,OAASA,EAAI,OAASA,EAAI,QAC9C,GAAI/E,GAAmBmG,EAAGC,EAAGrB,EAAI,SAAS,EAAGA,EAAI,SAAS,EAAGA,EAAI,MAAOA,EAAI,OAAQA,EAAI,KAAK,EAC3F,OAAOA,UAEAA,EAAI,YAAc,UAAYA,EAAI,QAC3C,GAAIpE,GAAcwF,EAAGC,EAAGrB,EAAI,SAAS,EAAGA,EAAI,SAAS,EAAGA,EAAI,MAAM,EAChE,OAAOA,UAEAA,EAAI,YAAc,WAAaA,EAAI,UAAYA,EAAI,SAAS,QAAU,GAC3EhE,GAAeoF,EAAGC,EAAGrB,EAAI,SAAUA,EAAI,SAAS,EAAGA,EAAI,SAAS,EAAGA,EAAI,KAAK,EAC9E,OAAOA,EAIf,CACA,OAAO,IACT,CAGQ,oBAAoB3K,EAAY+L,EAAWC,EAAoB,CAErE,IAAIS,EAAO,EAAGC,EAAO,EAAGC,EAAO,EAE/B,GAAI3M,EAAK,YAAc,OAASA,EAAK,OAASA,EAAK,OAAQ,CACzD,MAAMqG,EAAQrG,EAAK,MAAQ,EACrBsG,EAAQtG,EAAK,OAAS,EACtBuF,EAAM,KAAK,IAAIvF,EAAK,KAAK,EACzBwF,EAAM,KAAK,IAAIxF,EAAK,KAAK,EASzB4M,EAPU,CACd,CAAE,EAAG,CAACvG,EAAO,EAAG,CAACC,CAAA,EACjB,CAAE,EAAGD,EAAO,EAAG,CAACC,CAAA,EAChB,CAAE,EAAGD,EAAO,EAAGC,CAAA,EACf,CAAE,EAAG,CAACD,EAAO,EAAGC,CAAA,CAAM,EAGK,IAAIuG,IAAM,CACrC,EAAG7M,EAAK,SAAS,EAAI6M,EAAE,EAAItH,EAAMsH,EAAE,EAAIrH,EACvC,EAAGxF,EAAK,SAAS,EAAI6M,EAAE,EAAIrH,EAAMqH,EAAE,EAAItH,CAAA,EACvC,EAEFkH,EAAO,KAAK,IAAI,GAAGG,EAAa,IAAIC,GAAKA,EAAE,CAAC,CAAC,EAC7CH,EAAO,KAAK,IAAI,GAAGE,EAAa,IAAIC,GAAKA,EAAE,CAAC,CAAC,EAC7CF,EAAO,KAAK,IAAI,GAAGC,EAAa,IAAIC,GAAKA,EAAE,CAAC,CAAC,CAC/C,SAAW7M,EAAK,YAAc,UAAYA,EAAK,OAAQ,CACrD,MAAM8M,EAAI9M,EAAK,OACfyM,EAAOzM,EAAK,SAAS,EAAI8M,EACzBJ,EAAO1M,EAAK,SAAS,EAAI8M,EACzBH,EAAO3M,EAAK,SAAS,EAAI8M,CAC3B,SAAW9M,EAAK,YAAc,WAAaA,EAAK,SAAU,CACxD,MAAMuF,EAAM,KAAK,IAAIvF,EAAK,KAAK,EACzBwF,EAAM,KAAK,IAAIxF,EAAK,KAAK,EAEzB+M,EAAgB/M,EAAK,SAAS,IAAIuK,IAAM,CAC5C,EAAGvK,EAAK,SAAS,EAAIuK,EAAE,EAAIhF,EAAMgF,EAAE,EAAI/E,EACvC,EAAGxF,EAAK,SAAS,EAAIuK,EAAE,EAAI/E,EAAM+E,EAAE,EAAIhF,CAAA,EACvC,EAEFkH,EAAO,KAAK,IAAI,GAAGM,EAAc,IAAIxC,GAAKA,EAAE,CAAC,CAAC,EAC9CmC,EAAO,KAAK,IAAI,GAAGK,EAAc,IAAIxC,GAAKA,EAAE,CAAC,CAAC,EAC9CoC,EAAO,KAAK,IAAI,GAAGI,EAAc,IAAIxC,GAAKA,EAAE,CAAC,CAAC,CAChD,CAGA,MAAMyC,GAAcP,EAAOC,GAAQ,EAE7BO,EADSN,EACU9K,GAAiCyB,EAGpD4J,GAAgBtL,GAAiC,GAAK0B,EAM5D,OALa,KAAK,KAChB,KAAK,IAAIyI,EAAIiB,EAAY,CAAC,EAC1B,KAAK,IAAIhB,EAAIiB,EAAS,CAAC,CAAA,GAGVC,CACjB,CAGQ,mBAAmBlN,EAAY+L,EAAWC,EAAmF,CACnI,MAAM/F,EAAQ,KAAK,OAAO,MACpBC,EAAS,KAAK,OAAO,OAG3B,IAAIuG,EAAO,EAAGC,EAAO,EAAGS,EAAO,EAAGR,EAAO,EAEzC,GAAI3M,EAAK,YAAc,OAASA,EAAK,OAASA,EAAK,OAAQ,CACzD,MAAMqG,EAAQrG,EAAK,MAAQ,EACrBsG,EAAQtG,EAAK,OAAS,EACtBuF,EAAM,KAAK,IAAIvF,EAAK,KAAK,EACzBwF,EAAM,KAAK,IAAIxF,EAAK,KAAK,EASzB4M,EAPU,CACd,CAAE,EAAG,CAACvG,EAAO,EAAG,CAACC,CAAA,EACjB,CAAE,EAAGD,EAAO,EAAG,CAACC,CAAA,EAChB,CAAE,EAAGD,EAAO,EAAGC,CAAA,EACf,CAAE,EAAG,CAACD,EAAO,EAAGC,CAAA,CAAM,EAGK,IAAIuG,IAAM,CACrC,EAAG7M,EAAK,SAAS,EAAI6M,EAAE,EAAItH,EAAMsH,EAAE,EAAIrH,EACvC,EAAGxF,EAAK,SAAS,EAAI6M,EAAE,EAAIrH,EAAMqH,EAAE,EAAItH,CAAA,EACvC,EAEFkH,EAAO,KAAK,IAAI,GAAGG,EAAa,IAAIC,GAAKA,EAAE,CAAC,CAAC,EAC7CH,EAAO,KAAK,IAAI,GAAGE,EAAa,IAAIC,GAAKA,EAAE,CAAC,CAAC,EAC7CM,EAAO,KAAK,IAAI,GAAGP,EAAa,IAAIC,GAAKA,EAAE,CAAC,CAAC,EAC7CF,EAAO,KAAK,IAAI,GAAGC,EAAa,IAAIC,GAAKA,EAAE,CAAC,CAAC,CAC/C,SAAW7M,EAAK,YAAc,UAAYA,EAAK,OAAQ,CACrD,MAAM8M,EAAI9M,EAAK,OACfyM,EAAOzM,EAAK,SAAS,EAAI8M,EACzBJ,EAAO1M,EAAK,SAAS,EAAI8M,EACzBK,EAAOnN,EAAK,SAAS,EAAI8M,EACzBH,EAAO3M,EAAK,SAAS,EAAI8M,CAC3B,SAAW9M,EAAK,YAAc,WAAaA,EAAK,SAAU,CACxD,MAAMuF,EAAM,KAAK,IAAIvF,EAAK,KAAK,EACzBwF,EAAM,KAAK,IAAIxF,EAAK,KAAK,EAEzB+M,EAAgB/M,EAAK,SAAS,IAAIuK,IAAM,CAC5C,EAAGvK,EAAK,SAAS,EAAIuK,EAAE,EAAIhF,EAAMgF,EAAE,EAAI/E,EACvC,EAAGxF,EAAK,SAAS,EAAIuK,EAAE,EAAI/E,EAAM+E,EAAE,EAAIhF,CAAA,EACvC,EAEFkH,EAAO,KAAK,IAAI,GAAGM,EAAc,IAAIxC,GAAKA,EAAE,CAAC,CAAC,EAC9CmC,EAAO,KAAK,IAAI,GAAGK,EAAc,IAAIxC,GAAKA,EAAE,CAAC,CAAC,EAC9C4C,EAAO,KAAK,IAAI,GAAGJ,EAAc,IAAIxC,GAAKA,EAAE,CAAC,CAAC,EAC9CoC,EAAO,KAAK,IAAI,GAAGI,EAAc,IAAIxC,GAAKA,EAAE,CAAC,CAAC,CAChD,CAGA,MAAM6C,EAAUtJ,EAAc2I,EAAME,EAAM1G,EAAOC,CAAM,EACjDmH,EAAWvJ,EAAc4I,EAAMC,EAAM1G,EAAOC,CAAM,EAClDoH,EAAaxJ,EAAc2I,EAAMU,EAAMlH,EAAOC,CAAM,EACpDqH,EAAczJ,EAAc4I,EAAMS,EAAMlH,EAAOC,CAAM,EACrDW,GAAWuG,EAAQ,EAAIC,EAAS,GAAK,EACrCvG,GAAWsG,EAAQ,EAAIE,EAAW,GAAK,EAGvCE,EAAc1J,EAAciI,EAAGC,EAAG/F,EAAOC,CAAM,EAG/CuH,EAAkH,CACtH,CAAE,EAAGL,EAAQ,EAAG,EAAGA,EAAQ,EAAG,KAAM,IAAA,EACpC,CAAE,EAAGvG,EAAS,EAAGuG,EAAQ,EAAG,KAAM,KAAA,EAClC,CAAE,EAAGC,EAAS,EAAG,EAAGA,EAAS,EAAG,KAAM,IAAA,EACtC,CAAE,EAAGA,EAAS,EAAGvG,EAAY,KAAM,OAAA,EACnC,CAAE,EAAGyG,EAAY,EAAG,EAAGA,EAAY,EAAG,KAAM,IAAA,EAC5C,CAAE,EAAG1G,EAAS,EAAG0G,EAAY,EAAG,KAAM,QAAA,EACtC,CAAE,EAAGD,EAAW,EAAG,EAAGA,EAAW,EAAG,KAAM,IAAA,EAC1C,CAAE,EAAGA,EAAW,EAAGxG,EAAY,KAAM,MAAA,CAAO,EAIxCwF,EAAY5K,EAAwB,EAE1C,UAAWgM,KAAUD,EAMnB,GALa,KAAK,KAChB,KAAK,IAAID,EAAY,EAAIE,EAAO,EAAG,CAAC,EACpC,KAAK,IAAIF,EAAY,EAAIE,EAAO,EAAG,CAAC,CAAA,GAG1BpB,EACV,OAAOoB,EAAO,KAIlB,OAAO,IACT,CAGQ,cAAc3B,EAAWC,EAAwD,CAEvF,MAAMM,EAAY,GAAKhJ,EAEvB,QAAS0D,EAAI,KAAK,QAAQ,OAAS,EAAGA,GAAK,EAAGA,IAAK,CACjD,MAAM2D,EAAM,KAAK,QAAQ3D,CAAC,EAE1B,GAAI2D,EAAI,OAAS,QAAS,CACxB,MAAMlB,EAAQkB,EACRsB,EAAQ,KAAK,QAAQ,QAAUtC,EAAE,KAAOF,EAAM,OAAO,EACrDgC,EAAQ,KAAK,QAAQ,QAAU9B,EAAE,KAAOF,EAAM,OAAO,EAE3D,GAAIwC,GAASR,EAAO,CAClB,MAAMc,EAAe9G,EACnBgE,EAAM,aAAa,EAAGA,EAAM,aAAa,EACzCwC,EAAM,SAAS,EAAGA,EAAM,SAAS,EAAGA,EAAM,KAAA,EAEtCO,EAAe/G,EACnBgE,EAAM,aAAa,EAAGA,EAAM,aAAa,EACzCgC,EAAM,SAAS,EAAGA,EAAM,SAAS,EAAGA,EAAM,KAAA,EAI5C,GAAI/G,EAASqH,EAAGC,EAAGO,EAAa,EAAGA,EAAa,CAAC,GAAKD,EACpD,MAAO,CAAE,MAAA7C,EAAO,UAAW,EAAA,EAG7B,GAAI/E,EAASqH,EAAGC,EAAGQ,EAAa,EAAGA,EAAa,CAAC,GAAKF,EACpD,MAAO,CAAE,MAAA7C,EAAO,UAAW,EAAA,CAE/B,CACF,CACF,CACA,OAAO,IACT,CAIQ,oBAAoBzJ,EAAkB,CAC5C,KAAK,kBAAoB,GACzB,KAAK,YAAcA,EACnB,KAAK,eAAiBA,EACtB,QAAQ,IAAI,aAAaA,EAAK,EAAE,EAAE,EAClC,KAAK,aAAa,SAAU,WAAY,YAAY,EACpD,KAAK,OAAA,CACP,CAEQ,oBAA2B,CACjC,KAAK,kBAAoB,GACzB,KAAK,YAAc,KACnB,KAAK,mBAAqB,GAC1B,KAAK,gBAAkB,KACvB,QAAQ,IAAI,UAAU,EACtB,KAAK,aAAa,UAAU,EAC5B,KAAK,OAAA,CACP,CAEQ,cAAcA,EAAYkF,EAAgBC,EAAwB,CACxE,GAAI,CAACnF,EAAK,SAAU,MAAO,GAE3B,MAAMsM,EAAY,GAElB,QAAStF,EAAI,EAAGA,EAAIhH,EAAK,SAAS,OAAQgH,IAAK,CAC7C,MAAMsE,EAAStL,EAAK,SAASgH,CAAC,EAExBzB,EAAM,KAAK,IAAIvF,EAAK,KAAK,EACzBwF,EAAM,KAAK,IAAIxF,EAAK,KAAK,EACzB2N,EAAU3N,EAAK,SAAS,EAAIsL,EAAO,EAAI/F,EAAM+F,EAAO,EAAI9F,EACxDoI,EAAU5N,EAAK,SAAS,EAAIsL,EAAO,EAAI9F,EAAM8F,EAAO,EAAI/F,EAM9D,GAJa,KAAK,MACfL,EAASyI,IAAY,GAAKxI,EAASyI,IAAY,CAAA,GAGtCtB,EACV,OAAOtF,CAEX,CAEA,MAAO,EACT,CAGQ,cAAchH,EAAY6N,EAA2B,CACtD,KAAK,cAEN7N,EAAK,YAAc,MACrB,KAAK,SAASA,EAAM6N,CAAU,EACrB7N,EAAK,YAAc,SAC5B,KAAK,YAAYA,EAAM6N,CAAU,EACxB7N,EAAK,YAAc,WAC5B,KAAK,aAAaA,EAAM6N,CAAU,EAEtC,CAGQ,SAAS7N,EAAY6N,EAA2B,CACtD,GAAI,CAAC7N,EAAK,OAAS,CAACA,EAAK,QAAU,CAAC,KAAK,YAAa,OAEtD,MAAM0N,EAAS,KAAK,YAEdnI,EAAM,KAAK,IAAI,KAAK,eAAe,EACnCC,EAAM,KAAK,IAAI,KAAK,eAAe,EAGnCa,EAAQ,KAAK,gBAAkB,EAC/BC,EAAQ,KAAK,iBAAmB,EAGtC,IAAIwH,EAAc,EACdC,EAAc,EAGdC,EAAkB,EAClBC,EAAkB,EAEtB,OAAQP,EAAA,CACN,IAAK,KACHI,EAAczH,EACd0H,EAAc,CAACzH,EACf0H,EAAkB,GAClBC,EAAkB,EAClB,MACF,IAAK,KACHH,EAAc,CAACzH,EACf0H,EAAc,CAACzH,EACf0H,EAAkB,EAClBC,EAAkB,EAClB,MACF,IAAK,KACHH,EAAc,CAACzH,EACf0H,EAAczH,EACd0H,EAAkB,EAClBC,EAAkB,GAClB,MACF,IAAK,KACHH,EAAczH,EACd0H,EAAczH,EACd0H,EAAkB,GAClBC,EAAkB,GAClB,MACF,IAAK,MACHH,EAAc,EACdC,EAAc,CAACzH,EACf0H,EAAkB,EAClBC,EAAkB,EAClB,MACF,IAAK,SACHH,EAAc,EACdC,EAAczH,EACd0H,EAAkB,EAClBC,EAAkB,GAClB,MACF,IAAK,OACHH,EAAczH,EACd0H,EAAc,EACdC,EAAkB,GAClBC,EAAkB,EAClB,MACF,IAAK,QACHH,EAAc,CAACzH,EACf0H,EAAc,EACdC,EAAkB,EAClBC,EAAkB,EAClB,KAAA,CAIJ,MAAMC,EAAc,KAAK,kBAAkB,EAAIJ,EAAcvI,EAAMwI,EAAcvI,EAC3E2I,EAAc,KAAK,kBAAkB,EAAIL,EAActI,EAAMuI,EAAcxI,EAG3E6I,EAAgBP,EAAW,EAAIK,EAC/BG,EAAgBR,EAAW,EAAIM,EAG/BG,EAAqBF,EAAgB7I,EAAM8I,EAAgB7I,EAC3D+I,EAAqB,CAACH,EAAgB5I,EAAM6I,EAAgB9I,EAGlE,IAAI+E,EAAW,KAAK,gBAChBkE,EAAY,KAAK,iBAErB,GAAIR,IAAoB,EAAG,CAGzB,MAAMS,EAAYH,EAAqBN,EACvC1D,EAAW,KAAK,IAAIlJ,GAAiBqN,EAAY,CAAC,CACpD,CAEA,GAAIR,IAAoB,EAAG,CAGzB,MAAMS,EAAaH,EAAqBN,EACxCO,EAAY,KAAK,IAAInN,GAAkBqN,EAAa,CAAC,CACvD,CAGA1O,EAAK,MAAQsK,EACbtK,EAAK,OAASwO,EAId,MAAMG,EAAWrE,EAAW,EACtBsE,EAAWJ,EAAY,EAE7B,IAAIK,EAAiB,EACjBC,EAAiB,EAGrB,OAAQpB,EAAA,CACN,IAAK,KACHmB,EAAiBF,EACjBG,EAAiB,CAACF,EAClB,MACF,IAAK,KACHC,EAAiB,CAACF,EAClBG,EAAiB,CAACF,EAClB,MACF,IAAK,KACHC,EAAiB,CAACF,EAClBG,EAAiBF,EACjB,MACF,IAAK,KACHC,EAAiBF,EACjBG,EAAiBF,EACjB,MACF,IAAK,MACHC,EAAiB,EACjBC,EAAiB,CAACF,EAClB,MACF,IAAK,SACHC,EAAiB,EACjBC,EAAiBF,EACjB,MACF,IAAK,OACHC,EAAiBF,EACjBG,EAAiB,EACjB,MACF,IAAK,QACHD,EAAiB,CAACF,EAClBG,EAAiB,EACjB,KAAA,CAIJ9O,EAAK,SAAS,EAAIkO,GAAeW,EAAiBtJ,EAAMuJ,EAAiBtJ,GACzExF,EAAK,SAAS,EAAImO,GAAeU,EAAiBrJ,EAAMsJ,EAAiBvJ,EAC3E,CAGQ,YAAYvF,EAAY6N,EAA2B,CACzD,GAAI,CAAC7N,EAAK,QAAU,CAAC,KAAK,YAAa,OAGvC,MAAM+E,EAAK8I,EAAW,EAAI,KAAK,kBAAkB,EAC3C7I,EAAK6I,EAAW,EAAI,KAAK,kBAAkB,EAC3CkB,EAAmB,KAAK,KAAKhK,EAAKA,EAAKC,EAAKA,CAAE,EAG9CgK,EAAY,KAAK,IAAI1N,GAAkByN,CAAgB,EAC7D/O,EAAK,OAASgP,CAGhB,CAGQ,aAAahP,EAAY6N,EAA2B,CAC1D,GAAI,CAAC7N,EAAK,UAAY,KAAK,mBAAmB,SAAW,GAAK,CAAC,KAAK,YAAa,OAEjF,MAAM0N,EAAS,KAAK,YAEdnI,EAAM,KAAK,IAAI,KAAK,eAAe,EACnCC,EAAM,KAAK,IAAI,KAAK,eAAe,EAGnCiH,EAAO,KAAK,IAAI,GAAG,KAAK,mBAAmB,IAAIlC,GAAKA,EAAE,CAAC,CAAC,EACxDmC,EAAO,KAAK,IAAI,GAAG,KAAK,mBAAmB,IAAInC,GAAKA,EAAE,CAAC,CAAC,EACxD4C,EAAO,KAAK,IAAI,GAAG,KAAK,mBAAmB,IAAI5C,GAAKA,EAAE,CAAC,CAAC,EACxDoC,EAAO,KAAK,IAAI,GAAG,KAAK,mBAAmB,IAAIpC,GAAKA,EAAE,CAAC,CAAC,EACxD1D,GAAW4F,EAAOC,GAAQ,EAC1B5F,GAAWqG,EAAOR,GAAQ,EAC1BsC,EAAavC,EAAOD,EACpByC,EAAcvC,EAAOQ,EAG3B,IAAIW,EAAc,EACdC,EAAc,EACdC,EAAkB,EAClBC,EAAkB,EAEtB,OAAQP,EAAA,CACN,IAAK,KACHI,EAAcpB,EACdqB,EAAcZ,EACda,EAAkB,GAClBC,EAAkB,EAClB,MACF,IAAK,KACHH,EAAcrB,EACdsB,EAAcZ,EACda,EAAkB,EAClBC,EAAkB,EAClB,MACF,IAAK,KACHH,EAAcrB,EACdsB,EAAcpB,EACdqB,EAAkB,EAClBC,EAAkB,GAClB,MACF,IAAK,KACHH,EAAcpB,EACdqB,EAAcpB,EACdqB,EAAkB,GAClBC,EAAkB,GAClB,MACF,IAAK,MACHH,EAAcjH,EACdkH,EAAcZ,EACda,EAAkB,EAClBC,EAAkB,EAClB,MACF,IAAK,SACHH,EAAcjH,EACdkH,EAAcpB,EACdqB,EAAkB,EAClBC,EAAkB,GAClB,MACF,IAAK,OACHH,EAAcpB,EACdqB,EAAcjH,EACdkH,EAAkB,GAClBC,EAAkB,EAClB,MACF,IAAK,QACHH,EAAcrB,EACdsB,EAAcjH,EACdkH,EAAkB,EAClBC,EAAkB,EAClB,KAAA,CAIJ,MAAMC,EAAc,KAAK,kBAAkB,EAAIJ,EAAcvI,EAAMwI,EAAcvI,EAC3E2I,EAAc,KAAK,kBAAkB,EAAIL,EAActI,EAAMuI,EAAcxI,EAG3E6I,EAAgBP,EAAW,EAAIK,EAC/BG,EAAgBR,EAAW,EAAIM,EAG/BG,EAAqBF,EAAgB7I,EAAM8I,EAAgB7I,EAC3D+I,EAAqB,CAACH,EAAgB5I,EAAM6I,EAAgB9I,EAGlE,IAAI0D,EAAS,EACTC,EAAS,EAEb,GAAI8E,IAAoB,GAAKiB,EAAa,EAAG,CAE3C,MAAMR,EAAYH,EAAqBN,EAEvC/E,EADiB,KAAK,IAAI,GAAKwF,EAAY,CAAC,EACxBQ,CACtB,CAEA,GAAIhB,IAAoB,GAAKiB,EAAc,EAAG,CAE5C,MAAMR,EAAaH,EAAqBN,EAExC/E,EADkB,KAAK,IAAI,GAAKwF,EAAa,CAAC,EACzBQ,CACvB,CAGAlP,EAAK,SAAW,KAAK,mBAAmB,IAAIuK,GAAK,CAE/C,MAAM4E,EAAY5E,EAAE,EAAIuD,EAClBsB,GAAY7E,EAAE,EAAIwD,EAGlBsB,GAAkBF,EAAYlG,EAC9BqG,GAAkBF,GAAYlG,EAGpC,MAAO,CACL,EAAG4E,EAAcuB,GACjB,EAAGtB,EAAcuB,EAAA,CAErB,CAAC,EAGD,MAAMC,GAAU,KAAK,IAAI,GAAGvP,EAAK,SAAS,IAAIuK,GAAKA,EAAE,CAAC,CAAC,EACjDiF,GAAU,KAAK,IAAI,GAAGxP,EAAK,SAAS,IAAIuK,GAAKA,EAAE,CAAC,CAAC,EACjDkF,GAAU,KAAK,IAAI,GAAGzP,EAAK,SAAS,IAAIuK,GAAKA,EAAE,CAAC,CAAC,EACjDmF,GAAU,KAAK,IAAI,GAAG1P,EAAK,SAAS,IAAIuK,GAAKA,EAAE,CAAC,CAAC,EACjDoF,IAAcJ,GAAUC,IAAW,EACnCI,IAAcH,GAAUC,IAAW,EAGnCvL,EAAUwL,GACVvL,EAAUwL,GAEhB5P,EAAK,SAAWA,EAAK,SAAS,IAAIuK,IAAM,CACtC,EAAGA,EAAE,EAAIpG,EACT,EAAGoG,EAAE,EAAInG,CAAA,EACT,EAGFpE,EAAK,SAAS,EAAI,KAAK,kBAAkB,EAAImE,EAAUoB,EAAMnB,EAAUoB,EACvExF,EAAK,SAAS,EAAI,KAAK,kBAAkB,EAAImE,EAAUqB,EAAMpB,EAAUmB,CACzE,CAEQ,gBAAuB,CAC7B,GAAI,KAAK,eAAgB,CACvB,MAAMsK,EAAc,KAAK,eACnB5F,EAAM,IAAIpK,GACd,KAAK,QACLgQ,EACA,IAAM,CACJ,KAAK,eAAiB,KACtB,KAAK,oBAAA,EACL,KAAK,OAAA,CACP,CAAA,EAEF,KAAK,eAAe,QAAQ5F,CAAG,EAE/B,KAAK,sBAAA,CACP,CACF,CAEQ,QAAe,CACrB,MAAM6F,EAAM,KAAK,IACX7J,EAAQ,KAAK,OAAO,MACpBC,EAAS,KAAK,OAAO,OAG3B4J,EAAI,UAAU,EAAG,EAAG7J,EAAOC,CAAM,EAGjC4J,EAAI,YAAczN,GAClByN,EAAI,UAAY/M,GAGhB,MAAMgN,EAAYxM,EAAmB0C,EAAQ,EAAK3C,EAC5C0M,EAAYzM,EAAmB0C,EAAQ,EAAK3C,EAC5C2M,EAAYzM,EAAmB0C,EAAS,EAAK5C,EAC7C4M,EAAY1M,EAAmB0C,EAAS,EAAK5C,EAGnD,QAASyI,EAAI,KAAK,MAAMgE,EAAYtM,CAAS,EAAIA,EAAWsI,GAAKiE,EAAWjE,GAAKtI,EAAW,CAC1F,MAAM0M,EAAYrM,EAAciI,EAAG,EAAG9F,EAAOC,CAAM,EACnD4J,EAAI,UAAA,EACJA,EAAI,OAAOK,EAAU,EAAG,CAAC,EACzBL,EAAI,OAAOK,EAAU,EAAGjK,CAAM,EAC9B4J,EAAI,OAAA,CACN,CAGA,QAAS9D,EAAI,KAAK,MAAMiE,EAAYxM,CAAS,EAAIA,EAAWuI,GAAKkE,EAAWlE,GAAKvI,EAAW,CAC1F,MAAM0M,EAAYrM,EAAc,EAAGkI,EAAG/F,EAAOC,CAAM,EACnD4J,EAAI,UAAA,EACJA,EAAI,OAAO,EAAGK,EAAU,CAAC,EACzBL,EAAI,OAAO7J,EAAOkK,EAAU,CAAC,EAC7BL,EAAI,OAAA,CACN,CAGAA,EAAI,UAAYxN,GAChBwN,EAAI,KAAO,iBAGX,QAAS/D,EAAI,KAAK,KAAKgE,CAAS,EAAGhE,GAAK,KAAK,MAAMiE,CAAS,EAAGjE,IAC7D,GAAIA,EAAI,IAAM,EAAG,CACf,MAAMoE,EAAYrM,EAAciI,EAAGkE,EAAWhK,EAAOC,CAAM,EAC3D4J,EAAI,SAAS,GAAG/D,CAAC,IAAKoE,EAAU,EAAI,EAAGjK,EAAS,CAAC,CACnD,CAIF,QAAS8F,EAAI,KAAK,KAAKiE,CAAS,EAAGjE,GAAK,KAAK,MAAMkE,CAAS,EAAGlE,IAC7D,GAAIA,EAAI,IAAM,EAAG,CACf,MAAMmE,EAAYrM,EAAciM,EAAW/D,EAAG/F,EAAOC,CAAM,EAC3D4J,EAAI,SAAS,GAAG9D,CAAC,IAAK,EAAGmE,EAAU,EAAI,CAAC,CAC1C,CAIF,MAAMC,EAAStM,EAAc,EAAG,EAAGmC,EAAOC,CAAM,EA4BhD,GA3BA4J,EAAI,YAAcvN,GAClBuN,EAAI,UAAY9M,GAChB8M,EAAI,UAAA,EACJA,EAAI,OAAOM,EAAO,EAAI,GAAIA,EAAO,CAAC,EAClCN,EAAI,OAAOM,EAAO,EAAI,GAAIA,EAAO,CAAC,EAClCN,EAAI,OAAOM,EAAO,EAAGA,EAAO,EAAI,EAAE,EAClCN,EAAI,OAAOM,EAAO,EAAGA,EAAO,EAAI,EAAE,EAClCN,EAAI,OAAA,EACJA,EAAI,UAAYvN,GAChBuN,EAAI,KAAO,iBACXA,EAAI,SAAS,QAASM,EAAO,EAAI,GAAIA,EAAO,EAAI,CAAC,EAGjD,KAAK,QAAQ,QAAQzF,GAAO,CACtBA,EAAI,OAAS,OACf,KAAK,WAAWA,CAAG,EAEnB,KAAK,YAAYA,CAAG,CAExB,CAAC,EAGG,KAAK,eACP,KAAK,WAAW,KAAK,aAAa,EAIhC,KAAK,gBAAgB,OAAS,EAAG,CACnCmF,EAAI,YAActN,EAClBsN,EAAI,UAAYtN,EAChBsN,EAAI,UAAY7M,EAGhB6M,EAAI,UAAA,EACJ,MAAMO,EAAcvM,EAAc,KAAK,gBAAgB,CAAC,EAAE,EAAG,KAAK,gBAAgB,CAAC,EAAE,EAAGmC,EAAOC,CAAM,EACrG4J,EAAI,OAAOO,EAAY,EAAGA,EAAY,CAAC,EACvC,QAASrJ,EAAI,EAAGA,EAAI,KAAK,gBAAgB,OAAQA,IAAK,CACpD,MAAMmJ,EAAYrM,EAAc,KAAK,gBAAgBkD,CAAC,EAAE,EAAG,KAAK,gBAAgBA,CAAC,EAAE,EAAGf,EAAOC,CAAM,EACnG4J,EAAI,OAAOK,EAAU,EAAGA,EAAU,CAAC,CACrC,CA6BA,GA5BAL,EAAI,OAAA,EAGJ,KAAK,gBAAgB,QAAQ,CAACvF,EAAG3K,IAAU,CACzC,MAAMuQ,EAAYrM,EAAcyG,EAAE,EAAGA,EAAE,EAAGtE,EAAOC,CAAM,EACvD4J,EAAI,UAAA,EAGAlQ,IAAU,GAAK,KAAK,gBAAgB,QAAU,GAChDkQ,EAAI,UAAYtN,EAChBsN,EAAI,YAAcrN,EAClBqN,EAAI,UAAY3M,GAChB2M,EAAI,IAAIK,EAAU,EAAGA,EAAU,EAAG1O,GAAqB,EAAG,KAAK,GAAK,CAAC,EACrEqO,EAAI,KAAA,EACJA,EAAI,OAAA,EAGJA,EAAI,UAAYrN,EAChBqN,EAAI,KAAO,sBACXA,EAAI,SAAS,OAAQK,EAAU,EAAI,GAAIA,EAAU,EAAI,CAAC,IAEtDL,EAAI,UAAYtN,EAChBsN,EAAI,IAAIK,EAAU,EAAGA,EAAU,EAAG3O,GAAsB,EAAG,KAAK,GAAK,CAAC,EACtEsO,EAAI,KAAA,EAER,CAAC,EAGG,KAAK,gBAAgB,OAAS,EAAG,CACnCA,EAAI,YAAY,CAAC,EAAG,CAAC,CAAC,EACtBA,EAAI,YAActN,EAClBsN,EAAI,UAAY1M,GAChB0M,EAAI,UAAA,EACJ,MAAMQ,EAAa,KAAK,gBAAgB,KAAK,gBAAgB,OAAS,CAAC,EACjEC,EAAazM,EAAcwM,EAAW,EAAGA,EAAW,EAAGrK,EAAOC,CAAM,EACpEsH,EAAc1J,EAAc,KAAK,SAAS,EAAG,KAAK,SAAS,EAAGmC,EAAOC,CAAM,EAOjF,GANA4J,EAAI,OAAOS,EAAW,EAAGA,EAAW,CAAC,EACrCT,EAAI,OAAOtC,EAAY,EAAGA,EAAY,CAAC,EACvCsC,EAAI,OAAA,EACJA,EAAI,YAAY,EAAE,EAGd,KAAK,gBAAgB,QAAU,EAAG,CACpC,MAAMtE,EAAc,KAAK,gBAAgB,CAAC,EACzB,KAAK,KACpB,KAAK,IAAI,KAAK,SAAS,EAAIA,EAAY,EAAG,CAAC,EAC3C,KAAK,IAAI,KAAK,SAAS,EAAIA,EAAY,EAAG,CAAC,CAAA,EAG9B,KAEbsE,EAAI,YAAY,CAAC,EAAG,CAAC,CAAC,EACtBA,EAAI,YAAcrN,EAClBqN,EAAI,UAAY5M,GAChB4M,EAAI,UAAA,EACJA,EAAI,OAAOS,EAAW,EAAGA,EAAW,CAAC,EACrCT,EAAI,OAAOO,EAAY,EAAGA,EAAY,CAAC,EACvCP,EAAI,OAAA,EACJA,EAAI,YAAY,EAAE,EAEtB,CACF,CAGA,GAAI,KAAK,gBAAgB,OAAS,EAAG,CACnC,MAAMvG,EAAchI,GACdiP,EAAO,KAAK,gBAAgB,QAAUjH,EACxC,OAAO,KAAK,gBAAgB,MAAM,IAAIA,CAAW,yBACjD,OAAO,KAAK,gBAAgB,MAAM,IAAIA,CAAW,qBACrDuG,EAAI,UAAY,KAAK,gBAAgB,QAAUvG,EAAc5G,EAAqBE,EAClFiN,EAAI,KAAO,sBACXA,EAAI,SAASU,EAAM,GAAItK,EAAS,EAAE,CACpC,CACF,CAGA,GAAI,KAAK,cAAgB,UAAY,CAAC,KAAK,WAAY,CACrD,MAAMsH,EAAc1J,EAAc,KAAK,SAAS,EAAG,KAAK,SAAS,EAAGmC,EAAOC,CAAM,EAEjF4J,EAAI,YAAcpN,GAClBoN,EAAI,UAAY1M,GAChB0M,EAAI,YAAY,CAAC,EAAG,CAAC,CAAC,EAGtBA,EAAI,UAAA,EACJA,EAAI,OAAOtC,EAAY,EAAG,CAAC,EAC3BsC,EAAI,OAAOtC,EAAY,EAAGtH,CAAM,EAChC4J,EAAI,OAAA,EAGJA,EAAI,UAAA,EACJA,EAAI,OAAO,EAAGtC,EAAY,CAAC,EAC3BsC,EAAI,OAAO7J,EAAOuH,EAAY,CAAC,EAC/BsC,EAAI,OAAA,EAEJA,EAAI,YAAY,EAAE,EAGlBA,EAAI,UAAYnN,EAChBmN,EAAI,UAAA,EACJA,EAAI,IAAItC,EAAY,EAAGA,EAAY,EAAGpL,GAAqB,EAAG,KAAK,GAAK,CAAC,EACzE0N,EAAI,KAAA,EAGJA,EAAI,UAAYlN,EAChBkN,EAAI,KAAO,iBACXA,EAAI,SAAS,IAAI,KAAK,SAAS,EAAE,QAAQ,CAAC,CAAC,MAAM,KAAK,SAAS,EAAE,QAAQ,CAAC,CAAC,KAC9DtC,EAAY,EAAI,GAAIA,EAAY,EAAI,EAAA,CACnD,CAGA,GAAI,KAAK,cAAgB,iBAAmB,KAAK,YAAc,KAAK,aAAc,CAChF,MAAMvH,EAAQ,KAAK,OAAO,MACpBC,EAAS,KAAK,OAAO,OAG3B4J,EAAI,KAAA,EACJA,EAAI,YAAchN,EAClBgN,EAAI,UAAYzM,GAChByM,EAAI,YAAY,CAAC,EAAG,CAAC,CAAC,EAEtB,MAAMW,EAAa3M,EAAc,KAAK,WAAW,SAAS,EAAG,KAAK,WAAW,SAAS,EAAGmC,EAAOC,CAAM,EACtG,GAAI,KAAK,WAAW,YAAc,OAAS,KAAK,WAAW,OAAS,KAAK,WAAW,OAAQ,CAC1F,MAAMwK,EAAI,KAAK,WAAW,MAAQpN,EAC5BqN,EAAI,KAAK,WAAW,OAASrN,EACnCwM,EAAI,WAAWW,EAAW,EAAIC,EAAI,EAAI,EAAGD,EAAW,EAAIE,EAAI,EAAI,EAAGD,EAAI,GAAIC,EAAI,EAAE,CACnF,SAAW,KAAK,WAAW,YAAc,UAAY,KAAK,WAAW,OAAQ,CAC3E,MAAM7D,EAAI,KAAK,WAAW,OAASxJ,EACnCwM,EAAI,UAAA,EACJA,EAAI,IAAIW,EAAW,EAAGA,EAAW,EAAG3D,EAAI,EAAG,EAAG,KAAK,GAAK,CAAC,EACzDgD,EAAI,OAAA,CACN,CAEAA,EAAI,YAAY,EAAE,EAGlB,MAAM5D,EAAUpI,EAAc,KAAK,aAAa,EAAG,KAAK,aAAa,EAAGmC,EAAOC,CAAM,EACrF4J,EAAI,UAAYhN,EAChBgN,EAAI,UAAA,EACJA,EAAI,IAAI5D,EAAQ,EAAGA,EAAQ,EAAG/K,GAAqB,EAAG,KAAK,GAAK,CAAC,EACjE2O,EAAI,KAAA,EAGJ,MAAMtC,EAAc1J,EAAc,KAAK,SAAS,EAAG,KAAK,SAAS,EAAGmC,EAAOC,CAAM,EACjF4J,EAAI,YAAchN,EAClBgN,EAAI,UAAY7M,EAChB6M,EAAI,YAAY,CAAC,EAAG,CAAC,CAAC,EACtBA,EAAI,UAAA,EACJA,EAAI,OAAO5D,EAAQ,EAAGA,EAAQ,CAAC,EAC/B4D,EAAI,OAAOtC,EAAY,EAAGA,EAAY,CAAC,EACvCsC,EAAI,OAAA,EAEJA,EAAI,QAAA,CACN,CAGI,KAAK,gBAAkB,KAAK,eAAe,OAAS,QAAU,CAAC,KAAK,oBACtE,KAAK,mBAAmB,KAAK,cAAsB,EACnD,KAAK,mBAAmB,KAAK,cAAsB,EAEvD,CAGQ,mBAAmB9P,EAAkB,CAC3C,MAAM8P,EAAM,KAAK,IACX7J,EAAQ,KAAK,OAAO,MACpBC,EAAS,KAAK,OAAO,OAG3B,IAAIuG,EAAO,EAAGC,EAAO,EAAGS,EAAO,EAAGR,EAAO,EAEzC,GAAI3M,EAAK,YAAc,OAASA,EAAK,OAASA,EAAK,OAAQ,CACzD,MAAMqG,EAAQrG,EAAK,MAAQ,EACrBsG,EAAQtG,EAAK,OAAS,EACtBuF,EAAM,KAAK,IAAIvF,EAAK,KAAK,EACzBwF,EAAM,KAAK,IAAIxF,EAAK,KAAK,EAUzB4M,EAPU,CACd,CAAE,EAAG,CAACvG,EAAO,EAAG,CAACC,CAAA,EACjB,CAAE,EAAGD,EAAO,EAAG,CAACC,CAAA,EAChB,CAAE,EAAGD,EAAOC,CAAG,EACf,CAAE,EAAG,CAACD,EAAOC,CAAG,CAAM,EAGK,IAAIuG,IAAM,CACrC,EAAG7M,EAAK,SAAS,EAAI6M,EAAE,EAAItH,EAAMsH,EAAE,EAAIrH,EACvC,EAAGxF,EAAK,SAAS,EAAI6M,EAAE,EAAIrH,EAAMqH,EAAE,EAAItH,CAAA,EACvC,EAEFkH,EAAO,KAAK,IAAI,GAAGG,EAAa,IAAIC,GAAKA,EAAE,CAAC,CAAC,EAC7CH,EAAO,KAAK,IAAI,GAAGE,EAAa,IAAIC,GAAKA,EAAE,CAAC,CAAC,EAC7CM,EAAO,KAAK,IAAI,GAAGP,EAAa,IAAIC,GAAKA,EAAE,CAAC,CAAC,EAC7CF,EAAO,KAAK,IAAI,GAAGC,EAAa,IAAIC,GAAKA,EAAE,CAAC,CAAC,CAC/C,SAAW7M,EAAK,YAAc,UAAYA,EAAK,OAAQ,CACrD,MAAM8M,EAAI9M,EAAK,OACfyM,EAAOzM,EAAK,SAAS,EAAI8M,EACzBJ,EAAO1M,EAAK,SAAS,EAAI8M,EACzBK,EAAOnN,EAAK,SAAS,EAAI8M,EACzBH,EAAO3M,EAAK,SAAS,EAAI8M,CAC3B,SAAW9M,EAAK,YAAc,WAAaA,EAAK,SAAU,CACxD,MAAMuF,EAAM,KAAK,IAAIvF,EAAK,KAAK,EACzBwF,EAAM,KAAK,IAAIxF,EAAK,KAAK,EAEzB+M,EAAgB/M,EAAK,SAAS,IAAI,IAAM,CAC5C,EAAGA,EAAK,SAAS,EAAI,EAAE,EAAIuF,EAAM,EAAE,EAAIC,EACvC,EAAGxF,EAAK,SAAS,EAAI,EAAE,EAAIwF,EAAM,EAAE,EAAID,CAAA,EACvC,EAEFkH,EAAO,KAAK,IAAI,GAAGM,EAAc,IAAI,GAAK,EAAE,CAAC,CAAC,EAC9CL,EAAO,KAAK,IAAI,GAAGK,EAAc,IAAI,GAAK,EAAE,CAAC,CAAC,EAC9CI,EAAO,KAAK,IAAI,GAAGJ,EAAc,IAAI,GAAK,EAAE,CAAC,CAAC,EAC9CJ,EAAO,KAAK,IAAI,GAAGI,EAAc,IAAI,GAAK,EAAE,CAAC,CAAC,CAChD,CAGA,MAAMK,EAAUtJ,EAAc2I,EAAME,EAAM1G,EAAOC,CAAM,EACjDqH,EAAczJ,EAAc4I,EAAMS,EAAMlH,EAAOC,CAAM,EAG3D4J,EAAI,KAAA,EACJA,EAAI,YAActN,EAClBsN,EAAI,UAAY,EAChBA,EAAI,YAAY,CAAC,EAAG,CAAC,CAAC,EACtBA,EAAI,WACF1C,EAAQ,EACRA,EAAQ,EACRG,EAAY,EAAIH,EAAQ,EACxBG,EAAY,EAAIH,EAAQ,CAAA,EAE1B0C,EAAI,YAAY,EAAE,EAGlB,MAAM9C,GAAcI,EAAQ,EAAIG,EAAY,GAAK,EAC3CqD,EAASxD,EAAQ,EACjBH,EAAU2D,EAAS/O,GAGzBiO,EAAI,YAActN,EAClBsN,EAAI,UAAY,EAChBA,EAAI,UAAA,EACJA,EAAI,OAAO9C,EAAY4D,CAAM,EAC7Bd,EAAI,OAAO9C,EAAYC,CAAO,EAC9B6C,EAAI,OAAA,EAGJA,EAAI,UAAY9N,GAChB8N,EAAI,YAAc,OAClBA,EAAI,UAAY,EAChBA,EAAI,UAAA,EACJA,EAAI,IAAI9C,EAAYC,EAASrL,GAAgC,EAAG,KAAK,GAAK,CAAC,EAC3EkO,EAAI,KAAA,EACJA,EAAI,OAAA,EAGJA,EAAI,YAAc,OAClBA,EAAI,UAAY,IAChBA,EAAI,UAAA,EACJA,EAAI,IAAI9C,EAAYC,EAAS,EAAG,GAAK,KAAK,GAAK,GAAG,EAClD6C,EAAI,OAAA,EAEJA,EAAI,UAAA,EACJA,EAAI,OAAO9C,EAAa,IAAKC,EAAU,CAAC,EACxC6C,EAAI,OAAO9C,EAAa,EAAGC,EAAU,GAAG,EACxC6C,EAAI,OAAO9C,EAAa,IAAKC,EAAU,GAAG,EAC1C6C,EAAI,KAAA,EAEJA,EAAI,QAAA,CACN,CAGQ,mBAAmB9P,EAAkB,CAC3C,MAAM8P,EAAM,KAAK,IACX7J,EAAQ,KAAK,OAAO,MACpBC,EAAS,KAAK,OAAO,OAG3B,IAAIuG,EAAO,EAAGC,EAAO,EAAGS,EAAO,EAAGR,EAAO,EAEzC,GAAI3M,EAAK,YAAc,OAASA,EAAK,OAASA,EAAK,OAAQ,CACzD,MAAMqG,EAAQrG,EAAK,MAAQ,EACrBsG,EAAQtG,EAAK,OAAS,EACtBuF,EAAM,KAAK,IAAIvF,EAAK,KAAK,EACzBwF,EAAM,KAAK,IAAIxF,EAAK,KAAK,EASzB4M,EAPU,CACd,CAAE,EAAG,CAACvG,EAAO,EAAG,CAACC,CAAA,EACjB,CAAED,EAAU,EAAG,CAACC,CAAA,EAChB,CAAED,EAAU,EAAGC,CAAA,EACf,CAAE,EAAG,CAACD,EAAO,EAAGC,CAAA,CAAM,EAGK,IAAIuG,IAAM,CACrC,EAAG7M,EAAK,SAAS,EAAI6M,EAAE,EAAItH,EAAMsH,EAAE,EAAIrH,EACvC,EAAGxF,EAAK,SAAS,EAAI6M,EAAE,EAAIrH,EAAMqH,EAAE,EAAItH,CAAA,EACvC,EAEFkH,EAAO,KAAK,IAAI,GAAGG,EAAa,IAAIC,GAAKA,EAAE,CAAC,CAAC,EAC7CH,EAAO,KAAK,IAAI,GAAGE,EAAa,IAAIC,GAAKA,EAAE,CAAC,CAAC,EAC7CM,EAAO,KAAK,IAAI,GAAGP,EAAa,IAAIC,GAAKA,EAAE,CAAC,CAAC,EAC7CF,EAAO,KAAK,IAAI,GAAGC,EAAa,IAAIC,GAAKA,EAAE,CAAC,CAAC,CAC/C,SAAW7M,EAAK,YAAc,UAAYA,EAAK,OAAQ,CACrD,MAAM8M,EAAI9M,EAAK,OACfyM,EAAOzM,EAAK,SAAS,EAAI8M,EACzBJ,EAAO1M,EAAK,SAAS,EAAI8M,EACzBK,EAAOnN,EAAK,SAAS,EAAI8M,EACzBH,EAAO3M,EAAK,SAAS,EAAI8M,CAC3B,SAAW9M,EAAK,YAAc,WAAaA,EAAK,SAAU,CACxD,MAAMuF,EAAM,KAAK,IAAIvF,EAAK,KAAK,EACzBwF,EAAM,KAAK,IAAIxF,EAAK,KAAK,EAEzB+M,EAAgB/M,EAAK,SAAS,IAAIuK,IAAM,CAC5C,EAAGvK,EAAK,SAAS,EAAIuK,EAAE,EAAIhF,EAAMgF,EAAE,EAAI/E,EACvC,EAAGxF,EAAK,SAAS,EAAIuK,EAAE,EAAI/E,EAAM+E,EAAE,EAAIhF,CAAA,EACvC,EAEFkH,EAAO,KAAK,IAAI,GAAGM,EAAc,IAAIxC,GAAKA,EAAE,CAAC,CAAC,EAC9CmC,EAAO,KAAK,IAAI,GAAGK,EAAc,IAAIxC,GAAKA,EAAE,CAAC,CAAC,EAC9C4C,EAAO,KAAK,IAAI,GAAGJ,EAAc,IAAIxC,GAAKA,EAAE,CAAC,CAAC,EAC9CoC,EAAO,KAAK,IAAI,GAAGI,EAAc,IAAIxC,GAAKA,EAAE,CAAC,CAAC,CAChD,CAGA,MAAM6C,EAAUtJ,EAAc2I,EAAME,EAAM1G,EAAOC,CAAM,EACjDmH,EAAWvJ,EAAc4I,EAAMC,EAAM1G,EAAOC,CAAM,EAClDoH,EAAaxJ,EAAc2I,EAAMU,EAAMlH,EAAOC,CAAM,EACpDqH,EAAczJ,EAAc4I,EAAMS,EAAMlH,EAAOC,CAAM,EACrDW,GAAWuG,EAAQ,EAAIC,EAAS,GAAK,EACrCvG,GAAWsG,EAAQ,EAAIE,EAAW,GAAK,EAGvCG,EAAU,CACd,CAAE,EAAGL,EAAQ,EAAG,EAAGA,EAAQ,EAAG,KAAM,IAAA,EACpC,CAAE,EAAGvG,EAAS,EAAGuG,EAAQ,EAAG,KAAM,KAAA,EAClC,CAAE,EAAGC,EAAS,EAAG,EAAGA,EAAS,EAAG,KAAM,IAAA,EACtC,CAAE,EAAGA,EAAS,EAAG,EAAGvG,EAAS,KAAM,OAAA,EACnC,CAAE,EAAGyG,EAAY,EAAG,EAAGA,EAAY,EAAG,KAAM,IAAA,EAC5C,CAAE,EAAG1G,EAAS,EAAG0G,EAAY,EAAG,KAAM,QAAA,EACtC,CAAE,EAAGD,EAAW,EAAG,EAAGA,EAAW,EAAG,KAAM,IAAA,EAC1C,CAAE,EAAGA,EAAW,EAAG,EAAGxG,EAAS,KAAM,MAAA,CAAO,EAG9CgJ,EAAI,KAAA,EAGJrC,EAAQ,QAAQC,GAAU,CACxBoC,EAAI,UAAYhO,GAChBgO,EAAI,YAAc/N,GAClB+N,EAAI,UAAY,EAEhBA,EAAI,SACFpC,EAAO,EAAI/L,EACX+L,EAAO,EAAI/L,EACXD,EACAA,CAAA,EAEFoO,EAAI,WACFpC,EAAO,EAAI/L,EACX+L,EAAO,EAAI/L,EACXD,EACAA,CAAA,CAEJ,CAAC,EAEDoO,EAAI,QAAA,CACN,CAEQ,WAAW9P,EAAkB,CACnC,MAAM8P,EAAM,KAAK,IACX7J,EAAQ,KAAK,OAAO,MACpBC,EAAS,KAAK,OAAO,OACrB2K,EAAa,KAAK,iBAAmB7Q,EAGrCmQ,EAAYrM,EAAc9D,EAAK,SAAS,EAAGA,EAAK,SAAS,EAAGiG,EAAOC,CAAM,EAU/E,GARA4J,EAAI,KAAA,EACJA,EAAI,UAAUK,EAAU,EAAGA,EAAU,CAAC,EACtCL,EAAI,OAAO,CAAC9P,EAAK,KAAK,EAEtB8P,EAAI,UAAYnM,GAAY3D,EAAK,QAAQ,EACzC8P,EAAI,YAAce,EAAanN,GAAkBb,EACjDiN,EAAI,UAAYe,EAAa,EAAI,EAE7B7Q,EAAK,YAAc,OAASA,EAAK,OAASA,EAAK,OAAQ,CACzD,MAAM0Q,EAAIlM,EAAmBxE,EAAK,KAAK,EACjC2Q,EAAInM,EAAmBxE,EAAK,MAAM,EACxC8P,EAAI,SAAS,CAACY,EAAI,EAAG,CAACC,EAAI,EAAGD,EAAGC,CAAC,EACjCb,EAAI,WAAW,CAACY,EAAI,EAAG,CAACC,EAAI,EAAGD,EAAGC,CAAC,EAGnCb,EAAI,YAAce,EAAa,OAAS,UACxCf,EAAI,UAAY,EAChBA,EAAI,UAAA,EACJA,EAAI,OAAO,EAAG,CAAC,EACfA,EAAI,OAAOY,EAAI,EAAG,CAAC,EACnBZ,EAAI,OAAA,CACN,SAAW9P,EAAK,YAAc,UAAYA,EAAK,OAAQ,CACrD,MAAM8M,EAAItI,EAAmBxE,EAAK,MAAM,EACxC8P,EAAI,UAAA,EACJA,EAAI,IAAI,EAAG,EAAGhD,EAAG,EAAG,KAAK,GAAK,CAAC,EAC/BgD,EAAI,KAAA,EACJA,EAAI,OAAA,EAGJA,EAAI,YAAce,EAAa,OAAS,UACxCf,EAAI,UAAY,EAChBA,EAAI,UAAA,EACJA,EAAI,OAAO,EAAG,CAAC,EACfA,EAAI,OAAOhD,EAAG,CAAC,EACfgD,EAAI,OAAA,CACN,SAAW9P,EAAK,YAAc,WAAaA,EAAK,UAAYA,EAAK,SAAS,OAAS,EAAG,CACpF8P,EAAI,UAAA,EACJ,MAAMtE,EAAcxL,EAAK,SAAS,CAAC,EAC7BqQ,EAAc,CAAE,EAAG7L,EAAmBgH,EAAY,CAAC,EAAG,EAAG,CAAChH,EAAmBgH,EAAY,CAAC,CAAA,EAChGsE,EAAI,OAAOO,EAAY,EAAGA,EAAY,CAAC,EAEvC,QAASrJ,EAAI,EAAGA,EAAIhH,EAAK,SAAS,OAAQgH,IAAK,CAC7C,MAAMuD,EAAIvK,EAAK,SAASgH,CAAC,EACnB8J,EAAU,CAAE,EAAGtM,EAAmB+F,EAAE,CAAC,EAAG,EAAG,CAAC/F,EAAmB+F,EAAE,CAAC,CAAA,EACxEuF,EAAI,OAAOgB,EAAQ,EAAGA,EAAQ,CAAC,CACjC,CACAhB,EAAI,UAAA,EACJA,EAAI,KAAA,EACJA,EAAI,OAAA,CACN,CAWA,GARAA,EAAI,UAAYe,EAAa,OAAShO,EACtCiN,EAAI,UAAA,EACJA,EAAI,IAAI,EAAG,EAAG,EAAG,EAAG,KAAK,GAAK,CAAC,EAC/BA,EAAI,KAAA,EAEJA,EAAI,QAAA,EAGA,KAAK,mBAAqB,KAAK,cAAgB9P,GAAQA,EAAK,SAC9D,QAASgH,EAAI,EAAGA,EAAIhH,EAAK,SAAS,OAAQgH,IAAK,CAC7C,MAAMsE,EAAStL,EAAK,SAASgH,CAAC,EAGxBzB,EAAM,KAAK,IAAIvF,EAAK,KAAK,EACzBwF,EAAM,KAAK,IAAIxF,EAAK,KAAK,EACzBkF,EAASlF,EAAK,SAAS,EAAIsL,EAAO,EAAI/F,EAAM+F,EAAO,EAAI9F,EACvDL,EAASnF,EAAK,SAAS,EAAIsL,EAAO,EAAI9F,EAAM8F,EAAO,EAAI/F,EAGvDwL,EAAejN,EAAcoB,EAAQC,EAAQc,EAAOC,CAAM,EAGhE4J,EAAI,KAAA,EACJA,EAAI,UAAY,KAAK,qBAAuB9I,EAAIrE,EAAqBH,EACrEsN,EAAI,YAAc,OAClBA,EAAI,UAAY7M,EAChB6M,EAAI,UAAA,EACJA,EAAI,IAAIiB,EAAa,EAAGA,EAAa,EAAG5O,GAAuB,EAAG,KAAK,GAAK,CAAC,EAC7E2N,EAAI,KAAA,EACJA,EAAI,OAAA,EAGJA,EAAI,UAAY,OAChBA,EAAI,KAAO,sBACXA,EAAI,UAAY,SAChBA,EAAI,aAAe,SACnBA,EAAI,SAAS9I,EAAE,SAAA,EAAY+J,EAAa,EAAGA,EAAa,CAAC,EACzDjB,EAAI,QAAA,CACN,CAIEe,IACFf,EAAI,UAAYlN,EAChBkN,EAAI,KAAO,iBACXA,EAAI,SAAS9P,EAAK,GAAG,UAAU,EAAG,EAAE,EAAI,MAAOmQ,EAAU,EAAI,GAAIA,EAAU,EAAI,EAAE,EAErF,CAEQ,YAAY1G,EAAoB,CACtC,MAAMqG,EAAM,KAAK,IACX7J,EAAQ,KAAK,OAAO,MACpBC,EAAS,KAAK,OAAO,OACrB2K,EAAa,KAAK,iBAAmBpH,EAGrCwC,EAAQ,KAAK,QAAQ,QAAUtC,EAAE,KAAOF,EAAM,OAAO,EACrDgC,EAAQ,KAAK,QAAQ,QAAU9B,EAAE,KAAOF,EAAM,OAAO,EAE3D,GAAI,CAACwC,GAAS,CAACR,EAAO,OAGtB,MAAMc,EAAe9G,EACnBgE,EAAM,aAAa,EACnBA,EAAM,aAAa,EACnBwC,EAAM,SAAS,EACfA,EAAM,SAAS,EACfA,EAAM,KAAA,EAEFO,EAAe/G,EACnBgE,EAAM,aAAa,EACnBA,EAAM,aAAa,EACnBgC,EAAM,SAAS,EACfA,EAAM,SAAS,EACfA,EAAM,KAAA,EAIFuF,EAAgBlN,EAAcyI,EAAa,EAAGA,EAAa,EAAGtG,EAAOC,CAAM,EAC3E+K,EAAgBnN,EAAc0I,EAAa,EAAGA,EAAa,EAAGvG,EAAOC,CAAM,EAGjF4J,EAAI,YAAce,EAAanN,GAAkB,UACjDoM,EAAI,UAAYe,EAAa,EAAI,EAEjCf,EAAI,UAAA,EACJA,EAAI,OAAOkB,EAAc,EAAGA,EAAc,CAAC,EAC3ClB,EAAI,OAAOmB,EAAc,EAAGA,EAAc,CAAC,EAC3CnB,EAAI,OAAA,EAGJ,MAAMoB,EAAeL,EAAa3O,GAAyBD,GAC3D6N,EAAI,UAAYnN,EAGhB,MAAMwO,EAAoB,KAAK,gBAAkB,KAAK,eAAe,QAAU1H,GAAS,KAAK,eAAe,UACtG2H,EAAoB,KAAK,gBAAkB,KAAK,eAAe,QAAU3H,GAAS,CAAC,KAAK,eAAe,UAwB7G,GArBAqG,EAAI,UAAA,EACJA,EAAI,IAAIkB,EAAc,EAAGA,EAAc,EAAGG,EAAoB,GAAKD,EAAc,EAAG,KAAK,GAAK,CAAC,EAC/FpB,EAAI,KAAA,GACAe,GAAcM,KAChBrB,EAAI,YAAcqB,EAAoB1O,EAAkB,OACxDqN,EAAI,UAAYqB,EAAoBhO,GAA4BF,EAChE6M,EAAI,OAAA,GAINA,EAAI,UAAY,UAChBA,EAAI,UAAA,EACJA,EAAI,IAAImB,EAAc,EAAGA,EAAc,EAAGG,EAAoB,GAAKF,EAAc,EAAG,KAAK,GAAK,CAAC,EAC/FpB,EAAI,KAAA,GACAe,GAAcO,KAChBtB,EAAI,YAAcsB,EAAoB3O,EAAkB,OACxDqN,EAAI,UAAYsB,EAAoBjO,GAA4BF,EAChE6M,EAAI,OAAA,GAIFe,EAAY,CACdf,EAAI,UAAYlN,EAChBkN,EAAI,KAAO,iBACX,MAAMuB,GAAQL,EAAc,EAAIC,EAAc,GAAK,EAC7CK,GAAQN,EAAc,EAAIC,EAAc,GAAK,EACnDnB,EAAI,SAAS,iBAAkBuB,EAAO,EAAGC,EAAO,CAAC,CACnD,CACF,CAMQ,wBAAwBC,EAA0B,CACxD,MAAMC,EAAc,KAAK,MAAMD,EAAW,GAAI,EACxCE,EAAa,KAAK,MAAOD,EAAc,EAAG,EAChD,OAAOC,GAAc,GAAKA,GAAc,EAAIA,EAAa,CAC3D,CAOQ,wBAAwBF,EAAkBG,EAA8B,CAI9E,MAAMC,EAFe,KAAK,MAAMJ,EAAW,GAAG,EAAI,IAEdG,EAAe,IAEnD,OAAO,KAAK,IAAI,KAAK,IAAIC,EAAa,CAAC,EAAG,CAAC,CAC7C,CAEQ,qBAA4B,CAClC,MAAM7I,EAAQ,SAAS,eAAe,kBAAkB,EACxD,GAAKA,EAEL,IAAI,CAAC,KAAK,eAAgB,CACxBA,EAAM,UAAY,2CAClB,MACF,CAEI,KAAK,eAAe,OAAS,QAC/BA,EAAM,UAAY,KAAK,uBAAuB,KAAK,cAAc,EACjE,KAAK,uBAAA,IAELA,EAAM,UAAY,KAAK,wBAAwB,KAAK,cAAc,EAClE,KAAK,wBAAA,GAET,CAEQ,uBAAuB9I,EAAoB,CAEjD,IAAI4R,EAAsB,GAE1B,OAAI5R,EAAK,YAAc,OAASA,EAAK,QAAU,QAAaA,EAAK,SAAW,OAC1E4R,EAAsB;AAAA;AAAA;AAAA;AAAA;AAAA,4EAKgD5R,EAAK,MAAM,QAAQ,CAAC,CAAC;AAAA;AAAA;AAAA;AAAA,6EAIpBA,EAAK,OAAO,QAAQ,CAAC,CAAC;AAAA;AAAA;AAAA,QAIpFA,EAAK,YAAc,UAAYA,EAAK,SAAW,OACxD4R,EAAsB;AAAA;AAAA;AAAA;AAAA;AAAA,6EAKiD5R,EAAK,OAAO,QAAQ,CAAC,CAAC;AAAA;AAAA;AAAA,QAIpFA,EAAK,YAAc,WAAaA,EAAK,UAAYA,EAAK,SAAS,OAAS,IAajF4R,EAAsB;AAAA;AAAA;AAAA,YAZD5R,EAAK,SAAS,IAAI,CAACuK,EAAGvD,IAAM;AAAA;AAAA,sBAEjCA,EAAI,CAAC;AAAA;AAAA,mDAEwBA,CAAC;AAAA,4BACxBuD,EAAE,EAAE,QAAQ,CAAC,CAAC;AAAA,mDACSvD,CAAC;AAAA,4BACxBuD,EAAE,EAAE,QAAQ,CAAC,CAAC;AAAA;AAAA;AAAA,OAGnC,EAAE,KAAK,EAAE,CAKQ;AAAA;AAAA;AAAA,SAMb;AAAA;AAAA;AAAA;AAAA,4CAIiCvK,EAAK,EAAE;AAAA;AAAA;AAAA;AAAA,gDAIHA,EAAK,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+EAQiBA,EAAK,SAAS,EAAE,QAAQ,CAAC,CAAC;AAAA;AAAA;AAAA;AAAA,+EAI1BA,EAAK,SAAS,EAAE,QAAQ,CAAC,CAAC;AAAA;AAAA;AAAA;AAAA,2EAI9BA,EAAK,MAAQ,IAAM,KAAK,IAAI,QAAQ,CAAC,CAAC;AAAA;AAAA;AAAA;AAAA,QAIzG4R,CAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAMU5R,EAAK,WAAa,SAAW,WAAa,EAAE;AAAA,sCAC3CA,EAAK,WAAa,UAAY,WAAa,EAAE;AAAA,wCAC3CA,EAAK,WAAa,YAAc,WAAa,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4EASXA,EAAK,OAAO;AAAA;AAAA;AAAA;AAAA,8EAIV,KAAK,MAAMA,EAAK,SAAW,GAAG,EAAI,KAAK,QAAQ,CAAC,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA,gFAK/CA,EAAK,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAShE,KAAK,wBAAwBA,EAAK,QAAQ,IAAM,EAAI,WAAa,EAAE;AAAA,gCACnE,KAAK,wBAAwBA,EAAK,QAAQ,IAAM,EAAI,WAAa,EAAE;AAAA,gCACnE,KAAK,wBAAwBA,EAAK,QAAQ,IAAM,EAAI,WAAa,EAAE;AAAA,gCACnE,KAAK,wBAAwBA,EAAK,QAAQ,IAAM,EAAI,WAAa,EAAE;AAAA,gCACnE,KAAK,wBAAwBA,EAAK,QAAQ,IAAM,EAAI,WAAa,EAAE;AAAA;AAAA,kDAEjD,KAAK,wBAAwBA,EAAK,QAAQ,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kFAQXA,EAAK,aAAa;AAAA;AAAA;AAAA;AAAA,mFAIjBA,EAAK,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iFAQrBA,EAAK,YAAY;AAAA;AAAA;AAAA,6EAGrBA,EAAK,cAAgB,UAAY,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAS9G,CAEQ,wBAAwByJ,EAAsB,CACpD,MAAMwC,EAAQ,KAAK,QAAQ,QAAUtC,EAAE,KAAOF,EAAM,OAAO,EACrDgC,EAAQ,KAAK,QAAQ,QAAU9B,EAAE,KAAOF,EAAM,OAAO,EAE3D,MAAO;AAAA;AAAA;AAAA;AAAA,4CAIiCA,EAAM,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CAQRwC,EAASA,EAAe,GAAG,UAAU,EAAG,EAAE,EAAI,MAAQ,KAAK;AAAA;AAAA;AAAA;AAAA,4CAI3DR,EAASA,EAAe,GAAG,UAAU,EAAG,EAAE,EAAI,MAAQ,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mFAQpBhC,EAAM,aAAa,EAAE,QAAQ,CAAC,CAAC;AAAA;AAAA;AAAA;AAAA,mFAI/BA,EAAM,aAAa,EAAE,QAAQ,CAAC,CAAC;AAAA;AAAA;AAAA;AAAA,mFAI/BA,EAAM,aAAa,EAAE,QAAQ,CAAC,CAAC;AAAA;AAAA;AAAA;AAAA,mFAI/BA,EAAM,aAAa,EAAE,QAAQ,CAAC,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4EAOtCA,EAAM,YAAc,UAAY,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA,gFAK9B,KAAK,OAAOA,EAAM,YAAc,GAAK,IAAM,KAAK,EAAE,CAAC;AAAA;AAAA;AAAA;AAAA,gFAInD,KAAK,OAAOA,EAAM,YAAc,GAAK,IAAM,KAAK,EAAE,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4EAOvDA,EAAM,YAAc,UAAY,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA,iFAK7BA,EAAM,YAAc,GAAG,QAAQ,CAAC,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA,oFAK9BA,EAAM,gBAAkB,GAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iFAQ/BA,EAAM,iBAAmB,UAAY,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAUtH,CAEQ,wBAA+B,CACrC,MAAMoI,EAAa,CAACC,EAAY9H,EAAkB+H,EAAa,KAAU,CACvE,MAAMC,EAAO,SAAS,eAAeF,CAAE,EACnC,CAACE,GAAQ,CAAC,KAAK,gBAAkB,KAAK,eAAe,OAAS,QAElEA,EAAK,iBAAiBD,EAAa,SAAW,QAAS,IAAM,CAC3D,GAAI,KAAK,gBAAkB,KAAK,eAAe,OAAS,OAAQ,CAC9D,MAAM/R,EAAO,KAAK,eACZO,EAAYP,EAAagK,CAAI,EAC7BxJ,EAAWuR,EAAaC,EAAK,QAAWF,IAAO,gBAAkBE,EAAK,MAAQ,WAAWA,EAAK,KAAK,EAGzG,GAAIzR,IAAaC,EAAU,CACzB,MAAMyJ,EAAM,IAAI5J,EACdL,EACAgK,EACAzJ,EACAC,EACA,IAAM,CACJ,KAAK,OAAA,EACL,KAAK,oBAAA,CACP,CAAA,EAEF,KAAK,eAAe,QAAQyJ,CAAG,EAC/B,KAAK,sBAAA,CACP,CACF,CACF,CAAC,CACH,EAGMgI,EAAY,SAAS,eAAe,iBAAiB,EACvDA,GAAa,KAAK,gBAAkB,KAAK,eAAe,OAAS,QACnEA,EAAU,iBAAiB,QAAS,IAAM,CACxC,GAAI,KAAK,gBAAkB,KAAK,eAAe,OAAS,OAAQ,CAC9D,MAAMjS,EAAO,KAAK,eACZC,EAAOD,EAAK,SAAS,EACrBG,EAAO,WAAW8R,EAAU,KAAK,EAEvC,GAAIhS,IAASE,EAAM,CACjB,MAAM8J,EAAM,IAAI5J,EACdL,EACA,aACAC,EACAE,EACA,IAAM,CACJH,EAAK,SAAS,EAAIG,EAClB,KAAK,OAAA,EACL,KAAK,oBAAA,CACP,CAAA,EAEF,KAAK,eAAe,QAAQ8J,CAAG,EAC/B,KAAK,sBAAA,CACP,CACF,CACF,CAAC,EAIH,MAAMiI,EAAY,SAAS,eAAe,iBAAiB,EACvDA,GAAa,KAAK,gBAAkB,KAAK,eAAe,OAAS,QACnEA,EAAU,iBAAiB,QAAS,IAAM,CACxC,GAAI,KAAK,gBAAkB,KAAK,eAAe,OAAS,OAAQ,CAC9D,MAAMlS,EAAO,KAAK,eACZE,EAAOF,EAAK,SAAS,EACrBI,EAAO,WAAW8R,EAAU,KAAK,EAEvC,GAAIhS,IAASE,EAAM,CACjB,MAAM6J,EAAM,IAAI5J,EACdL,EACA,aACAE,EACAE,EACA,IAAM,CACJJ,EAAK,SAAS,EAAII,EAClB,KAAK,OAAA,EACL,KAAK,oBAAA,CACP,CAAA,EAEF,KAAK,eAAe,QAAQ6J,CAAG,EAC/B,KAAK,sBAAA,CACP,CACF,CACF,CAAC,EAIH,MAAMkI,EAAa,SAAS,eAAe,YAAY,EAgCvD,GA/BIA,GAAc,KAAK,gBAAkB,KAAK,eAAe,OAAS,QACpEA,EAAW,iBAAiB,QAAS,IAAM,CACzC,GAAI,KAAK,gBAAkB,KAAK,eAAe,OAAS,OAAQ,CAC9D,MAAMnS,EAAO,KAAK,eACZkK,EAAWlK,EAAK,MAChBmK,EAAW,WAAWgI,EAAW,KAAK,EAAI,KAAK,GAAK,IAE1D,GAAIjI,IAAaC,EAAU,CACzB,MAAMF,EAAM,IAAI5J,EACdL,EACA,QACAkK,EACAC,EACA,IAAM,CACJ,KAAK,OAAA,EACL,KAAK,oBAAA,CACP,CAAA,EAEF,KAAK,eAAe,QAAQF,CAAG,EAC/B,KAAK,sBAAA,CACP,CACF,CACF,CAAC,EAIH4H,EAAW,aAAc,OAAO,EAChCA,EAAW,cAAe,QAAQ,EAClCA,EAAW,cAAe,QAAQ,EAG9B,KAAK,gBAAkB,KAAK,eAAe,OAAS,OAAQ,CAC9D,MAAM7R,EAAO,KAAK,eACdA,EAAK,YAAc,WAAaA,EAAK,UACvCA,EAAK,SAAS,QAAQ,CAACoS,EAAGpL,IAAM,CAE9B,MAAMqL,EAAS,SAAS,eAAe,eAAerL,CAAC,IAAI,EACvDqL,GACFA,EAAO,iBAAiB,QAAS,IAAM,CACrC,MAAMlS,EAAO,WAAWkS,EAAO,KAAK,EAC9B7H,EAAc,KAAK,MAAM,KAAK,UAAUxK,EAAK,QAAQ,CAAC,EACtDyK,EAAc,KAAK,MAAM,KAAK,UAAUzK,EAAK,QAAQ,CAAC,EAC5DyK,EAAYzD,CAAC,EAAE,EAAI7G,EAEnB,MAAM8J,EAAM,IAAI5J,EACdL,EACA,WACAwK,EACAC,EACA,IAAM,CACJ,KAAK,OAAA,EACL,KAAK,oBAAA,CACP,CAAA,EAEF,KAAK,eAAe,QAAQR,CAAG,EAC/B,KAAK,sBAAA,CACP,CAAC,EAIH,MAAMqI,EAAS,SAAS,eAAe,eAAetL,CAAC,IAAI,EACvDsL,GACFA,EAAO,iBAAiB,QAAS,IAAM,CACrC,MAAMlS,EAAO,WAAWkS,EAAO,KAAK,EAC9B9H,EAAc,KAAK,MAAM,KAAK,UAAUxK,EAAK,QAAQ,CAAC,EACtDyK,EAAc,KAAK,MAAM,KAAK,UAAUzK,EAAK,QAAQ,CAAC,EAC5DyK,EAAYzD,CAAC,EAAE,EAAI5G,EAEnB,MAAM6J,EAAM,IAAI5J,EACdL,EACA,WACAwK,EACAC,EACA,IAAM,CACJ,KAAK,OAAA,EACL,KAAK,oBAAA,CACP,CAAA,EAEF,KAAK,eAAe,QAAQR,CAAG,EAC/B,KAAK,sBAAA,CACP,CAAC,CAEL,CAAC,CAEL,CAGA4H,EAAW,gBAAiB,UAAU,EACtCA,EAAW,eAAgB,SAAS,EAGpC,MAAMU,EAAgB,SAAS,eAAe,eAAe,EACzDA,GAAiB,KAAK,gBAAkB,KAAK,eAAe,OAAS,QACvEA,EAAc,iBAAiB,QAAS,IAAM,CAC5C,GAAI,KAAK,gBAAkB,KAAK,eAAe,OAAS,OAAQ,CAC9D,MAAMvS,EAAO,KAAK,eACZwS,EAAcxS,EAAK,SACzB,IAAI2R,EAAc,WAAWY,EAAc,KAAK,EAGhD,MAAMb,EAAe,KAAK,wBAAwBc,CAAW,EAG7D,GAFAb,EAAc,KAAK,wBAAwBA,EAAaD,CAAY,EAEhEc,IAAgBb,EAAa,CAC/B,MAAM1H,EAAM,IAAI5J,EACdL,EACA,WACAwS,EACAb,EACA,IAAM,CACJ,KAAK,OAAA,EACL,KAAK,oBAAA,CACP,CAAA,EAEF,KAAK,eAAe,QAAQ1H,CAAG,EAC/B,KAAK,sBAAA,CACP,CACF,CACF,CAAC,EAIH,MAAMwI,EAAiB,SAAS,eAAe,uBAAuB,EAClEA,GAAkB,KAAK,gBAAkB,KAAK,eAAe,OAAS,QACxEA,EAAe,iBAAiB,SAAU,IAAM,CAC9C,GAAI,KAAK,gBAAkB,KAAK,eAAe,OAAS,OAAQ,CAC9D,MAAMzS,EAAO,KAAK,eACZwS,EAAcxS,EAAK,SACnB0R,EAAe,SAASe,EAAe,KAAK,EAG5Cd,EAAc,KAAK,wBAAwBa,EAAad,CAAY,EAE1E,GAAIc,IAAgBb,EAAa,CAC/B,MAAM1H,EAAM,IAAI5J,EACdL,EACA,WACAwS,EACAb,EACA,IAAM,CACJ,KAAK,OAAA,EACL,KAAK,oBAAA,CACP,CAAA,EAEF,KAAK,eAAe,QAAQ1H,CAAG,EAC/B,KAAK,sBAAA,CACP,CACF,CACF,CAAC,EAGH4H,EAAW,mBAAoB,aAAa,EAC5CA,EAAW,qBAAsB,eAAe,EAChDA,EAAW,sBAAuB,gBAAgB,EAClDA,EAAW,oBAAqB,cAAc,EAC9CA,EAAW,qBAAsB,gBAAiB,EAAI,EAEtD,SAAS,eAAe,gBAAgB,GAAG,iBAAiB,QAAS,IAAM,KAAK,gBAAgB,CAClG,CAEQ,yBAAgC,CACtC,MAAMA,EAAa,CAACC,EAAY9H,EAAmB+H,EAAa,GAAOW,EAAW,KAAU,CAC1F,MAAMV,EAAO,SAAS,eAAeF,CAAE,EACnC,CAACE,GAAQ,CAAC,KAAK,gBAAkB,KAAK,eAAe,OAAS,SAElEA,EAAK,iBAAiBD,EAAa,SAAW,QAAS,IAAM,CAC3D,GAAI,KAAK,gBAAkB,KAAK,eAAe,OAAS,QAAS,CAC/D,MAAMtI,EAAQ,KAAK,eACblJ,EAAYkJ,EAAcO,CAAI,EACpC,IAAIxJ,EAAgBuR,EAAaC,EAAK,QAAU,WAAWA,EAAK,KAAK,EAIrE,GAHIU,IAAUlS,EAAWA,EAAW,KAAK,GAAK,KAG1CD,IAAaC,EAAU,CACzB,MAAMyJ,EAAM,IAAI5J,EACdoJ,EACAO,EACAzJ,EACAC,EACA,IAAM,CACJ,KAAK,OAAA,EACL,KAAK,oBAAA,CACP,CAAA,EAEF,KAAK,eAAe,QAAQyJ,CAAG,EAC/B,KAAK,sBAAA,CACP,CACF,CACF,CAAC,CACH,EAGM0I,EAAe,CAACb,EAAYpI,EAAoBkJ,IAAiB,CACrE,MAAMZ,EAAO,SAAS,eAAeF,CAAE,EACnC,CAACE,GAAQ,CAAC,KAAK,gBAAkB,KAAK,eAAe,OAAS,SAElEA,EAAK,iBAAiB,QAAS,IAAM,CACnC,GAAI,KAAK,gBAAkB,KAAK,eAAe,OAAS,QAAS,CAC/D,MAAMvI,EAAQ,KAAK,eACbM,EAASL,EAAYD,EAAM,aAAeA,EAAM,aAChDO,EAAON,EAAY,eAAiB,eACpCnJ,EAAW,CAAE,EAAGwJ,EAAO,EAAG,EAAGA,EAAO,CAAA,EACpCvJ,EAAW,CAAE,EAAGuJ,EAAO,EAAG,EAAGA,EAAO,CAAA,EAQ1C,GANI6I,EACFpS,EAAS,EAAI,WAAWwR,EAAK,KAAK,EAElCxR,EAAS,EAAI,WAAWwR,EAAK,KAAK,EAGhCzR,EAAS,IAAMC,EAAS,GAAKD,EAAS,IAAMC,EAAS,EAAG,CAC1D,MAAMyJ,EAAM,IAAI5J,EACdoJ,EACAO,EACAzJ,EACAC,EACA,IAAM,CACJ,KAAK,OAAA,EACL,KAAK,oBAAA,CACP,CAAA,EAEF,KAAK,eAAe,QAAQyJ,CAAG,EAC/B,KAAK,sBAAA,CACP,CACF,CACF,CAAC,CACH,EAEA0I,EAAa,qBAAsB,GAAM,EAAI,EAC7CA,EAAa,qBAAsB,GAAM,EAAK,EAC9CA,EAAa,qBAAsB,GAAO,EAAI,EAC9CA,EAAa,qBAAsB,GAAO,EAAK,EAG/Cd,EAAW,mBAAoB,cAAe,EAAI,EAClDA,EAAW,kBAAmB,aAAc,GAAO,EAAI,EACvDA,EAAW,kBAAmB,aAAc,GAAO,EAAI,EAGvDA,EAAW,mBAAoB,cAAe,EAAI,EAClDA,EAAW,kBAAmB,aAAc,EAAK,EACjDA,EAAW,sBAAuB,iBAAkB,EAAK,EAGzDA,EAAW,wBAAyB,mBAAoB,EAAI,EAE5D,SAAS,eAAe,gBAAgB,GAAG,iBAAiB,QAAS,IAAM,KAAK,gBAAgB,CAClG,CAIQ,uBAA8B,CACpC,MAAMgB,EAAU,SAAS,eAAe,UAAU,EAC5CC,EAAU,SAAS,eAAe,UAAU,EAE9CD,IACFA,EAAQ,SAAW,CAAC,KAAK,eAAe,QAAA,GAEtCC,IACFA,EAAQ,SAAW,CAAC,KAAK,eAAe,QAAA,EAE5C,CAEQ,MAAa,CACnB,KAAK,eAAe,KAAA,EACpB,KAAK,sBAAA,EACL,KAAK,aAAa,OAAQ,GAAI,KAAK,CACrC,CAEQ,MAAa,CACnB,KAAK,eAAe,KAAA,EACpB,KAAK,sBAAA,EACL,KAAK,aAAa,OAAQ,GAAI,KAAK,CACrC,CAIQ,gBAAgBC,EAA0B,CAChD,MAAMC,EAAa,SAAS,eAAe,aAAa,EAClDC,EAAgB,SAAS,eAAe,gBAAgB,EACxDC,EAAe,SAAS,eAAe,eAAe,EACtDC,EAAgB,SAAS,eAAe,gBAAgB,EAE1DJ,EAAS,CAAC,GAAKC,IAAYA,EAAW,YAAcD,EAAS,CAAC,GAC9DE,IAAeA,EAAc,YAAc,OAAO,KAAK,QAAQ,MAAM,IACrEF,EAAS,CAAC,GAAKG,IAAcA,EAAa,YAAcH,EAAS,CAAC,GAClEA,EAAS,CAAC,GAAKI,IAAeA,EAAc,YAAcJ,EAAS,CAAC,EAC1E,CAEQ,QAAe,CACjB,QAAQ,uBAAuB,IACjC,KAAK,QAAU,CAAA,EACf,KAAK,eAAiB,KACtB,KAAK,oBAAA,EACL,KAAK,OAAA,EAET,CAEQ,SAAgB,CACtB,GAAI,KAAK,QAAQ,SAAW,EAAG,CAC7B,MAAM,UAAU,EAChB,MACF,CACA,MAAMK,EAAO,KAAK,UAAU,KAAK,QAAS,KAAM,CAAC,EACjD9L,GAAa8L,EAAM,UAAU,EAC7B,MAAM,SAAS,CACjB,CAEQ,SAAgB,CACJ,SAAS,eAAe,YAAY,GAC3C,MAAA,CACb,CAEA,MAAc,aAAanL,EAA2B,CACpD,GAAI,CACF,MAAMuI,EAAO,MAAMvI,EAAK,KAAA,EAClBmL,EAAO,KAAK,MAAM5C,CAAI,EAG5B,GAAI4C,EAAK,gBAAkBA,EAAK,QAAUA,EAAK,OAAQ,CACrD,MAAM;AAAA,0BAA0D,EAChE,MACF,CAGA,GAAI,CAAC,MAAM,QAAQA,CAAI,EACrB,MAAM,IAAI,MAAM,kBAAkB,EAIpC,UAAWzI,KAAOyI,EAChB,GAAI,CAACzI,EAAI,IAAM,CAACA,EAAI,KAClB,MAAM,IAAI,MAAM,4BAA4B,EAKhD,KAAK,QAAUyI,EAAK,IAAKzI,GACnBA,EAAI,OAAS,OAER,CACL,GAAGA,EACH,cAAeA,EAAI,eAAiB3J,GACpC,eAAgB2J,EAAI,gBAAkB1J,GACtC,aAAc0J,EAAI,cAAgBzJ,GAClC,QAASyJ,EAAI,SAAW9J,GACxB,SAAU8J,EAAI,UAAY7J,GAC1B,YAAa6J,EAAI,aAAe5J,GAChC,cAAe4J,EAAI,eAAiB,EAAA,EAGjCA,CACR,EAED,KAAK,eAAiB,KACtB,KAAK,eAAiB,IAAIlK,GAC1B,KAAK,sBAAA,EACL,KAAK,oBAAA,EACL,KAAK,OAAA,EACL,MAAM,SAAS,CACjB,OAAS4S,EAAO,CACd,QAAQ,MAAM,UAAWA,CAAK,EAC9B,MAAM,YAAcA,aAAiB,MAAQA,EAAM,QAAU,OAAOA,CAAK,EAAE,CAC7E,CACF,CAEQ,aAAoB,CAC1B,MAAMC,EAAY,CAChB,eAAgB,CACd,QAAS,CAAC,EAAG,IAAI,EACjB,eAAgB,GAChB,kBAAmB,EAAA,EAErB,OAAQ,KAAK,QACV,UAAY3J,EAAE,OAAS,MAAM,EAC7B,IAAI3J,GAAQ,KAAK,YAAYA,CAAY,CAAC,EAC7C,OAAQ,KAAK,QACV,UAAY2J,EAAE,OAAS,OAAO,EAC9B,IAAIF,GAAS,KAAK,aAAaA,CAAc,CAAC,CAAA,EAG7C8J,EAAO,KAAK,UAAUD,EAAW,KAAM,CAAC,EAC9ChM,GAAaiM,EAAM,mBAAmB,CACxC,CAEQ,YAAYvT,EAAiB,CACnC,MAAMwT,EAAkB,CAAA,EAGxB,OAAIxT,EAAK,YAAc,OAASA,EAAK,OAASA,EAAK,OACjDwT,EAAS,KAAK,CACZ,MAAO,CACL,KAAM,MACN,OAAQ,CACN,MAAOxT,EAAK,MACZ,OAAQA,EAAK,MAAA,CACf,EAEF,YAAa,CACX,QAASA,EAAK,QACd,SAAUA,EAAK,SACf,YAAaA,EAAK,YAClB,UAAW,GACX,qBAAsB,EACtB,iBAAkB,MAClB,mBAAoB,CAAA,CACtB,CACD,EACQA,EAAK,YAAc,UAAYA,EAAK,OAC7CwT,EAAS,KAAK,CACZ,MAAO,CACL,KAAM,SACN,OAAQ,CACN,OAAQxT,EAAK,MAAA,CACf,EAEF,YAAa,CACX,QAASA,EAAK,QACd,SAAUA,EAAK,SACf,YAAaA,EAAK,YAClB,UAAW,GACX,qBAAsB,EACtB,iBAAkB,MAClB,mBAAoB,CAAA,CACtB,CACD,EACQA,EAAK,YAAc,WAAaA,EAAK,UAC9CwT,EAAS,KAAK,CACZ,MAAO,CACL,KAAM,UACN,OAAQ,CACN,SAAUxT,EAAK,SAAS,IAAIuK,GAAK,CAACA,EAAE,EAAGA,EAAE,CAAC,CAAC,CAAA,CAC7C,EAEF,YAAa,CACX,QAASvK,EAAK,QACd,SAAUA,EAAK,SACf,YAAaA,EAAK,YAClB,UAAW,GACX,qBAAsB,EACtB,iBAAkB,MAClB,mBAAoB,CAAA,CACtB,CACD,EAGI,CACL,GAAIA,EAAK,GACT,SAAU,CACR,KAAMA,EAAK,SACX,SAAU,CAACA,EAAK,SAAS,EAAGA,EAAK,SAAS,CAAC,EAC3C,MAAOA,EAAK,MACZ,gBAAiB,CAAC,EAAG,CAAC,EACtB,iBAAkB,EAClB,eAAgBA,EAAK,cACrB,gBAAiBA,EAAK,eACtB,YAAa,GACb,MAAO,GACP,eAAgBA,EAAK,cACrB,OAAQ,GACR,cAAeA,EAAK,YAAA,EAEtB,SAAAwT,EACA,kBAAmB,CAAA,EACnB,UAAW,CAAA,CAAC,CAEhB,CAEQ,aAAa/J,EAAmB,CACtC,MAAMwC,EAAQ,KAAK,QAAQ,QAAU,EAAE,KAAOxC,EAAM,OAAO,EACrDgC,EAAQ,KAAK,QAAQ,QAAU,EAAE,KAAOhC,EAAM,OAAO,EAE3D,MAAI,CAACwC,GAAS,CAACR,EAAc,KAatB,CACL,GAXW,CACX,GAAIhC,EAAM,GACV,WAAY,WACZ,OAAQA,EAAM,QACd,OAAQA,EAAM,QACd,kBAAmB,CAAA,EACnB,UAAW,CAAA,CAAC,EAMZ,UAAW,CACT,eAAgB,CAACA,EAAM,aAAa,EAAGA,EAAM,aAAa,CAAC,EAC3D,eAAgB,CAACA,EAAM,aAAa,EAAGA,EAAM,aAAa,CAAC,EAC3D,gBAAiBgC,EAAM,MAAQQ,EAAM,MACrC,aAAcxC,EAAM,aAAe,GACnC,YAAaA,EAAM,YAAc,CAAC,KAAK,GAAK,EAC5C,YAAaA,EAAM,YAAc,KAAK,GAAK,EAC3C,aAAc,GACd,YAAa,EACb,iBAAkB,EAClB,kBAAmB,EAAA,CACrB,CAEJ,CAIQ,eAAegK,EAAyB,CAE9C,SAAS,iBAAiB,WAAW,EAAE,QAAQ3L,GAAO,CACnDA,EAA0B,SAAW2L,EAClCA,EACF3L,EAAI,UAAU,IAAI,UAAU,EAE5BA,EAAI,UAAU,OAAO,UAAU,CAEnC,CAAC,EAGmB,CAAC,UAAW,WAAY,WAAY,aAAc,WAAY,UAAU,EAChF,QAAQgK,GAAM,CACxB,MAAMhK,EAAM,SAAS,eAAegK,CAAE,EAClChK,IACFA,EAAI,SAAW2L,EAEnB,CAAC,CACH,CAEQ,eAAsB,CACxB,KAAK,cACP,KAAK,YAAA,EAEL,KAAK,aAAA,CAET,CAEQ,cAAqB,CAE3B,GAAI,OAAQ,OAAe,QAAY,IAAa,CAClD,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA,gBAA4F,EAClG,QAAQ,MAAM,4BAA4B,EAC1C,QAAQ,IAAI,WAAY,OAAO,KAAK,MAAM,EAAE,OAAOC,GAAKA,EAAE,SAAS,IAAI,CAAC,CAAC,EACzE,MACF,CAGA,GAAI,KAAK,QAAQ,SAAW,EAAG,CAC7B,MAAM,mBAAmB,EACzB,MACF,CAEA,QAAQ,IAAI,WAAW,EACvB,QAAQ,IAAI,qBAAqB,EAEjC,KAAK,cAAgB,GACrB,KAAK,cAAgB,GAGrB,KAAK,qBAAuB,CAAA,EAC5B,UAAW/I,KAAO,KAAK,QACrB,GAAIA,EAAI,OAAS,OAAQ,CACvB,MAAM3K,EAAO2K,EACb,KAAK,qBAAqB,KAAK,CAC7B,GAAI3K,EAAK,GACT,SAAU,CAAE,EAAGA,EAAK,SAAS,EAAG,EAAGA,EAAK,SAAS,CAAA,EACjD,MAAOA,EAAK,KAAA,CACb,CACH,CAIF,KAAK,OAAO,MAAM,OAAS,UAC3B,SAAS,eAAe,kBAAkB,EAAG,MAAM,QAAU,OAC7D,SAAS,eAAe,gBAAgB,EAAG,MAAM,QAAU,OAG3D,KAAK,eAAe,EAAI,EAGxB,SAAS,eAAe,kBAAkB,EAAG,MAAM,QAAU,OAC7D,SAAS,eAAe,mBAAmB,EAAG,MAAM,QAAU,eAG9D,KAAK,WAAasD,EAClB,KAAK,qBAAuBC,EAC5B,KAAK,qBAAuBC,EAC5B,QAAQ,IAAI,gBAAgB,KAAK,UAAU,aAAa,KAAK,qBAAqB,QAAQ,CAAC,CAAC,aAAa,KAAK,qBAAqB,QAAQ,CAAC,CAAC,EAAE,EAG/I,KAAK,eAAA,EAGL,KAAK,sBAAA,EAEL,KAAK,aAAa,SAAU,QAAQ,KAAK,QAAQ,MAAM,GAAI,aAAa,CAC1E,CAEQ,gBAAuB,CAC7B,QAAQ,IAAI,sBAAsB,EAClC,QAAQ,IAAI,WAAW,KAAK,QAAQ,MAAM,EAAE,EAG5C,KAAK,YAAY,MAAA,EACjB,KAAK,YAAY,MAAA,EACjB,QAAQ,IAAI,gBAAgB,EAG5B,MAAMmQ,EAAU,OAAe,OACzBC,EAAW,OAAe,QAC1BC,EAAU,OAAe,OAGzBC,EAAY,IAAIH,EACtBG,EAAU,UAAU,IAAI,KAAO,IAAK,EACpCA,EAAU,UAAU,IAAI,IAAM,GAAI,EAKlC,MAAMC,EAAe,KAAO,KAAK,WAC3BC,EAAU,IAAIH,EAAO,EAAGE,CAAY,EACpCE,EAAU,GAEhB,QAAQ,IAAI,SAASF,EAAa,QAAQ,CAAC,CAAC,0CAA0C,KAAK,UAAU,GAAG,EAGxG,KAAK,WAAa,IAAIH,EAAQE,EAAWE,EAASC,CAAO,EACzD,QAAQ,IAAI,aAAa,EAGzB,MAAMC,EAAS,KAAK,QAAQ,OAAOvK,GAAKA,EAAE,OAAS,MAAM,EACnDwK,EAAS,KAAK,QAAQ,OAAOxK,GAAKA,EAAE,OAAS,OAAO,EAC1D,QAAQ,IAAI,SAASuK,EAAO,MAAM,SAASC,EAAO,MAAM,MAAM,EAG9D,IAAIC,EAAmB,EACnBC,EAAgB,EACpB,UAAW1J,KAAO,KAAK,QACrB,GAAIA,EAAI,OAAS,OAAQ,CACvB,MAAM3K,EAAO2K,EACP2J,EAAS,KAAK,gBAAgBtU,CAAI,EACpCsU,GACF,KAAK,YAAY,IAAItU,EAAK,GAAIsU,CAAM,EACpCF,KAEAC,GAEJ,CAGF,QAAQ,IAAI,WAAWD,CAAgB,QAAQC,CAAa,KAAK,EACjE,QAAQ,IAAI,0BAA0B,KAAK,YAAY,IAAI,EAAE,EAC7D,QAAQ,IAAI,sBAAuB,MAAM,KAAK,KAAK,YAAY,KAAA,CAAM,CAAC,EAGtE,IAAIE,EAAoB,EACpBC,EAAiB,EACrB,UAAW7J,KAAO,KAAK,QACrB,GAAIA,EAAI,OAAS,QAAS,CACxB,MAAMlB,EAAQkB,EACR8J,EAAU,KAAK,iBAAiBhL,CAAK,EACvCgL,GACF,KAAK,YAAY,IAAIhL,EAAM,GAAIgL,CAAO,EACtCF,KAEAC,GAEJ,CAGF,QAAQ,IAAI,WAAWD,CAAiB,QAAQC,CAAc,KAAK,EACnE,QAAQ,IAAI,uBAAuB,EACnC,QAAQ,IAAI,SAAS,KAAK,YAAY,IAAI,SAAS,KAAK,YAAY,IAAI,MAAM,CAChF,CAEQ,gBAAgBxU,EAAiB,CACvC,QAAQ,IAAI,qBAAqBA,EAAK,EAAE,UAAUA,EAAK,QAAQ,WAAWA,EAAK,SAAS,EAAE,EAG1F,MAAM0U,EAAa,OAAe,UAC5BC,EAAY,OAAe,SAC3BC,EAAe,OAAe,YAC9BC,EAAa,OAAe,UAE5BC,EAAU,IAAIJ,EAGpB,IAAIK,EAAgB,KAEpB,GAAI/U,EAAK,YAAc,OAASA,EAAK,OAASA,EAAK,OAAQ,CACzD+U,EAAW,IAAIJ,EAGf,MAAMlG,EAAYzO,EAAK,MAAQ,KAAK,WAAa,EAC3C0O,EAAa1O,EAAK,OAAS,KAAK,WAAa,EACnD+U,EAAS,QAAQ,IAAItG,EAAWC,CAAU,EAC1C,QAAQ,IAAI,cAAcD,EAAU,QAAQ,CAAC,CAAC,UAAUC,EAAW,QAAQ,CAAC,CAAC,iBAAiB,KAAK,UAAU,GAAG,CAClH,SAAW1O,EAAK,YAAc,UAAYA,EAAK,OAC7C+U,EAAW,IAAIH,EAEfG,EAAS,OAAS/U,EAAK,OAAS,KAAK,WACrC,QAAQ,IAAI,cAAc+U,EAAS,OAAO,QAAQ,CAAC,CAAC,iBAAiB,KAAK,UAAU,GAAG,UAC9E/U,EAAK,YAAc,WAAaA,EAAK,UAAYA,EAAK,SAAS,QAAU,EAAG,CAGrF,GAAIA,EAAK,SAAS,OAAS,EACzB,eAAQ,MAAM,iBAAiBA,EAAK,SAAS,MAAM,MAAmB,EACtE,QAAQ,MAAM,2BAAwC,EAC/C,KAGT+U,EAAW,IAAIF,EACfE,EAAS,YAAc/U,EAAK,SAAS,OAErC,QAAQ,IAAI,gBAAgBA,EAAK,SAAS,MAAM,MAAM,EAMtD,QAASgH,EAAI,EAAGA,EAAIhH,EAAK,SAAS,OAAQgH,IAAK,CAC7C,MAAMuD,EAAIvK,EAAK,SAASgH,CAAC,EACnBgO,EAAKzK,EAAE,EAAI,KAAK,WAChB0K,EAAK1K,EAAE,EAAI,KAAK,WAGtBwK,EAAS,SAAS/N,CAAC,EAAE,IAAIgO,EAAIC,CAAE,EAC/B,QAAQ,IAAI,UAAUjO,CAAC,SAASuD,EAAE,EAAE,QAAQ,CAAC,CAAC,KAAKA,EAAE,EAAE,QAAQ,CAAC,CAAC,cAAcyK,EAAG,QAAQ,CAAC,CAAC,KAAKC,EAAG,QAAQ,CAAC,CAAC,GAAG,CACnH,CAEA,QAAQ,IAAI,2BAA2B,KAAK,UAAU,QAAQ,CAChE,CAEA,GAAI,CAACF,EACH,eAAQ,MAAM,aAAa/U,EAAK,SAAS,WAAWA,EAAK,KAAK,YAAYA,EAAK,MAAM,YAAYA,EAAK,MAAM,EAAE,EACvG,KAIT+U,EAAS,QAAU/U,EAAK,WAAa,SAAW,EAAIA,EAAK,QACzD+U,EAAS,SAAW/U,EAAK,SACzB+U,EAAS,YAAc/U,EAAK,YAC5B,QAAQ,IAAI,qBAAqB+U,EAAS,OAAO,cAAcA,EAAS,QAAQ,iBAAiBA,EAAS,WAAW,EAAE,EAGvHD,EAAQ,SAASC,CAAQ,EAIzB,MAAMzQ,GAAWtE,EAAK,SAAS,EAAI,KAAK,sBAAwB,KAAK,WAAa,KAAK,OAAO,MAAQ,EAChGuE,GAAWvE,EAAK,SAAS,EAAI,KAAK,sBAAwB,KAAK,WAAa,KAAK,OAAO,OAAS,EACvG8U,EAAQ,SAAS,IAAIxQ,EAASC,CAAO,EACrC,QAAQ,IAAI,cAAcvE,EAAK,SAAS,EAAE,QAAQ,CAAC,CAAC,KAAKA,EAAK,SAAS,EAAE,QAAQ,CAAC,CAAC,cAAcsE,EAAQ,QAAQ,CAAC,CAAC,KAAKC,EAAQ,QAAQ,CAAC,CAAC,SAAS,EAGnJuQ,EAAQ,SAAW9U,EAAK,MACxB,QAAQ,IAAI,YAAYA,EAAK,MAAQ,IAAM,KAAK,IAAI,QAAQ,CAAC,CAAC,eAAe8U,EAAQ,SAAW,IAAM,KAAK,IAAI,QAAQ,CAAC,CAAC,GAAG,EAG5H,MAAMR,EAAS,KAAK,WAAW,WAAWQ,CAAO,EAEjD,GAAIR,EAAQ,CACV,QAAQ,IAAI,UAAUtU,EAAK,EAAE,OAAO,EAEpC,MAAMkV,EAAYZ,EAAO,aAAA,EACrBY,EACF,QAAQ,IAAI,qBAAqBA,EAAU,MAAM,EAAE,EAEnD,QAAQ,KAAK,qBAAqB,EAGpC,QAAQ,IAAI,aAAalV,EAAK,QAAQ,oBAAoB,CAC5D,MACE,QAAQ,MAAM,UAAUA,EAAK,EAAE,0BAA0B,EACzD,QAAQ,MAAM,kBAAkBA,EAAK,QAAQ,WAAWA,EAAK,SAAS,EAAE,EACxE,QAAQ,MAAM,eAAgB8U,CAAO,EACrC,QAAQ,MAAM,gBAAiBC,CAAQ,EAGzC,OAAOT,CACT,CAEQ,iBAAiB7K,EAAmB,CAC1C,QAAQ,IAAI,sBAAsBA,EAAM,EAAE,UAAUA,EAAM,SAAS,WAAWA,EAAM,OAAO,WAAWA,EAAM,OAAO,EAAE,EAGrH,MAAM0L,EAAsB,OAAe,mBAErClJ,EAAQ,KAAK,YAAY,IAAIxC,EAAM,OAAO,EAC1CgC,EAAQ,KAAK,YAAY,IAAIhC,EAAM,OAAO,EAEhD,GAAI,CAACwC,EACH,eAAQ,MAAM,QAAQxC,EAAM,EAAE,aAAaA,EAAM,OAAO,QAAQ,EAChE,QAAQ,IAAI,kBAAmB,MAAM,KAAK,KAAK,YAAY,KAAA,CAAM,CAAC,EAC3D,KAGT,GAAI,CAACgC,EACH,eAAQ,MAAM,QAAQhC,EAAM,EAAE,aAAaA,EAAM,OAAO,QAAQ,EAChE,QAAQ,IAAI,kBAAmB,MAAM,KAAK,KAAK,YAAY,KAAA,CAAM,CAAC,EAC3D,KAKT,GAFA,QAAQ,IAAI,wBAAwB,EAEhCA,EAAM,YAAc,WAAY,CAElC,MAAM2L,EAAW,KAAK,QAAQ,QAAUzL,EAAE,KAAOF,EAAM,OAAO,EACxD4L,EAAW,KAAK,QAAQ,QAAU1L,EAAE,KAAOF,EAAM,OAAO,EAE9D,GAAI,CAAC2L,GAAY,CAACC,EAChB,eAAQ,MAAM,QAAQ5L,EAAM,EAAE,4BAA4B,CAAC,CAAC2L,CAAQ,cAAc,CAAC,CAACC,CAAQ,EAAE,EACvF,KAGT,QAAQ,IAAI,2BAA2BD,EAAS,SAAS,EAAE,QAAQ,CAAC,CAAC,KAAKA,EAAS,SAAS,EAAE,QAAQ,CAAC,CAAC,iBAAiBC,EAAS,SAAS,EAAE,QAAQ,CAAC,CAAC,KAAKA,EAAS,SAAS,EAAE,QAAQ,CAAC,CAAC,GAAG,EAG7L,MAAMC,EAAW,IAAIH,EACrBG,EAAS,MAAQrJ,EACjBqJ,EAAS,MAAQ7J,EAGjB,MAAMc,EAAe9G,EACnBgE,EAAM,aAAa,EACnBA,EAAM,aAAa,EACnB2L,EAAS,SAAS,EAClBA,EAAS,SAAS,EAClBA,EAAS,KAAA,EAKLG,GAAiBhJ,EAAa,EAAI,KAAK,sBAAwB,KAAK,WAAa,KAAK,OAAO,MAAQ,EACrGiJ,GAAiBjJ,EAAa,EAAI,KAAK,sBAAwB,KAAK,WAAa,KAAK,OAAO,OAAS,EAG5G+I,EAAS,YAAY,IAAIC,EAAeC,CAAa,EAErD,QAAQ,IAAI,cAAc/L,EAAM,aAAa,EAAE,QAAQ,CAAC,CAAC,KAAKA,EAAM,aAAa,EAAE,QAAQ,CAAC,CAAC,WAAW8C,EAAa,EAAE,QAAQ,CAAC,CAAC,KAAKA,EAAa,EAAE,QAAQ,CAAC,CAAC,cAAcgJ,EAAc,QAAQ,CAAC,CAAC,KAAKC,EAAc,QAAQ,CAAC,CAAC,SAAS,EAEvO/L,EAAM,cACR6L,EAAS,YAAc,GACvBA,EAAS,WAAa7L,EAAM,YAAc,CAAC,KAAK,GAAK,EACrD6L,EAAS,WAAa7L,EAAM,YAAc,KAAK,GAAK,EACpD,QAAQ,IAAI,cAAc6L,EAAS,WAAa,IAAM,KAAK,IAAI,QAAQ,CAAC,CAAC,QAAQA,EAAS,WAAa,IAAM,KAAK,IAAI,QAAQ,CAAC,CAAC,GAAG,GAIjI7L,EAAM,cACR6L,EAAS,YAAc,GACvBA,EAAS,WAAa7L,EAAM,YAAc,EAC1C6L,EAAS,YAAc7L,EAAM,gBAAkB,IAC/C,QAAQ,IAAI,cAAc6L,EAAS,WAAW,QAAQ,CAAC,CAAC,cAAcA,EAAS,WAAW,EAAE,GAI9FA,EAAS,iBAAmB7L,EAAM,kBAAoB,GACtD,QAAQ,IAAI,aAAa6L,EAAS,gBAAgB,EAAE,EAGpD,GAAI,CACF,MAAMb,EAAU,KAAK,WAAW,YAAYa,CAAQ,EACpD,OAAIb,GACF,QAAQ,IAAI,WAAWhL,EAAM,EAAE,OAAO,EAC/BgL,IAEP,QAAQ,MAAM,WAAWhL,EAAM,EAAE,2BAA2B,EACrD,KAEX,OAAS4J,EAAO,CACd,eAAQ,MAAM,WAAW5J,EAAM,EAAE,SAAU4J,CAAK,EACzC,IACT,CACF,CAEA,eAAQ,KAAK,gBAAgB5J,EAAM,SAAS,EAAE,EACvC,IACT,CAEQ,uBAA8B,CACpC,MAAMgM,EAAU,IAAM,CACf,KAAK,gBAEL,KAAK,gBAGR,KAAK,WAAW,KAAK,oBAAQ,EAAE,EAG/B,KAAK,mBAAA,GAIP,KAAK,OAAA,EAGL,KAAK,mBAAqB,sBAAsBA,CAAO,EACzD,EAEAA,EAAA,CACF,CAEQ,oBAA2B,CACjC,SAAW,CAAC3D,EAAIwC,CAAM,IAAK,KAAK,YAAY,UAAW,CACrD,MAAMtU,EAAO,KAAK,QAAQ,KAAK2J,GAAKA,EAAE,KAAOmI,CAAE,EAC/C,GAAI9R,EAAM,CAER,MAAMmJ,EAAMmL,EAAO,WACbnO,EAAQmO,EAAO,WAKfhQ,EAAU6E,EAAI,EACd5E,EAAU4E,EAAI,EAGdjE,GAAUZ,EAAU,KAAK,OAAO,MAAQ,GAAK,KAAK,WAAa,KAAK,qBACpEa,GAAUZ,EAAU,KAAK,OAAO,OAAS,GAAK,KAAK,WAAa,KAAK,qBAE3EvE,EAAK,SAAS,EAAIkF,EAClBlF,EAAK,SAAS,EAAImF,EAClBnF,EAAK,MAAQmG,CACf,CACF,CACF,CAEQ,cAAqB,CAC3B,KAAK,cAAgB,GACrB,SAAS,eAAe,kBAAkB,EAAG,MAAM,QAAU,eAC7D,SAAS,eAAe,mBAAmB,EAAG,MAAM,QAAU,MAChE,CAEQ,eAAsB,CAC5B,KAAK,cAAgB,GACrB,SAAS,eAAe,kBAAkB,EAAG,MAAM,QAAU,OAC7D,SAAS,eAAe,mBAAmB,EAAG,MAAM,QAAU,cAChE,CAEQ,+BAAsC,CAC5C,QAAQ,IAAI,0BAA0B,EACtC,QAAQ,IAAI,WAAW7C,CAAG,wBAAwBC,EAAgB,QAAQ,CAAC,CAAC,KAAKC,EAAgB,QAAQ,CAAC,CAAC,GAAG,EAG9G,MAAMkS,EAAY,KAAK,cACvB,KAAK,cAAgB,GAGrB,MAAMC,EAMD,CAAA,EAEL,SAAW,CAAC7D,EAAIwC,CAAM,IAAK,KAAK,YAAY,UAAW,CACrD,MAAMtU,EAAO,KAAK,QAAQ,KAAK2J,GAAKA,EAAE,KAAOmI,CAAE,EAC/C,GAAI9R,EAAM,CAER,MAAM4V,EAAa,CACjB,GAAI5V,EAAK,GACT,SAAU,CAAE,EAAGA,EAAK,SAAS,EAAG,EAAGA,EAAK,SAAS,CAAA,EACjD,MAAOA,EAAK,KAAA,EAIVA,EAAK,WAAa,WAAasU,EAAO,mBACxCsB,EAAM,eAAiB,CACrB,EAAGtB,EAAO,iBAAiB,EAC3B,EAAGA,EAAO,iBAAiB,CAAA,EAE7BsB,EAAM,gBAAkBtB,EAAO,mBAAqB,GAGtDqB,EAAc,KAAKC,CAAK,CAC1B,CACF,CAEA,QAAQ,IAAI,OAAOD,EAAc,MAAM,WAAW,EAG9C,KAAK,aACP,KAAK,WAAa,MAIpB,KAAK,WAAarS,EAClB,KAAK,qBAAuBC,EAC5B,KAAK,qBAAuBC,EAC5B,QAAQ,IAAI,gBAAgB,KAAK,UAAU,aAAa,KAAK,qBAAqB,QAAQ,CAAC,CAAC,aAAa,KAAK,qBAAqB,QAAQ,CAAC,CAAC,EAAE,EAG/I,KAAK,eAAA,EAGL,UAAWoS,KAASD,EAAe,CACjC,MAAMrB,EAAS,KAAK,YAAY,IAAIsB,EAAM,EAAE,EACxCtB,GAAUsB,EAAM,iBAElBtB,EAAO,iBAAiB,IAAIsB,EAAM,eAAe,EAAGA,EAAM,eAAe,CAAC,EAC1EtB,EAAO,kBAAoBsB,EAAM,iBAAmB,EACpD,QAAQ,IAAI,QAAQA,EAAM,EAAE,UAAUA,EAAM,eAAe,EAAE,QAAQ,CAAC,CAAC,KAAKA,EAAM,eAAe,EAAE,QAAQ,CAAC,CAAC,WAAWA,EAAM,eAAe,EAAE,EAEnJ,CAGA,KAAK,cAAgBF,EAGrB,KAAK,OAAA,EAEL,QAAQ,IAAI,sBAAsB,CACpC,CAEQ,cAAqB,CAC3B,QAAQ,IAAI,gBAAgB,EAGxB,KAAK,qBACP,qBAAqB,KAAK,kBAAkB,EAC5C,KAAK,mBAAqB,KAC1B,QAAQ,IAAI,SAAS,GAInB,KAAK,aACP,QAAQ,IAAI,eAAe,EAC3B,KAAK,WAAa,MAGpB,QAAQ,IAAI,cAAc,EAE1B,IAAIG,EAAgB,EACpB,UAAWC,KAAc,KAAK,qBAAsB,CAClD,MAAM9V,EAAO,KAAK,QAAQ,QAAU2J,EAAE,KAAOmM,EAAW,EAAE,EACtD9V,IACFA,EAAK,SAAS,EAAI8V,EAAW,SAAS,EACtC9V,EAAK,SAAS,EAAI8V,EAAW,SAAS,EACtC9V,EAAK,MAAQ8V,EAAW,MACxBD,IAEJ,CACA,QAAQ,IAAI,OAAOA,CAAa,SAAS,EAGzC,KAAK,eAAA,EACL,KAAK,cAAgB,GAGrB,SAAS,eAAe,kBAAkB,EAAG,MAAM,QAAU,OAC7D,SAAS,eAAe,mBAAmB,EAAG,MAAM,QAAU,eAG9D,KAAK,sBAAA,EAEL,QAAQ,IAAI,cAAc,EAC1B,KAAK,aAAa,SAAS,CAC7B,CAEQ,aAAoB,CAC1B,QAAQ,IAAI,QAAQ,EAEpB,KAAK,cAAgB,GAGjB,KAAK,qBACP,qBAAqB,KAAK,kBAAkB,EAC5C,KAAK,mBAAqB,MAIxB,KAAK,aACP,KAAK,WAAa,MAGpB,KAAK,YAAY,MAAA,EACjB,KAAK,YAAY,MAAA,EAGjB,UAAWC,KAAc,KAAK,qBAAsB,CAClD,MAAM9V,EAAO,KAAK,QAAQ,QAAU2J,EAAE,KAAOmM,EAAW,EAAE,EACtD9V,IACFA,EAAK,SAAS,EAAI8V,EAAW,SAAS,EACtC9V,EAAK,SAAS,EAAI8V,EAAW,SAAS,EACtC9V,EAAK,MAAQ8V,EAAW,MAE5B,CAGA,KAAK,qBAAuB,CAAA,EAG5B,SAAS,eAAe,kBAAkB,EAAG,MAAM,QAAU,OAC7D,SAAS,eAAe,gBAAgB,EAAG,MAAM,QAAU,OAC3D,KAAK,OAAO,MAAM,OAAS,YAG3B,KAAK,eAAe,EAAK,EAGzB,SAAS,eAAe,kBAAkB,EAAG,MAAM,QAAU,OAC7D,SAAS,eAAe,mBAAmB,EAAG,MAAM,QAAU,OAG9D,KAAK,OAAA,EAEL,KAAK,aAAa,SAAS,CAC7B,CACF,CAIA,OAAO,iBAAiB,mBAAoB,IAAM,CAChD,IAAIlO,GAAY,eAAe,CACjC,CAAC"}